Since no anomalies were detected in the table 'DAILYSALES', there is no need for a solution. However, I can provide a template for detecting anomalies in a database using Snowflake SQL.

Sample Output:


table_name : DAILYSALES
solution : No anomalies detected.

SQL Query:
-- Example query to detect anomalies in a generic table
SELECT *
FROM DAILYSALES
WHERE <condition to detect anomalies>;


You can replace `<condition to detect anomalies>` with specific conditions that define anomalies in your context, such as unexpected null values, outliers, or incorrect data types.
Issue: salinvtype - Contains negative values which are unexpected for a categorical column representing invoice types (e.g., "Retail", "Wholesale").

Issue: salgrossamt - Contains negative values which may not make sense for a column expected to represent gross amounts.

Issue: salspldiscamt, salschdiscamt, salcashdiscamt - Contains negative values which may not align with the semantic meaning of discount amounts, as discounts are typically positive values.

Issue: mrp - Contains negative values which are not expected for a column representing the maximum retail price.

Issue: creditnoteamt - Although all values are zero, it may require validation if these are expected for credit note amounts.

Issue: prdschdiscamt, prdcashdiscamt - These columns are highlighted in metadata for discounts and should not have negative values as discounts are deductions from a total.

Issue: salmktretamt - It should represent the amount for sales market returns; ensure values align with expected returns data.
========================================================================================================================================

table_name : SDL_CSL_DAILYSALES  
solution : Ensure that the 'salnetamt' is correctly calculated as the difference between 'salgrossamt' and the total deductions ('salspldiscamt', 'salschdiscamt', 'salcashdiscamt', 'saldbdiscamt', 'saltaxamt', 'salwdsamt', 'saldbadjamt', 'salcradjamt', 'salinvleveldiscamt', and 'salroundoffamt'). Recalculate if discrepancies exist.

SQL Query:
sql
SELECT * 
FROM SDL_CSL_DAILYSALES 
WHERE salnetamt <> (salgrossamt - (salspldiscamt + salschdiscamt + salcashdiscamt + saldbdiscamt + saltaxamt + salwdsamt + saldbadjamt + salcradjamt + salinvleveldiscamt + salroundoffamt));
Column: salgrossamt
Issue: Contains negative values (-5000.0), which are unusual for a gross amount column.

Column: mrp
Issue: Contains a negative value (-50.0), which is not expected for a maximum retail price.

Column: distcode
Issue: Contains a None value, which might not be valid if this column is expected to have a unique distributor code for each entry.
========================================================================================================================================

table_name : SDL_CSL_DAILYSALES_UNDELIVERED
solution : No anomalies detected.

SQL Query:
SELECT * FROM SDL_CSL_DAILYSALES_UNDELIVERED WHERE 1=0;
Issue: salgrossamt
- Semantic expectation: Positive numbers representing gross sales amount.
- Data holds: Negative values (e.g., -1500.0).

Issue: salspldiscamt
- Semantic expectation: Positive numbers representing special discount amounts.
- Data holds: Negative values (e.g., -100.0).

Issue: salschdiscamt
- Semantic expectation: Positive numbers representing scheme discount amounts.
- Data holds: Negative values (e.g., -90.0).

Issue: salcashdiscamt
- Semantic expectation: Positive numbers representing cash discount amounts.
- Data holds: Negative values (e.g., -200.0).
========================================================================================================================================

table_name : SDL_CSL_RDSSMWEEKLYTARGET_OUTPUT  
solution : Inspect missing values, negative targetyear and targetvalue, and validate anomalous date and run_id.

SQL Query:
sql
SELECT * 
FROM SDL_CSL_RDSSMWEEKLYTARGET_OUTPUT
WHERE distcode IS NULL
   OR targetrefno IS NULL
   OR smcode IS NULL
   OR smname IS NULL
   OR rmcode IS NULL
   OR rmname IS NULL
   OR targetyear < 0
   OR targetmonth IS NULL
   OR targetvalue < 0
   OR targetname IS NULL
   OR week1 < 0
   OR week2 < 0
   OR week3 < 0
   OR week4 < 0
   OR week5 < 0
   OR targetstatus IS NULL
   OR targettype IS NULL
   OR downloadstatus IS NULL
   OR run_id < 0;
1. **distcode**
   - **Issue**: The records show values like "None" and "DUPLICATE," which do not align with the expected format of a unique district code, such as "DIST001," "DIST002," etc.

2. **targetrefno**
   - **Issue**: The records contain "None" and "DUPLICATE," which are not valid reference numbers. Expected format is a unique alphanumeric code like "REF001," "REF002," etc.

3. **smcode**
   - **Issue**: Instances of "None" and "DUPLICATE" are present, which are inconsistent with the expected format of unique sales manager codes, such as "SM001," "SM002," etc.

4. **smname**
   - **Issue**: The value "DUPLICATE" appears, which is not consistent with the expected format of a descriptive name, like "SMNAME001," "SMNAME002," etc.

5. **rmcode**
   - **Issue**: The value "DUPLICATE" is present, conflicting with the expected format of unique regional manager codes, such as "RM001," "RM002," etc.

6. **rmname**
   - **Issue**: The entry "DUPLICATE" is present, which does not fit the expected format of a descriptive regional manager name, like "RMNAME001," "RMNAME002," etc.

7. **targetyear**
   - **Issue**: The value "-2023" is invalid, as years are expected to be positive numbers.

8. **targetvalue**
   - **Issue**: Values like "-100.0" and "-500.0" could indicate negative target values, which might not be valid depending on the context.

9. **week1, week2, week3, week4, week5**
   - **Issue**: Negative values such as "-10.0," "-20.0," etc., are present, which may not be valid for weekly metrics data.

10. **targetstatus**
    - **Issue**: The value "None" is present, which does not fit the expected format of statuses like "Open," "Closed," etc.

11. **targettype**
    - **Issue**: The entry "None" is inconsistent with the expected format of specific target types like "Monthly," "Quarterly," etc.

12. **downloadstatus**
    - **Issue**: The value "None" is not valid, as statuses are typically "Yes," "No," etc.

13. **file_name**
    - **Issue**: The entry "None" is present, which does not align with the expected format of a descriptive file name like "target_file.csv," "target_file_2.csv," etc.
========================================================================================================================================

table_name : SDL_JNJ_CONSUMERREACH_CVS
solution : Ensure 'retailname' is not null and 'run_id' has a valid integer value.

SQL Query:
sql
SELECT *
FROM SDL_JNJ_CONSUMERREACH_CVS
WHERE retailname IS NULL OR TRY_TO_NUMBER(run_id) IS NULL;
Issue: RUN_ID
- The `RUN_ID` column is expected to hold numeric data, as indicated by its data type "NUMBER." However, the sample includes negative numbers, which might not align with the semantic meaning of an identifier.

Issue: JJCORE
- The `JJCORE` column includes `None` values, which may not align with its expected semantic meaning if all records are supposed to have a core affiliation.

Issue: DISTRIBUTION
- The `DISTRIBUTION` column includes `None` values, which may not align with its expected semantic meaning if all records are supposed to have a distribution channel.

Issue: STATUS
- The `STATUS` column includes `None` values, which may not align with its expected semantic meaning if all records are expected to have a status.

Issue: FILE_NAME
- The `FILE_NAME` column includes `None` values, which may not align with its expected semantic meaning if all records are expected to have an associated file name.
========================================================================================================================================

table_name : SDL_MDS_MY_PRODUCT_MASTER
solution : No anomalies detected.

SQL Query:
SELECT * FROM SDL_MDS_MY_PRODUCT_MASTER;
Issue: `attachments` - The column appears to hold integer data, which does not align with the semantic expectation based on the column name. Typically, "attachments" would suggest a list or count of attached items or files.

Issue: `bnd-list_price` - The data contains negative values (e.g., -300.5), which might not align with the semantic meaning of a list price, as prices are typically non-negative.

Issue: `bnd-rcp` - Similar to `bnd-list_price`, this column has negative values (e.g., -50.0), which may not align with the typical expectation of a price or cost component.

Issue: `trade_margin_%` - The presence of negative values (e.g., -10.0) may not align with the typical understanding of a trade margin, which is usually expressed as a positive percentage.

Issue: `supplier` - The column contains a `None` value, which may not align with the expectation that each product entry should have an associated supplier.
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_ACCT_NIELSENCODE_MAPPING
solution : Update 'versionname' and 'versionflag' fields for id -2 with appropriate values as they are currently 'None'.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PACIFIC_ACCT_NIELSENCODE_MAPPING 
WHERE id = -2 AND (versionname IS NULL OR versionflag IS NULL);
Issue: versionnumber
- The column contains negative values, which might not be valid for version numbers as they typically represent a sequence or a count.

Issue: version_id
- The column contains negative values, which might not be valid for version identifiers.

Issue: ac_code
- The column has 'None' as one of its values, which may be an issue if 'None' is not a valid code.

Issue: ac_nielsencode
- The column has 'None' as one of its values, which may be an issue if 'None' is not a valid Nielsen code.

Issue: ac_longname
- The column has 'None' as one of its values, which may be an issue if 'None' is not a valid long name.

Issue: validationstatus
- The column has 'None' as one of its values, which may be an issue if 'None' is not a valid validation status.
========================================================================================================================================

table_name : SDL_MDS_VN_CUSTOMER_SEGMENTATION
solution : Correct the negative versionnumber and changetrackingmask values to positive integers.

SQL Query:
SELECT * 
FROM SDL_MDS_VN_CUSTOMER_SEGMENTATION
WHERE versionnumber < 0 OR changetrackingmask < 0;
Issue: versionnumber
- Expected only positive numbers representing version sequence, but negative numbers are present.

Issue: changetrackingmask
- Expected positive numbers for tracking changes but negative values are present.

Issue: code
- Expected numeric values, but 'None' value is present.

Issue: customer_segmentation_level_1_code
- Expected consistent prefix but inconsistent pattern appears.

Issue: customer_segmentation_level_2_code
- Expected consistent prefix but inconsistent pattern appears.

Issue: enterusername
- Expected unique identifiers for users but appears to be non-unique or generic.

Issue: validationstatus
- Expected binary status (valid/invalid) but inconsistent values or formats might appear.
========================================================================================================================================

table_name : SDL_ID_POS_CARREFOUR_STOCK
solution : Correct negative stock_amt as it should not be negative.

SQL Query:
SELECT *
FROM SDL_ID_POS_CARREFOUR_STOCK
WHERE stock_amt < 0;
Issue: stock_qty - Negative values are present, which might not be expected for a quantity field.
Issue: stock_amt - Negative values are present, which might not be expected for a stock amount field.
Issue: stock_days - Negative values are present, which might not be expected for a days field.
========================================================================================================================================

table_name : SDL_MDS_PH_MSL_DTLS  
solution : Verify that the 'versionname', 'versionnumber', and 'version_id' columns are consistent across all related entities, and ensure that 'sku_code', 'sku_id', and 'sku_name' match the expected format and data type.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PH_MSL_DTLS
WHERE versionname IS NULL 
   OR versionnumber IS NULL 
   OR version_id IS NULL
   OR sku_code IS NULL 
   OR sku_id IS NULL 
   OR sku_name IS NULL
   OR versionname <> 'v' || CAST(versionnumber AS STRING)
   OR version_id <> versionnumber;
Issue: `versionnumber` - The column contains negative values (e.g., -2), which may not align with the typical expectation for version numbers to be non-negative integers.

Issue: `versionflag` - The column contains `None` values, which may indicate missing or incomplete data if a flag is expected for every record.

Issue: `changetrackingmask` - The column contains negative values (e.g., -5), which may not align with the typical expectation for tracking masks to be non-negative.

Issue: `sku_code` - The column contains `None` values, which may indicate missing or incomplete data if a SKU code is expected for every record.

Issue: `lastchgusername` - The column contains `None` values, which may indicate missing or incomplete data if a username is expected for every record.
========================================================================================================================================

table_name : SDL_MDS_PH_NON_ISE_WEIGHTS
solution : Correct the negative value in the 'weight' column and review the 'changetrackingmask' for valid entries.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PH_NON_ISE_WEIGHTS
WHERE weight < 0 
   OR changetrackingmask < 0;
Issue: `weight` column contains negative values, which may not align with its semantic meaning if it is intended to represent a positive measurement or value.

Issue: `validationstatus` column consistently contains the value "Valid," which may not provide useful differentiation if all entries are identical. Consider verifying if different statuses should be expected.
========================================================================================================================================

table_name : SDL_KR_COUPANG_PRODUCT_MASTER
solution : No anomalies detected; no solution required.

SQL Query:
SELECT * 
FROM SDL_KR_COUPANG_PRODUCT_MASTER
WHERE 1=0;  -- No anomalies detected, so this query will return no rows
Column: ranking
Issue: Contains non-numeric values (e.g., "abc", "five", "two") despite being expected to represent numerical rankings.

Column: yearmo
Issue: Contains invalid year-month combinations (e.g., "202313", "202314", etc.) as months exceed 12.
========================================================================================================================================

table_name : PRODBU_PRODUCTBUSINESSUNIT
solution : Ensure the 'islisted' column value is corrected to the expected value. Validate 'maximumorderquantity' for realistic limits and check 'deliveryunit' against standard values.

SQL Query:
SELECT *
FROM PRODBU_PRODUCTBUSINESSUNIT
WHERE islisted NOT IN ('Yes', 'No')
   OR isorderable NOT IN ('Yes', 'No')
   OR isreturnable NOT IN ('Yes', 'No')
   OR (maximumorderquantity < 0 OR maximumorderquantity > 100000)
   OR deliveryunit NOT IN ('Unit1', 'Unit2', 'Unit3', 'Unit4', 'Unit5', 'Unit6', 'Unit7', 'Unit8', 'Unit9', 'Unit10');
Issue: `maximumorderquantity`
- The column name suggests it should represent a maximum order quantity, typically a positive numeric value. However, the sample data contains negative values (e.g., -10.5), which semantically does not make sense for a "maximum order quantity."

Issue: `fetchedsequence`
- The column name implies this should be a sequence number, which is typically a non-negative integer. However, the sample data contains negative values (e.g., -999), which might not be appropriate for a sequence identifier.

Issue: `islisted`
- The expected values for a Boolean or status indicator like "islisted" would typically be "Yes" or "No." The provided sample data aligns with this expectation, but ensure consistency across all rows in the dataset.

Issue: `isorderable`
- The expected values for a Boolean or status indicator like "isorderable" would typically be "Yes" or "No." The provided sample data aligns with this expectation, but ensure consistency across all rows in the dataset.

Issue: `isreturnable`
- The expected values for a Boolean or status indicator like "isreturnable" would typically be "Yes" or "No." The provided sample data aligns with this expectation, but ensure consistency across all rows in the dataset.

Issue: `fetcheddatetime`
- The column name and sample data suggest this should be a datetime value, and the sample data format appears appropriate. However, ensure there are no missing or improperly formatted entries throughout the dataset.
========================================================================================================================================

table_name : SDL_ECOM_GMV_KONVY  
solution : Correct the erroneous values such as 'infinite' and excessively large numbers to accurate and realistic data. Ensure 'productname', 'status', 'platform', and 'discontinue' fields are not 'None' where applicable.

SQL Query:
sql
SELECT * 
FROM SDL_ECOM_GMV_KONVY
WHERE sales_amount = 9999999999.0
   OR total_unit_sold = 9999999999.0
   OR tstock = 'infinite'
   OR current_price = 9999999999.0
   OR pro_price = 9999999999.0
   OR pro_cost = 9999999999.0
   OR cost_in_vat = 9999999999.0
   OR cost = 9999999999.0
   OR market_value = 9999999999.0
   OR stock_turnover_days = 9999
   OR view_no = 'infinite'
   OR conversion = 9999999999.0
   OR productname IS NULL
   OR status IS NULL
   OR platform IS NULL
   OR discontinue IS NULL;
Issue: `status`  
- The column contains a `None` value, which may not align with expected status values such as "active", "inactive", etc.

Issue: `barcode`  
- Contains `None`, which is unexpected for a barcode as it typically requires a numeric or alphanumeric value.

Issue: `itemcode`  
- Contains `None`, which is unexpected as item codes should be alphanumeric identifiers.

Issue: `tstock`  
- Contains `None` and `infinite`, which are not valid numeric representations for stock quantities.

Issue: `market_value`  
- Contains `None`, which is unexpected for a numeric value that represents market value.

Issue: `stock_turnover_days`  
- Contains `None` and negative values, which might not be appropriate for turnover days and expected to be non-negative.

Issue: `view_no`  
- Contains `None` and negative values, which is unexpected for a number representing view count.

Issue: `conversion`  
- Contains negative values, which might not be appropriate for a conversion rate and expected to be non-negative.

Issue: `discontinue`  
- Contains `unknown` and `None`, which might not align with expected binary values such as "yes" or "no".

Issue: `platform`  
- Contains `None` and `unknown`, which might not align with expected platform values like "web", "mobile", etc.

Issue: `crtd_dttm`  
- Contains `None`, which is unexpected for a timestamp field.
========================================================================================================================================

table_name : SDL_CSL_UDCMASTER
solution : Correct columnprecision to a non-negative value and columnmandatory to a valid boolean representation.

SQL Query:
SELECT *
FROM SDL_CSL_UDCMASTER
WHERE columnprecision < 0
   OR columnmandatory NOT IN (0, 1);
Issue:  
- `columndatatype`: Contains values like `INT`, `VARCHAR`, `DATE`, etc., but the metadata indicates the data type should be `TEXT`, suggesting a potential misalignment in expected data type.
- `columnsize`: Contains negative values like `-10` and `-20`, which is unexpected for a size attribute and should be reviewed.
- `columnprecision`: Contains negative values like `-1`, `-3`, `-5`, which is unusual for a precision attribute and should be verified.
- `editable`: Contains values like `-1`, `-2`, `-3` which might not align with a typical editable status. Typically, this would be a boolean or similar indicator.
- `columnmandatory`: Contains negative values like `-1`, `-2`, `-3`, which is unexpected for a mandatory attribute and should be reviewed.
- `pickfromdefault`: Contains negative values like `-1`, which may not align with a typical pick-from-default status.
- `downloadstatus`: Contains values `YES` and `NO`, which are valid, but the metadata indicates a `TEXT` type. Verify if additional statuses are expected.
========================================================================================================================================

table_name : SDL_HK_IMS_VIVA_SEL_OUT
solution : Correct negative values for sales_volume, sales_order_quantity, and net_trade_sales. Verify sales_office, sales_group, sales_office_name, and sales_group_name for accuracy. Check for None in account_types and replace with appropriate value. Validate local_curr_exch_rate entry.

SQL Query:
SELECT * 
FROM SDL_HK_IMS_VIVA_SEL_OUT
WHERE sales_volume < 0 
   OR sales_order_quantity < 0 
   OR net_trade_sales < 0 
   OR LENGTH(sales_office) <> 10 
   OR LENGTH(sales_group) <> 10 
   OR LENGTH(sales_office_name) > 15 
   OR LENGTH(sales_group_name) > 15 
   OR account_types IS NULL 
   OR local_curr_exch_rate <= 0;
Issue: `calendar_sid`
- The data type should be DATE, but the sample data shows a datetime format which might not align if strict date format is expected.

Issue: `sales_office`
- The sample data contains both numeric and textual values, but the metadata specifies TEXT. Ensure all values are consistently TEXT format.

Issue: `sales_group`
- Similar to `sales_office`, contains both numeric and textual values. Ensure all are consistently TEXT as per metadata.

Issue: `sales_volume`, `sales_order_quantity`, `net_trade_sales`
- These columns contain negative values, which might be unexpected for sales data unless negative values are intended to represent refunds or returns.

Issue: `local_curr_exch_rate`
- Contains negative values which may not be valid for exchange rates, assuming exchange rates should be positive.

Issue: `transactiontype`
- Contains a mix of "SALE" and "RETURN", which could be valid, but ensure these are the only valid types expected.

Issue: `return_reason`
- Contains various reasons; ensure these are standardized and comprehensive for all potential return reasons.
========================================================================================================================================

table_name : SDL_KR_COUPANG_PA_REPORT
solution : Correct the negative value in 'total_conversion_sales_1d' to accurately reflect the data. Verify related sales data for consistency.

SQL Query:
SELECT *
FROM SDL_KR_COUPANG_PA_REPORT
WHERE total_conversion_sales_1d < 0 OR
      total_conversion_sales_14d < 0;
Issue: `campaign_start_date` and `campaign_end_date`  
- The `campaign_start_date` has a date "2023-09-01" that is later than the `campaign_end_date` "2023-08-31" in the first row, which is logically inconsistent. 

Issue: `total_ad_return_14d`  
- The `total_ad_return_14d` has a negative value "-900" which may not make semantic sense if it is intended to represent a return or profit.

Issue: `direct_ad_return_14d`  
- The `direct_ad_return_14d` has a negative value "-800" which may not make semantic sense if it is intended to represent a return or profit.

Issue: `crtd_dttm`  
- The `crtd_dttm` column should contain datetime values, but is marked as TEXT in metadata, which may not align with best practices for consistency and usability.
========================================================================================================================================

table_name : SDL_LA_GT_SALES_ORDER_FACT
solution : Review and correct the negative 'totalbeforevat' value, validate 'canceled' status with non-zero total, and confirm 'return_reason' alignment with 'canceled' status.

SQL Query:
SELECT * 
FROM SDL_LA_GT_SALES_ORDER_FACT
WHERE totalbeforevat < 0 
   OR (canceled = 'Y' AND total > 0) 
   OR (canceled = 'Y' AND return_reason IS NULL);
Issue: saleunit
- Description: This column contains names of units associated with sales. However, some entries have "None," which may indicate missing or incomplete data.

Issue: approved_date
- Description: This column should represent dates when approvals were granted. The data type is text, which may be less suitable for date operations compared to a date-specific data type.

Issue: approved_time
- Description: This column should represent times when approvals were granted. The data type is text, which may be less suitable for time operations compared to a time-specific data type.

Note: These issues are identified based on the potential mismatch between the expected functionality of the columns and their current data types or data entries.
========================================================================================================================================

table_name : SDL_MDS_PH_POS_CUSTOMERS
solution : No anomalies detected.

SQL Query:
SELECT * FROM SDL_MDS_PH_POS_CUSTOMERS WHERE 1=0;  -- No anomalies detected, so no specific query is required.
Issue: ae_nm
- Explanation: The value 'None' in row 3 indicates missing data for a column likely representing a person's name.

Issue: barangaycode_id
- Explanation: The value '-1' in row 0 suggests an invalid or placeholder ID, which might not align with expected numerical IDs.

Issue: versionnumber
- Explanation: The value '-1' in row 0 indicates an invalid or placeholder version number.

Issue: zipcode_id
- Explanation: The value '-1' in row 0 suggests an invalid or placeholder ID for a column likely representing a numeric identifier for a zipcode.
========================================================================================================================================

table_name : SDL_GCPH_BRAND
solution : Validate the 'ean_upc' field for correct length and ensure 'suggestedclassificationscore' values are within expected range.

SQL Query:
SELECT *
FROM SDL_GCPH_BRAND
WHERE LENGTH(ean_upc) > 12 OR suggestedclassificationscore > 100 OR suggestedclassificationscore < 0;
Here are the details of columns with issues:

1. **suggestedclassificationscore**  
   Issue: The column is expected to contain scores typically between 0 and 100. However, it contains values such as -20.0 and values over 100, which are outside the expected range.

2. **tamr_id**  
   Issue: The column data type in metadata is NUMBER, suggesting positive integers. However, one of the values is -1, which may not align with the expected purpose of this identifier column.
========================================================================================================================================

table_name : SDL_MDS_SG_PRODUCT_EXCEPTIONS
solution : Change 'changetrackingmask' from '-500' to a valid non-negative integer.

SQL Query:
SELECT * FROM SDL_MDS_SG_PRODUCT_EXCEPTIONS
WHERE changetrackingmask < 0;
Issue: versionnumber
- Semantic Meaning: Represents a version number, expected to be a positive integer.
- Error: Contains negative values (e.g., -1, -14, -31).

Issue: itemcode
- Semantic Meaning: Represents a code for an item, expected to be positive integers.
- Error: Contains negative values (e.g., -1003, -1010, -1019, -1028, -1041, -1033, -1038, -1047).

Issue: code
- Semantic Meaning: Represents a code, expected to be non-null.
- Error: Contains null values.

Issue: name
- Semantic Meaning: Represents the name of a product, expected to be non-null.
- Error: Contains null values.

Issue: customer
- Semantic Meaning: Represents a customer name or ID, expected to be non-null.
- Error: Contains null values.

Issue: itemdescription
- Semantic Meaning: Represents a description of an item, expected to be non-null.
- Error: Contains null values.

Issue: barcode
- Semantic Meaning: Represents a barcode, expected to be non-null.
- Error: Contains null values.

Issue: enterusername
- Semantic Meaning: Represents the username of the person who entered the data, expected to be non-null.
- Error: Contains null values.

Issue: lastchgusername
- Semantic Meaning: Represents the username of the person who last changed the data, expected to be non-null.
- Error: Contains null values.

Issue: validationstatus
- Semantic Meaning: Represents the validation status, expected to be from a predefined list of statuses.
- Error: None detected, but ensure all entries are consistent with expected statuses.
========================================================================================================================================

table_name : SDL_CLAVIS_GB_PRODUCTS
solution : Validate and correct dimension fields, check milestone values for logical consistency, ensure price-related fields have realistic values, and verify promotion details.

SQL Query:
SELECT *
FROM SDL_CLAVIS_GB_PRODUCTS
WHERE 
    (dimension1 IS NULL OR dimension2 IS NULL OR dimension3 IS NULL OR dimension4 IS NULL OR dimension5 IS NULL OR dimension6 IS NULL OR dimension7 IS NULL OR dimension8 IS NULL OR dimension9 IS NULL OR dimension10 IS NULL)
    OR (milestone1_comp < 0 OR milestone2_comp < 0 OR milestone3_comp < 0 OR milestone4_comp < 0 OR milestone5_comp < 0 OR milestone6_comp < 0 OR milestone7_comp < 0 OR milestone8_comp < 0 OR milestone9_comp < 0 OR milestone10_comp < 0)
    OR (observed_price < 0 OR prev_observed_price < 0 OR diff_from_prev_observed_price < 0 OR diff_from_msrp < 0 OR diff_from_min_max < 0)
    OR (promo_discounted_price < 0 OR promo_discount_amount < 0 OR promo_discount_percent < 0);
Issue: promo_discount_amount - Values appear unusually high for a discount amount, possibly indicating incorrect scaling or currency misalignment.
Issue: promo_discount_percent - Values are abnormally high or negative, suggesting incorrect calculations or data entry errors.
Issue: ext_page_no - Contains numeric values which may not align with the expected semantic meaning of a page number.
Issue: delete_ind - Contains values 'Y' and 'N', which may not align with the expected numeric data type as per metadata.
========================================================================================================================================

table_name : SDL_CHS_DSTR
solution : Correct negative values for last_cost, month_06, and month_12 to ensure accurate financial reporting.

SQL Query:
SELECT *
FROM SDL_CHS_DSTR
WHERE last_cost < 0
   OR month_06 < 0
   OR month_12 < 0;
1. **SOH_QTY**
   - Issue: Contains negative values, which may not be valid for "Stock on Hand Quantity."

2. **LAST_COST**
   - Issue: Contains negative values, which may not be valid for "Last Cost."

3. **MONTH_05**
   - Issue: Contains a negative value (-60.0), which may not be expected for monthly values.

4. **MONTH_12**
   - Issue: Contains a negative value (-120.0), which may not be expected for monthly values.

(Note: The presence of negative values in fields typically representing quantities or costs suggests potential data entry errors or specific business logic that isn't immediately clear from the data alone.)
========================================================================================================================================

table_name : SDL_MY_ACCRUALS  
solution : Correct negative value in may_val column to reflect accurate accrual data.

SQL Query:
sql
SELECT * 
FROM SDL_MY_ACCRUALS 
WHERE may_val < 0;
Issue: JJ_YEAR - Contains a value '10000', which is not a valid year.
========================================================================================================================================

table_name : SDL_MDS_VN_PS_TARGETS  
solution : Validate and correct the negative 'value' field as it is not expected to have negative values.

SQL Query:  
sql
SELECT *  
FROM SDL_MDS_VN_PS_TARGETS  
WHERE value < 0;
Issue: id
- Semantic: Unique identifier for each record, typically positive integers.
- Data Issue: Contains a negative value (-1), which might indicate an error or special case.

Issue: versionnumber
- Semantic: Indicates the version number, expected to be non-negative.
- Data Issue: Contains a negative value (-100), which may imply an error or special circumstance.

Issue: name
- Semantic: Represents a descriptive name, expected to be non-null text.
- Data Issue: Contains a `None` value, which may indicate missing information.

Issue: code
- Semantic: Represents a code associated with the record, expected to be non-null text.
- Data Issue: Contains a `None` value, which may indicate missing information.

Issue: channel
- Semantic: Represents a channel description, expected to be non-null text.
- Data Issue: Contains a `None` value, which may indicate missing information.

Issue: attribute_1
- Semantic: Represents an attribute description, expected to be non-null text.
- Data Issue: Contains a `None` value, which may indicate missing information.

Issue: attribute_2
- Semantic: Represents an attribute description, expected to be non-null text.
- Data Issue: Contains a `None` value, which may indicate missing information.

Issue: enterusername
- Semantic: Represents the username of the individual who entered the record, expected to be non-null text.
- Data Issue: Contains a `None` value, which may indicate missing information.

Issue: lastchgusername
- Semantic: Represents the username of the individual who last changed the record, expected to be non-null text.
- Data Issue: Contains a `None` value, which may indicate missing information.
========================================================================================================================================

table_name : SDL_CSL_UDCDETAILS  
solution : Verify and correct 'distcode', 'masterid', and 'mastervaluecode' for inconsistencies or mismatches.

SQL Query:
sql
SELECT *
FROM SDL_CSL_UDCDETAILS
WHERE distcode = 31 AND masterid = 49 AND mastervaluecode = 'Code50'
AND createddate = '2023-02-19 11:00:00'
Issue: `mastervaluecode`
- The column `mastervaluecode` contains some `None` values, which may be unexpected if all entries are supposed to have a value code.

Issue: `uploadflag`
- The column `uploadflag` contains `None` values, which may be unexpected if it is supposed to indicate a binary state (e.g., 'Y' or 'N').

Issue: `columnvalue`
- The column `columnvalue` contains a `None` value, which may be unexpected if all entries are expected to have a value.

Issue: `run_id`
- The column `run_id` contains negative numbers, which may be unexpected if run IDs are supposed to be positive.
========================================================================================================================================

table_name : SDL_GCPH_CATEGORY
solution : Correct negative values in fields like length, net_weight, volume, and gross_weight. Validate 'suggestedclassificationscore' to ensure it is within valid range, and verify unique identifier 'unique_id'.

SQL Query:
SELECT *
FROM SDL_GCPH_CATEGORY
WHERE length < 0
   OR net_weight < 0
   OR volume < 0
   OR gross_weight < 0
   OR suggestedclassificationscore < 0 OR suggestedclassificationscore > 1000
   OR unique_id IS NULL;
Issue: `manualclassificationid` - This column is expected to hold numeric data representing manual classification IDs. The presence of a constant value (9999999999) for all rows might indicate a placeholder or default value rather than meaningful data.

Issue: `suggestedclassificationscore` - This column is expected to hold numeric data representing classification scores. Negative values (-5.0, -10.0) could be erroneous unless negative scores are meaningful in the context.

Issue: `dateofextract` - Although the column data type is `TEXT`, it contains datetime values. It would be more appropriate to store these values in a datetime format for better processing and validation.
========================================================================================================================================

table_name : SDL_CSL_RETAILERMASTER
solution : No anomalies detected.

SQL Query:
-- No query needed as no anomalies were detected.
Issue: rtrlatitude
- Data in this column is expected to be a numeric value representing the latitude of a location. However, the metadata indicates it is stored as TEXT, which may lead to issues in geographical calculations and validations.

Issue: rtrlongitude
- Data in this column is expected to be a numeric value representing the longitude of a location. However, the metadata indicates it is stored as TEXT, which may lead to issues in geographical calculations and validations.

Issue: rtrdruggracedays
- The negative values in the sample data suggest this column represents a countdown or days overdue, which should be checked if it's semantically correct and aligns with business logic.

Issue: rtrcosmeticgracedays
- Similar to `rtrdruggracedays`, the negative values suggest a countdown or overdue days, which should be verified for semantic correctness.

Issue: run_id
- The presence of negative values in what is typically a unique identifier (ID) column should be reviewed to ensure it aligns with the intended use and data integrity.
========================================================================================================================================

table_name : SDL_ECOM_SHOPEE_COMPENSATION
solution : No anomalies detected.

SQL Query:
sql
SELECT * FROM SDL_ECOM_SHOPEE_COMPENSATION WHERE 1=0;
Issue: po_cmpt_mnth 
- The value '-2023-03' is invalid as it contains a negative sign, which does not align with a typical month-year format expected for this column.

Issue: scm_barcode 
- The value '000000000000' and 'ABCDEFGHIJ' are not valid barcodes since barcodes typically consist of numeric values and have a standard length (usually 12 or 13 digits for UPC/EAN barcodes).

Issue: sum_of_qty 
- Values such as '-1.000000e+01' and '-1.500000e+01' are negative, which might not be contextually correct for a quantity column, as quantities are generally expected to be non-negative.

Issue: sum_of_rspxqty 
- Values such as '-3.000000e+02' and '-5.000000e+02' are negative, which might not be contextually correct for a column representing a sum of quantities multiplied by a rate or price, as these are generally expected to be non-negative.

Issue: sum_of_total_net_selling_price 
- Values such as '-5.000000e+02' and '-7.500000e+02' are negative, which might not be contextually correct for a column representing total net selling prices, as these are generally expected to be non-negative.

Issue: sum_of_dis_shopee 
- Values such as '-5.000000e+01' and '-2.000000e+01' are negative, which might not be contextually correct for a column representing discounts, as discounts are typically positive values.

Issue: sum_of_ltpxqty 
- Values such as '-2.000000e+02' and '-1.000000e+02' are negative, which might not be contextually correct for a column representing a sum of quantities multiplied by a rate or price, as these are generally expected to be non-negative.

Issue: sum_of_front_margin 
- Values such as '-2.500000e+01' and '-5.000000e+00' are negative, which might not be contextually correct for a column representing margin, as margins are typically expected to be positive.

Issue: sum_of_enabler_margin 
- Values such as '-1.500000e+01' and '-2.000000e+00' are negative, which might not be contextually correct for a column representing margin, as margins are typically expected to be positive.

Issue: sum_of_compensation 
- Values such as '-1.000000e+02' and '-3.000000e+02' are negative, which might not be contextually correct for a compensation column, as compensations are typically expected to be positive.
========================================================================================================================================

table_name : SDL_CSL_RETAILERROUTE
solution : Ensure 'distcode', 'rtrid', 'rtrcode', 'rtrname', 'rmid', 'rmcode', 'rmname', 'routetype', 'uploadflag', 'syncid', 'run_id', and 'file_name' have valid non-negative values. Update or flag anomalies for further review.

SQL Query:
sql
SELECT *
FROM SDL_CSL_RETAILERROUTE
WHERE distcode IS NULL 
   OR rtrid < 0 
   OR rtrcode IS NULL 
   OR rtrname IS NULL 
   OR rmid < 0 
   OR rmcode IS NULL 
   OR rmname IS NULL 
   OR routetype IS NULL 
   OR uploadflag IS NULL 
   OR syncid < 0 
   OR run_id < 0 
   OR file_name IS NULL;
Issue: `distcode`  
- The first row has a `None` value, which seems inconsistent with the expected format of 'DISTXXX'.

Issue: `rtrid`  
- The first row has a value of `-1`, which is inconsistent with the expected positive numeric sequence.

Issue: `rtrcode`  
- The first row has a `None` value, which seems inconsistent with the expected format of 'RTRXXX'.

Issue: `rtrname`  
- The first row has a `None` value, which seems inconsistent with the expected pattern of 'Retailer X'.

Issue: `rmid`  
- The first row has a value of `-10`, which is inconsistent with the expected positive numeric sequence.

Issue: `rmcode`  
- The first row has a `None` value, which seems inconsistent with the expected format of 'RMXXX'.

Issue: `rmname`  
- The first row has a `None` value, which seems inconsistent with the expected pattern of 'Route Manager X'.

Issue: `routetype`  
- The first row has a `None` value, which is inconsistent with the expected pattern of 'Type X'.

Issue: `uploadflag`  
- The first row has a `None` value, which is inconsistent with the expected 'Y' or 'N'.

Issue: `syncid`  
- The first row has a value of `-1`, which is inconsistent with the expected positive numeric sequence.

Issue: `run_id`  
- The first row has a value of `-100`, which is inconsistent with the expected positive numeric sequence.

Issue: `file_name`  
- The first row has a `None` value, which is inconsistent with the expected format similar to 'fileX.txt'.
========================================================================================================================================

table_name : SDL_GCCH_CUST_HIER
solution : Correct negative values in 'manualclassificationid', 'suggestedclassificationscore', and 'tamr_id'. Ensure valid unique identifiers and data integrity.

SQL Query:
sql
SELECT * 
FROM SDL_GCCH_CUST_HIER
WHERE tamr_id < 0
   OR manualclassificationid < 0
   OR suggestedclassificationscore < 0;
manualclassificationid: Contains negative values (-5) which are not typical for classification IDs.
suggestedclassificationscore: Contains negative values (-10.0, -20.0) which are not typical for scores.
========================================================================================================================================

table_name : SDL_JNJ_MER_COP
solution : Ensure 'emp_address_pc' contains valid postal code, check 'cop_date' for consistency with 'start_date', verify 'supervisor_name' is linked to 'emp_address_supervisor', and confirm 'store_name' corresponds with 'store_id'.

SQL Query:
sql
SELECT * 
FROM SDL_JNJ_MER_COP
WHERE emp_address_pc IS NULL
   OR cop_date IS NULL
   OR cop_date <> start_date
   OR emp_address_supervisor IS NULL
   OR supervisor_name IS NULL
   OR store_name IS NULL
   OR store_id IS NULL;
Column: cop_date
Issue: The data type is TEXT, but it should ideally be a DATE type to align with a date format.

Column: end_date
Issue: The data type is TEXT, but it should ideally be a DATE type to align with a date format.

Column: start_date
Issue: The data type is TEXT, but it should ideally be a DATE type to align with a date format.

Column: yearmo
Issue: The data type is TEXT, but it represents a year and month, which could be better represented as a DATE type or NUMERIC type with validation for year and month format.

Column: cop_priority
Issue: The value "Negative" and "Invalid" do not align with typical priority levels and may indicate data entry issues.

Column: run_id
Issue: The data type is NUMBER, but negative values like -101 and -9999 might not be expected for an identifier, which is usually positive.

Column: file_name
Issue: There are instances of incorrect or unconventional year values like 99999 and 202299 in the 'yearmo' column, which may indicate an error in related data processing but not directly in file_name.

Column: compliance
Issue: While not incorrect, the binary nature of 'Yes' and 'No' for compliance could be better represented as BOOLEAN for clarity and processing efficiency.
========================================================================================================================================

table_name : SDL_MDS_SG_PRODUCT_MAPPING  
solution : Check for data integrity issues in 'muid', 'versionname', and ensure 'customer_name_id', 'customer_brand_id' have valid references in related tables. Verify 'changetrackingmask' values for consistency.

SQL Query:
sql
SELECT * FROM SDL_MDS_SG_PRODUCT_MAPPING
WHERE muid IS NULL
   OR versionname IS NULL
   OR customer_name_id IS NULL
   OR customer_brand_id IS NULL
   OR changetrackingmask IS NULL
   OR muid LIKE '% %'
   OR versionname LIKE '% %';
Certainly! Let's evaluate the data and identify issues where the semantic meaning does not align with the column name:

1. **Column: `versionnumber`**
   - **Issue:** The column name suggests a positive version number, but negative values are present (e.g., -1, -4, etc.).

2. **Column: `changetrackingmask`**
   - **Issue:** The column name suggests a mask or bitmask, which typically implies non-negative values. However, negative values are present (e.g., -3).

3. **Column: `enterusername`**
   - **Issue:** The column contains a `None` value, which may indicate missing data for `enter_user_5`. Usually, a username is expected to be a non-null text value.

These are the identified issues where the semantic meaning does not align with the column name based on the provided sample data.
========================================================================================================================================

table_name : SDL_CBD_GT_SALES_REPORT_FACT
solution : Investigate 'HighSalesQty' for potential data entry errors or unusual sales promotions.

SQL Query:
SELECT *
FROM SDL_CBD_GT_SALES_REPORT_FACT
WHERE sales_qty > 5000;
Issue: NET_PRICE
- The data type is specified as TEXT, but it contains numerical values, including a negative value (-200) which may not align with expectations for a price field.

Issue: NET_SALES
- The data type is specified as TEXT, but it contains numerical values, including a zero value (0) which may be unexpected for a sales field.

Issue: FOC_QTY
- The data type is specified as TEXT, but it contains numerical values, including negative values (-2 and -3) which may not align with expectations for a quantity field.
========================================================================================================================================

table_name : SDL_KR_COUPANG_PRODUCT_SUMMARY_MONTHLY  
solution : Ensure 'category_depth3' is not 'None', set 'run_id' to a positive value, and validate 'yearmo' format.

SQL Query:
sql
SELECT *
FROM SDL_KR_COUPANG_PRODUCT_SUMMARY_MONTHLY
WHERE category_depth3 IS NULL
   OR run_id < 0
   OR NOT REGEXP_LIKE(yearmo, '^\d{6}$');
Column: ranking
Issue: The "ranking" column contains negative values (e.g., -5), which are unusual for rankings. Rankings are typically non-negative integers.

Column: run_id
Issue: The "run_id" column contains negative values (e.g., -1), which might be unexpected as IDs are typically non-negative integers.

Column: yearmo
Issue: The "yearmo" column contains values that do not correspond to actual calendar months (e.g., 202313, 202314), which are invalid as months should range from 01 to 12.
========================================================================================================================================

table_name : SDL_LA_GT_SELLOUT_FACT
solution : Correct negative grossprice to a valid positive value.

SQL Query:
sql
SELECT * 
FROM SDL_LA_GT_SELLOUT_FACT
WHERE grossprice < 0;
Certainly! Based on the provided sample data and metadata, here are the columns where the semantic meaning does not align with the column name:

Issue: `avgdiscount` column has a negative value (-80.0) which doesn't align with the concept of an average discount. Discounts are typically non-negative.

No other issues were found upon examining the sample data against the expected semantic meanings and data types.
========================================================================================================================================

table_name : SDL_MDS_PH_LAV_CUSTOMER
solution : No anomalies detected.

SQL Query:
-- No anomalies detected, hence no query needed.
Issue: `$sourcenaturalkey` - The values are negative floats, which do not align with the expected semantic meaning of a key identifier, which is typically a positive integer or string.
Issue: `barangaycode_code` - The values are `None`, which do not align with the expected semantic meaning of a code, which is typically a string or integer.
Issue: `channelcode_code` - The values are negative and prefixed with "CHANNEL_DUP", which might not align with the expected semantic meaning if "code" implies a standard positive identifier.
Issue: `channelsubgroupcode_code` - The values are `None`, which do not align with the expected semantic meaning of a code, which is typically a string or integer.
Issue: `reportgroup9desc_id` - The values are negative, which do not align with the expected semantic meaning of an ID, which is typically positive.
Issue: `version_id` - The values are negative, which do not align with the expected semantic meaning of a version identifier, which is typically positive.
Issue: `zipcode_code` - The values are negative and prefixed with "ZIP_DUP", which might not align with the expected semantic meaning if "code" implies a standard positive identifier.
========================================================================================================================================

table_name : SDL_MDS_PH_LAV_PRODUCT
solution : Ensure promo start and end periods are correct and npistartperiod does not precede promoendperiod.

SQL Query:
sql
SELECT *
FROM SDL_MDS_PH_LAV_PRODUCT
WHERE promostartperiod > promoendperiod
   OR npistartperiod < promoendperiod;
Issue: versionnumber
- Semantic Meaning: Indicates the version number of the product, expected to be a non-negative integer.
- Issue: Contains negative value (-1), which may not align with typical version numbering conventions.

Issue: name
- Semantic Meaning: Represents the name of the product, expected to be a text value.
- Issue: Contains None, which might indicate missing data.

Issue: code
- Semantic Meaning: Expected to represent a unique product code, typically a text value.
- Issue: Contains None, which might indicate missing data.

Issue: lastchgversionnumber
- Semantic Meaning: Represents the version number at the last change, expected to be a non-negative integer.
- Issue: Contains negative value (-2), which may not align with typical version numbering conventions.

Issue: validationstatus
- Semantic Meaning: Represents the validation status of the entry, expected to be a text description.
- Issue: Contains None, which might indicate missing data.
========================================================================================================================================

table_name : SDL_LA_GT_CUSTOMER  
solution : Ensure all fields are populated with valid data, especially for distributorid, arcode, and location-related fields. Verify data source integrity and implement data validation checks to prevent missing or incorrect entries.

SQL Query:
sql
SELECT *
FROM SDL_LA_GT_CUSTOMER
WHERE distributorid IS NULL 
   OR arcode IS NULL
   OR arname IS NULL
   OR araddress IS NULL
   OR telephone IS NULL
   OR fax IS NULL
   OR city IS NULL
   OR region IS NULL
   OR saledistrict IS NULL
   OR saleoffice IS NULL
   OR salegroup IS NULL
   OR artypecode IS NULL
   OR saleemployee IS NULL
   OR salename IS NULL
   OR billno IS NULL
   OR billmoo IS NULL
   OR billsoi IS NULL
   OR billroad IS NULL
   OR billsubdist IS NULL
   OR billdistrict IS NULL
   OR billprovince IS NULL
   OR billzipcode IS NULL
   OR activestatus IS NULL
   OR routestep1 IS NULL
   OR routestep2 IS NULL
   OR routestep3 IS NULL
   OR routestep4 IS NULL
   OR routestep5 IS NULL
   OR routestep6 IS NULL
   OR routestep7 IS NULL
   OR latitude IS NULL
   OR longitude IS NULL
   OR routestep10 IS NULL
   OR store IS NULL
   OR pricelevel IS NULL
   OR salesareaname IS NULL
   OR branchcode IS NULL
   OR branchname IS NULL
   OR frequencyofvisit IS NULL
   OR filename IS NULL
   OR distributorid = -99999;
Issue: `distributorid` - Expected to hold a distributor ID, but contains `None` values which may indicate missing data.

Issue: `arname` - Expected to hold customer names, but contains entries like "None" and "Negative Active Status," which don't align with typical name data.

Issue: `araddress` - Expected to hold addresses, but contains many `None` values indicating missing data.

Issue: `city` - Expected to hold city names, but also contains `None` values indicating missing data.

Issue: `telephone` - Expected to hold phone numbers, but contains many `None` values indicating missing data.

Issue: `region` - Expected to hold region names, but also contains `None` values indicating missing data.

Issue: `saledistrict` - Expected to hold sale district information, but contains `None` values indicating missing data.

Issue: `saleoffice` - Expected to hold sale office information, but contains `None` values indicating missing data.

Issue: `store` - Expected to hold store information, but contains `None` values indicating missing data.

Issue: `pricelevel` - Expected to hold pricing level information, but contains `None` values indicating missing data.

Issue: `salesareaname` - Expected to hold sales area names, but contains `None` values indicating missing data.

Issue: `branchcode` - Expected to hold branch codes, but contains `None` values indicating missing data.

Issue: `branchname` - Expected to hold branch names, but contains `None` values indicating missing data.

Issue: `frequencyofvisit` - Expected to hold frequency of visit information, but contains `None` values indicating missing data.

Issue: `filename` - Expected to hold filenames, but contains `None` values indicating missing data.

Issue: `run_id` - Expected to hold run IDs, but contains `None` values indicating missing data.

Issue: `crt_dttm` - Expected to hold creation datetime, format is consistent with timestamps but should be checked for correctness of data as all are identical.
========================================================================================================================================

table_name : SDL_IG_INVENTORY_DATA
solution : No issues detected, no solution required.

SQL Query:
SELECT * FROM SDL_IG_INVENTORY_DATA WHERE FALSE;
Column: inv_dt
Issue: The column represents an invoice date but is formatted as a continuous number (e.g., 20231201) instead of a standard date format.

Column: stock_details_lead_time
Issue: This column should represent lead time, typically a positive integer indicating days, but it includes negative values, which may not be semantically correct.

Column: sales_week_1 to sales_week_6, sales_this_week
Issue: These columns represent sales data and are expected to be numeric. If they are stored as text, it may cause issues with numerical operations.

Column: create_dt
Issue: The column represents a creation date and time but is in text format. It should be stored in a standard datetime format for accurate processing.

Column: file_name
Issue: The file name includes a date but is stored as text. It should be validated for consistent date inclusion to ensure proper referencing.
========================================================================================================================================

table_name : SDL_HK_IMS_WINGKEUNG_SEL_OUT  
solution : Correct negative net_trade_sales to reflect accurate sales data.

SQL Query:
sql
SELECT *
FROM SDL_HK_IMS_WINGKEUNG_SEL_OUT
WHERE net_trade_sales < 0;
Issue: sales_volume
- The column name suggests it should contain positive numerical values representing sales volume. However, there are negative and zero values, which might not align with expected sales data.

Issue: sales_order_quantity
- The column name suggests it should contain positive numerical values representing the quantity of sales orders. However, there are negative values, which might not align with expected sales data.

Issue: net_trade_sales
- The column name suggests it should contain positive numerical values representing net trade sales. However, there are negative values and zeros, which might not align with expected sales data.

Issue: local_curr_exch_rate
- The column name suggests it should contain positive numerical values representing exchange rates. However, there are negative and zero values, which might not align with expected exchange rate data.
========================================================================================================================================

table_name : SDL_ID_POS_IDM_SELLOUT
solution : Correct the 'YEARMONTH' value in the anomalous row to a valid format, such as 'YYYYMM'.

SQL Query:
SELECT * FROM SDL_ID_POS_IDM_SELLOUT
WHERE LENGTH(yearmonth) != 6 OR NOT REGEXP_LIKE(yearmonth, '^\d{6}$');
Issue: `description` - Contains entries like "None" which might indicate missing descriptions or data entry errors.  
Issue: `plu` - Contains a very long string in one entry, which may exceed expected length for PLU codes.  
Issue: `yearmonth` - Contains values like "12345", which do not adhere to the YYYYMM format, indicating incorrect data.  
Issue: `run_id` - Contains negative values, which is unusual for an ID that typically increments positively.
========================================================================================================================================

table_name : CUST_CUSTOMER  
solution : Correct the 'fetchedsequence' to a valid sequence number and ensure 'azurefile' is unique across records.

SQL Query:
sql
SELECT * 
FROM CUST_CUSTOMER 
WHERE fetchedsequence = 0 OR azurefile = 'file2.txt';
Issue: `fetchedsequence` - The column name suggests a sequence number, which typically would be a positive integer or zero. However, the sample data includes negative values, which may not align with expected sequencing.

Issue: `customerid` - The `customerid` column contains identifiers that seem to follow a pattern (e.g., "CUST001"), but the sample data includes a `None` value, which may indicate a missing or improperly formatted identifier. 

Issue: `remotekey` - The column contains keys that appear as text strings, but there is a `None` value in the sample data, which might indicate a missing or improperly formatted key.

Issue: `county` - The column contains text data representing county names, but the semantic meaning could be more clearly defined as all are geographical locations. No specific issues are noted in the sample data, but ensure all entries are valid county names.

If any other columns had issues, they would be listed similarly based on any discrepancies noted between their semantic meanings and the data held.
========================================================================================================================================

table_name : SDL_CHW_ECOMM_DATA
solution : Correct the negative sales_online value for the skuname 'OvenI' in periodid 'P17' to reflect accurate sales data.

SQL Query:
SELECT * FROM SDL_CHW_ECOMM_DATA
WHERE sales_online < 0;
1. MAT_YEAR
   Issue: Contains values like '99999' and '9999' which are unlikely valid years.

2. SALES_ONLINE
   Issue: Contains negative values, which are unusual for sales figures.

3. UNIT_ONLINE
   Issue: Contains negative values, which are unusual for unit counts.
========================================================================================================================================

table_name : SDL_ID_POS_DAILY_BASEDLINE_SELLOUT
solution : Validate and correct negative values and invalid dates. Ensure 'month' is between 1 and 12, and 'year' is a valid year.

SQL Query:
sql
SELECT *
FROM SDL_ID_POS_DAILY_BASEDLINE_SELLOUT
WHERE plu < 0 
   OR month NOT BETWEEN 1 AND 12
   OR year NOT BETWEEN 1900 AND 2100
   OR qty_trx < 0 
   OR cum_ytm_qty < 0 
   OR promo_qty < 0 
   OR cum_promo_qty < 0 
   OR basedline_total_qty < 0 
   OR cum_basedline_total_qty < 0 
   OR total_days < 0 
   OR cum_total_days < 0 
   OR promo_days < 0 
   OR cum_promo_days < 0 
   OR baselined_total_days < 0 
   OR cum_baselined_total_days < 0 
   OR total_qty_baselined < 0 
   OR indirect_qty_trx < 0 
   OR indirect_cum_qty < 0 
   OR indirect_promo_qty < 0 
   OR indirect_cum_promo_qty < 0 
   OR indirect_basedline_total_qty < 0 
   OR indirect_cum_basedline_total_qty < 0 
   OR indirect_qty_basedlined < 0 
   OR run_id < 0 
   OR yearmonth NOT LIKE '____-__';
Issue: month
- The 'month' column contains numerical values (e.g., 13, 0) that are outside the typical range for months (1-12) and includes 'None'.

Issue: year
- The 'year' column contains values like 0 and 9999, which are not realistic for typical year values.

Issue: indirect_basedline_total_qty
- The 'indirect_basedline_total_qty' column contains negative values (e.g., -50) which might not align with expectations for a baseline quantity.

Issue: indirect_cum_basedline_total_qty
- The 'indirect_cum_basedline_total_qty' column contains negative values (e.g., -500) which might not align with expectations for a cumulative baseline quantity.

Issue: yearmonth
- The 'yearmonth' column contains values like '2024-13' and '2023-00', which are invalid as months should range from 01 to 12.
========================================================================================================================================

table_name : SDL_MDS_MY_SKU_BENCHMARKS  
solution : Verify 'comp_packsize' value as it is significantly different from 'jj_packsize' and 'jj_target'.

SQL Query:  
sql  
SELECT *  
FROM SDL_MDS_MY_SKU_BENCHMARKS  
WHERE ABS(jj_packsize - comp_packsize) > 1000 OR ABS(jj_target - comp_packsize) > 1000;
Issue: `id`  
- Contains a value of `-1`, which is unexpected for an `id` column typically meant to have unique, positive integers.

Issue: `versionnumber`  
- Contains negative values (e.g., `-500`, `-2500`), which is unusual for a version number that usually increments positively.

Issue: `changetrackingmask`  
- Contains negative values (e.g., `-100.0`, `-200.0`), which may not align with the expected purpose of tracking changes.

Issue: `comp_packsize`  
- Contains negative values (e.g., `-400.0`), which is atypical for a pack size that is usually non-negative.

Issue: `valid_from` and `valid_to`  
- `valid_from` date is later than `valid_to` date for some entries (e.g., row 1), which is logically inconsistent.

Issue: `enterusername`, `lastchgusername`  
- Contains `None` entries (e.g., row 3), which might indicate missing information for user identification fields.

Issue: `validationstatus`  
- Contains `None` or unexpected statuses that may not be valid status entries.
========================================================================================================================================

table_name : SDL_CSL_PRODUCTWISESTOCK
solution : No anomalies detected.

SQL Query:
SELECT * FROM SDL_CSL_PRODUCTWISESTOCK WHERE 1=0;
Column: lcnid  
Issue: The column named 'lcnid' holds integer values, which is expected, but the negative values might indicate an anomaly or a specific meaning (e.g., -1 for a default or special case) that should be verified for correctness.

Column: lcncode  
Issue: The column 'lcncode' is expected to hold text strings, but the presence of 'None' suggests missing or null values, which might need handling or validation.

Column: prdid  
Issue: The column 'prdid' is expected to hold numeric values, but the presence of negative numbers might indicate a data issue unless they have a specific contextual meaning.

Column: prdcode  
Issue: The column 'prdcode' is expected to hold text strings, but the presence of 'None' suggests missing or null values, which might need handling or validation.

Column: salopenstock  
Issue: The column 'salopenstock' holds numeric values, but negative values might indicate an issue unless they are contextually appropriate (e.g., returns or corrections).

Column: unsalopenstock  
Issue: The column 'unsalopenstock' holds numeric values, but negative values might indicate an issue unless they are contextually appropriate.

Column: offeropenstock  
Issue: The column 'offeropenstock' holds numeric values, but negative values might indicate an issue unless they are contextually appropriate.

Column: salclsstock  
Issue: The column 'salclsstock' holds numeric values, but negative values might indicate an issue unless they are contextually appropriate.

Column: unsalclsstock  
Issue: The column 'unsalclsstock' holds numeric values, but negative values might indicate an issue unless they are contextually appropriate.

Column: uploadflag  
Issue: The column 'uploadflag' is expected to hold text values ('Y' or 'N'), but consistency should be verified across all rows.

Column: file_name  
Issue: The column 'file_name' is expected to hold text values, but the presence of 'None' suggests missing or null values, which might need handling or validation.
========================================================================================================================================

table_name : SDL_KR_BO_YOUNG_JONG_HAP_LOGISTICS_GT_SELLOUT
solution : Verify and correct negative quantities; update the entry for 'qty' to ensure all values are non-negative.

SQL Query:
SELECT *
FROM SDL_KR_BO_YOUNG_JONG_HAP_LOGISTICS_GT_SELLOUT
WHERE qty < 0;
Issue: UNIT_PRICE - The column name "UNIT_PRICE" suggests numerical data representing the price per unit, but the data type is listed as TEXT, which is inconsistent with its expected numerical nature.

Issue: QTY - The column name "QTY" implies numerical data indicating quantity, but the data type is TEXT, which is inconsistent with its expected numerical nature.
========================================================================================================================================

Certainly, here's the solution and the SQL query in the specified format:

table_name : SDL_DAILYSALES_DEL  
solution : Correct negative values in 'salgrossamt', 'prdselratebeforetax', 'prdselrateaftertax', 'mrp', 'salnetamt', and 'prdgrossamt'. Also, ensure 'prdqty' and 'prdfreeqty' are non-negative.

SQL Query:
sql
SELECT * 
FROM SDL_DAILYSALES_DEL
WHERE salgrossamt < 0 
   OR prdselratebeforetax < 0 
   OR prdselrateaftertax < 0 
   OR mrp < 0 
   OR salnetamt < 0 
   OR prdgrossamt < 0 
   OR prdqty < 0 
   OR prdfreeqty < 0;
Certainly! Based on the sample data and metadata provided, here are the columns where the semantic meaning does not align with the data they hold:


Issue: salspldiscamt - The column name suggests it should hold special discount amounts, which are expected to be positive numbers, but there are zero values which might be unusual.

Issue: salinvlinecount - The column name suggests it should hold a count of invoice lines, which is expected to be a non-negative integer, but it contains a negative value (-1).

Issue: mrpcs - The column name suggests it might represent a price or cost, which are expected to be positive numbers, but it contains a negative value (-1.0).

Issue: lpvalue - The column name suggests it might represent a value or price, expected to be positive, but it contains a negative value (-5.0).


These columns have data that may not align with their expected semantic meaning, based on their names and typical data expectations.
========================================================================================================================================

table_name : SDL_CSL_SALESRETURN
solution : No anomalies detected.

SQL Query:
-- No anomalies detected, no specific query needed.
Issue: `srngrossamt` - The values are negative, which may be unexpected for a column representing gross amounts. Typically, gross amounts are positive values unless representing a return or refund. If this is the case, renaming the column to something more indicative of returns might be appropriate, such as `srnrefundamt`.

Issue: `srnspldiscamt`, `srnschdiscamt`, `srncashdiscamt` - Similar to `srngrossamt`, these discount amounts are negative. While discounts often reduce total amounts, representing them as negative values might be confusing. Consider ensuring that documentation or column names reflect that these are deductions from a total.

Issue: `rtnlinecount` - This column has negative values, which is unusual for a count. Counts are typically non-negative integers. If this represents a return or cancellation, the column name should be more descriptive, such as `rtnlinecountadjustment`.

Issue: `nrvalue` - Negative values might be unexpected for a column that could represent a product or transaction value. Consider clarifying the column name or documenting the context, such as if it's a net return value.

Issue: `prdselrateaftertax` - Negative values in this column might indicate issues unless this is expected to represent a post-return rate. Ensure the name accurately reflects its purpose.

Issue: `run_id` - Negative values for an ID might be unexpected. Typically, IDs are positive integers. Consider verifying the data integrity or clarifying in documentation why negative values are used.

These issues should be reviewed to ensure that the data aligns with the intended semantics of each column. If the negative values are intentional, consider updating column names or documentation to better reflect their purpose.
========================================================================================================================================

table_name : SDL_MDS_PH_MSL_HDR
solution : Update the anomalous row by providing valid values for 'muid', 'versionname', 'versionflag', 'name', 'code', 'csg_code_code', 'csg_code_name', 'csg_code_id', 'fr_salescycle', 'to_salescycle', 'enterusername', 'lastchgusername', and 'validationstatus'. Ensure 'versionnumber' and 'version_id' are correct or set to a valid range.

SQL Query:
sql
SELECT *
FROM SDL_MDS_PH_MSL_HDR
WHERE (muid IS NULL OR versionname IS NULL OR versionflag IS NULL OR name IS NULL OR code IS NULL OR csg_code_code IS NULL OR csg_code_name IS NULL OR fr_salescycle IS NULL OR to_salescycle IS NULL OR enterusername IS NULL OR lastchgusername IS NULL OR validationstatus IS NULL)
   OR versionnumber = 9999
   OR version_id = 9999;
Issue: 
1. id: The column 'id' contains duplicate values (e.g., '1' appears twice), which may not align with the expected unique identifier characteristic of an 'id' column.
2. muid: The column 'muid' contains mostly 'None' values, which suggests either missing data or an irrelevant column for the current dataset.
3. versionname: The column 'versionname' contains only 'None' values, which indicates missing data.
4. versionflag: The column 'versionflag' contains only 'None' values, which indicates missing data.
5. name: The column 'name' contains only 'None' values, which indicates missing data.
6. code: The column 'code' contains only 'None' values, which indicates missing data.
7. csg_code_code: The column 'csg_code_code' contains only 'None' values, which indicates missing data.
8. fr_salescycle: The column 'fr_salescycle' contains only 'None' values, which indicates missing data.
9. to_salescycle: The column 'to_salescycle' contains only 'None' values, which indicates missing data.
10. enterusername: The column 'enterusername' contains only 'None' values, which indicates missing data.
11. lastchgusername: The column 'lastchgusername' contains only 'None' values, which indicates missing data.
12. validationstatus: The column 'validationstatus' contains only 'None' values, which indicates missing data.
========================================================================================================================================

table_name : SDL_JNJ_CONSUMERREACH_711  
solution : Correct 'jjskuname' value for id 50; ensure 'jjskubarcode' is valid and matches 'jjskuname'.

SQL Query:
sql
SELECT * 
FROM SDL_JNJ_CONSUMERREACH_711 
WHERE (jjskuname IS NULL OR jjskuname = 'None') 
   OR LENGTH(CAST(jjskubarcode AS STRING)) != 13;
Column: id
Issue: Data type is listed as TEXT, but it appears to be numeric.

Column: jjskubarcode
Issue: Expected numeric barcodes, but some entries are 'None' or '0'.

Column: run_id
Issue: Data type is listed as NUMBER, but some entries are negative, which may not be valid.

Column: file_name
Issue: Some entries are 'None', expected filenames in text format.
========================================================================================================================================

table_name : SDL_CBD_GT_SALES_REPORT_FACT_TEMP
solution : Adjust the negative sales_qty and foc_qty to reflect accurate returns, and verify the net_price and net_sales calculations.

SQL Query:
SELECT * 
FROM SDL_CBD_GT_SALES_REPORT_FACT_TEMP
WHERE sales_qty < 0 
   OR foc_qty < 0 
   OR net_price < 0 
   OR net_sales < 0;
Issue: NET_PRICE
- Description: The column name suggests net pricing values, which should typically be positive or non-negative. However, the sample data contains negative values, indicating potential errors or that these might represent adjustments/returns, contrary to typical expectations of pricing columns.

Issue: NET_SALES
- Description: Similar to NET_PRICE, the column name suggests sales values, which should generally be positive or non-negative. The sample data contains negative values, potentially indicating adjustments/returns.

Issue: HASHKEY
- Description: The column appears to hold identifiers or keys, yet the sample data contains duplicate values (e.g., "abc123"), which might not align with the typical expectation of unique hash keys.

Issue: SALES_QTY (Assumed, though not in the sample data)
- Description: The column name implies sales quantity, which should be a non-negative integer. While no sample data is provided, the data type being a number suggests a need for scrutiny if negative or non-whole numbers appear.

Note: The discrepancies identified are based on typical business logic assumptions. If the negative values for NET_PRICE and NET_SALES are intentional (e.g., representing negative adjustments or returns), this would not constitute an error.
========================================================================================================================================

table_name : SDL_DISTRIBUTOR_CUSTOMER_DIM  
solution : Ensure numeric fields are correctly populated and data types are correctly set.

SQL Query:  
sql  
SELECT *  
FROM SDL_DISTRIBUTOR_CUSTOMER_DIM  
WHERE TRY_CAST(numeric_column AS NUMBER) IS NULL AND numeric_column IS NOT NULL;
Issue: CUST_CRTD_DT
- Some datetime values, such as '9999-12-31 23:59:59', appear inconsistent with expected customer creation dates.

Issue: PST_CD
- Includes placeholder values like '0', which are not typical postal codes.

Issue: CUST_ID_MAP
- Some records have 'None', which might imply missing mappings.

Issue: CUST_NM_MAP
- Some records contain 'None', which might indicate missing mappings.

Issue: FILE_NAME
- Some records have 'None', suggesting missing file names.
========================================================================================================================================

table_name : SDL_MDS_SG_CUSTOMER_HIERARCHY  
solution : Correct the 'customer_segmentation_level_2_id' as it should not match the 'customer_segmentation_id', ensuring unique identifiers. Update 'validationstatus' from 'Pending' to 'Validated' once corrected.

SQL Query:  
sql
SELECT * FROM SDL_MDS_SG_CUSTOMER_HIERARCHY
WHERE customer_segmentation_id = customer_segmentation_level_2_id
OR validationstatus = 'Pending';
Column: id
Issue: The 'id' column contains negative values, which are typically unexpected for an identifier column.

Column: muid
Issue: Contains 'None' values, which could indicate missing data for what appears to be unique identifiers.

Column: versionname
Issue: Contains 'None' values, which indicate missing data for what seems to be a version name description.

Column: versionnumber
Issue: Contains negative values, which are typically unexpected for a version number column.

Column: version_id
Issue: Contains negative values, which are typically unexpected for a version identifier column.

Column: versionflag
Issue: Contains 'None' values, which could indicate missing data for a version-related flag.

Column: changetrackingmask
Issue: Contains negative values, which are typically unexpected for a tracking mask value.

Column: enterusername
Issue: The usernames are incremented by 2, skipping odd numbers, which might indicate missing entries or a pattern that needs verification.

Column: lastchgusername
Issue: The usernames are incremented by 2, skipping odd numbers, which might indicate missing entries or a pattern that needs verification.

Column: validationstatus
Issue: The statuses alternate between 'Validated', 'Pending', and 'Invalid'. It's unusual to have a regular pattern, suggesting possible data entry error or a systematic update issue.
========================================================================================================================================

table_name : SDL_ECOM_BACKMARGIN
solution : No anomalies detected, no solution required.

SQL Query:
SELECT * FROM SDL_ECOM_BACKMARGIN WHERE FALSE;
Issue: order_value - Negative value (-200.0) present, which may not be expected for an order's value.
Issue: is_new_buyer_price - Contains a value (-1) which is not expected as this should be a binary indicator (0 or 1).
========================================================================================================================================

table_name : PROD_PRODUCT
solution : Correct negative values for width and maximumorderquantity to positive values.

SQL Query:
SELECT *
FROM PROD_PRODUCT
WHERE width < 0 OR maximumorderquantity < 0;
1. Issue: WIDTH
   - Some values are negative, which may not make sense for a width measurement if it's expected to be always positive.

2. Issue: MAXIMUMORDERQUANTITY
   - Some values are negative, which might not be logical for an order quantity, as it typically represents a non-negative quantity.

3. Issue: FETCHEDSEQUENCE
   - Contains negative values, which might not be appropriate if this sequence is supposed to be a non-negative identifier or index.

4. Issue: ISLISTED
   - Contains values "yes" and "no", but its data type is TEXT. Consider using a BOOLEAN data type if only two states are possible. 

5. Issue: ISORDERABLE
   - Contains values "yes" and "no", but its data type is TEXT. Consider using a BOOLEAN data type if only two states are possible.

6. Issue: ISRETURNABLE
   - Contains values "yes" and "no", but its data type is TEXT. Consider using a BOOLEAN data type if only two states are possible.
========================================================================================================================================

table_name : SDL_ECOM_COGS
solution : No issues detected, no solution required.

SQL Query:
SELECT *
FROM SDL_ECOM_COGS
WHERE 1=0; -- No anomalies detected, query returns no results.
Column: mat_type
Issue: Contains "None" which is not consistent with the expected categorical text values representing material types.

Column: proc_type
Issue: Contains "None" which might not align with expected categorical text values representing process types.

Column: profit_center
Issue: Expected a numerical or code format, but contains "None," which may indicate missing or mismatched data.

Column: cost_release_dt
Issue: Expected a date format, but year "10000" is not a valid year.

Column: cost_rel_yr
Issue: The data "2024" suggests a year, but "10000" is not a valid year.

Column: toll_fee_mk_up, ic_mark_up, other_oh, other_oh_var, other_oh_fix, final_cost
Issue: Negative values such as "-5.0" and "-10.0" might indicate data entry errors or require further investigation to confirm their validity.

Column: per_piece, per_dozen
Issue: Negative values such as "-1.0" and "-12.0" might indicate data entry errors or require further investigation to confirm their validity.

Column: crtd_dttm
Issue: Expected a datetime format, but contains only date, which may be inconsistent if time is relevant.
========================================================================================================================================

Since no anomalies were detected in the table 'SDL_CLAVIS_GB_SEARCH_TERMS_RESULTS', there is no solution required. However, I can provide an example of how you might structure the output if there were issues detected in a table.

Example:


table_name : YOUR_TABLE_NAME
solution : solution for issues provided.

SQL Query:
SELECT * FROM YOUR_TABLE_NAME WHERE <condition_to_detect_anomalies>;


For your specific case:


table_name : SDL_CLAVIS_GB_SEARCH_TERMS_RESULTS
solution : No anomalies detected. No solution required.

SQL Query:
SELECT * FROM SDL_CLAVIS_GB_SEARCH_TERMS_RESULTS WHERE 1=0;  -- No anomalies detected, query returns no results
1. search_results_weighted_score
   Issue: The column contains negative values, which might be unexpected for a score that is typically non-negative.

2. search_results_priority_score
   Issue: The column contains negative values, which might be unexpected for a score that is typically non-negative.

3. search_results_max_rank
   Issue: The column contains negative values, which might be unexpected for a ranking that is typically non-negative.

4. ext_page_no
   Issue: The column contains negative values, which might be unexpected for a page number that is typically non-negative.
========================================================================================================================================

table_name : MRCHR_RESPONSES
solution : Correct negative values for pricedetails and categoryfacings, and ensure facings are non-negative.

SQL Query:
SELECT * 
FROM MRCHR_RESPONSES
WHERE pricedetails < 0 OR categoryfacings < 0 OR facings < 0;
Certainly! Here is the analysis of the columns with issues:

1. **fetchedsequence**:
   - Issue: The `fetchedsequence` column is expected to contain sequential numbers, but it includes negative values (e.g., -10, -5), which may not align with the typical semantic meaning of a sequence number.

2. **categorylength**:
   - Issue: The `categorylength` column contains negative values (e.g., -1.5, -3.0, -10.0), which may not align with the semantic meaning of a length measurement, as lengths are typically non-negative.

3. **categoryfacings**:
   - Issue: The `categoryfacings` column contains negative values (e.g., -2.0, -5.0, -4.0), which might not align with the semantic meaning, as facings are typically non-negative.

If further investigation is needed, these columns should be reviewed to ensure that the data aligns with their intended semantic meanings.
========================================================================================================================================

table_name : SDL_MDS_PH_DISTRIBUTOR_PRODUCT
solution : Correct the promostartperiod and promoendperiod to have valid date ranges where promostartperiod is earlier than promoendperiod. Ensure validationstatus is set to 'valid'.

SQL Query:
SELECT *
FROM SDL_MDS_PH_DISTRIBUTOR_PRODUCT
WHERE validationstatus = 'invalid'
   OR promostartperiod > promoendperiod;
Issue: id
- The 'id' column contains a negative value (-5), which is typically not expected for an identifier column.

Issue: muid
- The 'muid' column contains a 'None' value, which may indicate missing or incomplete data for a unique identifier.

Issue: versionname
- The 'versionname' column contains a 'None' value, which may indicate missing data for a version name.

Issue: name
- The 'name' column contains a 'None' value, which may indicate missing data for a product name.

Issue: itemcode
- The 'itemcode' column contains a 'None' value, which may indicate missing data for an item code.

Issue: promoendperiod
- The 'promoendperiod' column is expected to have a date format, but contains a 'None' value, which may indicate missing or incomplete data.

Issue: distitemcode
- The 'distitemcode' column contains a 'None' value, which may indicate missing data for a distributor item code.

Issue: enterusername
- The 'enterusername' column contains a 'None' value, which may indicate missing data for an entry username.

Issue: validationstatus
- The 'validationstatus' column contains a 'None' value, which may indicate missing data for the validation status.
========================================================================================================================================

table_name : SDL_DSTR_WOOLWORTH_INV
solution : Correct the negative and invalid values for 'lt', 'sl_perc', 'soh_oms', and other related fields. Validate data types and ensure all required fields are filled, especially 'articledesc'.

SQL Query:
sql
SELECT *
FROM SDL_DSTR_WOOLWORTH_INV
WHERE lt < 0
   OR sl_perc < 0
   OR soh_oms < 0
   OR soo_oms < 0
   OR soh_price < 0
   OR articledesc IS NULL
   OR due_date > inv_date
   OR (total_wholesale_demand_om < 0 AND total_wholesale_issue_om < 0);
Issue: articledesc - The column contains "None" and "Invalid Description" which are placeholders or error messages rather than meaningful article descriptions.
Issue: dos_oms - The column holds negative numbers, which might not align with expected on-hand stock values.
Issue: total_wholesale_demand_om - The column contains negative values, which are likely incorrect for demand figures.
Issue: cons_days_oos - The column contains negative values, which might not be semantically correct for days out of stock.
========================================================================================================================================

table_name : SDL_MDS_PH_CLOBOTICS_SOS_REF
solution : Validate and correct the 'validationstatus' and ensure 'enterdatetime'/'lastchgdatetime' are not future dates.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PH_CLOBOTICS_SOS_REF
WHERE validationstatus = 'Invalid'
   OR enterdatetime > CURRENT_TIMESTAMP
   OR lastchgdatetime > CURRENT_TIMESTAMP;
Issue: `id`
- The column name suggests a unique identifier, typically expected to be a positive integer. However, there is a negative value (-1) present, which is unusual for an ID field.

Issue: `versionnumber`
- The column is expected to hold a version number, which is typically a positive integer. However, there is a negative value (-2) present, which is unusual for a version number.

Issue: `enterusername`
- The column is expected to store usernames, which are typically non-numeric and do not exceed certain character limits. However, there is a username (`muid-too-long-for-column-length`) that appears to exceed the expected character limit for this field.
========================================================================================================================================

table_name : SDL_LA_GT_ROUTE_DETAIL_TEMP
solution : Verify and correct the 'created_date' field as it is set in the future compared to the 'file_upload_date' and 'crt_dttm'. Ensure consistent date entries.

SQL Query:
sql
SELECT *
FROM SDL_LA_GT_ROUTE_DETAIL_TEMP
WHERE created_date > CURRENT_DATE
   OR created_date > file_upload_date
   OR created_date > crt_dttm;
Issue: `CREATED_DATE`
- The data type in metadata is `TEXT`, but the data holds `DATE` values, which should likely be of `DATE` data type.

Issue: `FILE_UPLOAD_DATE`
- The data type in metadata is `DATE`, and this column is correctly aligned with its semantic meaning, but the format should be consistent with `DATE` format.

Issue: `CRT_DTTM`
- The data type in metadata is `TIMESTAMP_NTZ`, and this is correctly aligned with its semantic meaning. However, ensure that the format is consistent with `TIMESTAMP` format.

Note: All other columns hold data that aligns with their semantic meaning and data types as specified in the metadata.
========================================================================================================================================

table_name : SDL_MDS_PH_POS_PRICELIST
solution : Correct invalid yearmo format, adjust negative list prices to valid positive values, and ensure versionnumber is a valid positive integer.

SQL Query:
sql
SELECT *
FROM SDL_MDS_PH_POS_PRICELIST
WHERE 
  (yearmo NOT LIKE '____-__' OR TRY_TO_DATE(yearmo || '-01', 'YYYY-MM-DD') IS NULL) 
  OR listpricecase < 0 
  OR listpricedz < 0 
  OR listpriceunit < 0 
  OR versionnumber < 0;
Issue: `yearmo` - Contains invalid month values such as "2023-13" and "2023-00", which are not possible in a date format. 

Issue: `enterdatetime` and `lastchgdatetime` - These columns should have valid timestamps, but the format provided is consistent with a timestamp, no issues found here.

All other columns with text data types align with their semantic meanings based on the sample data provided.
========================================================================================================================================

table_name : SDL_ALL_DISTRIBUTOR_SELLOUT_SALES_FACT
solution : Correct negative sales quantity and ensure sales quantity aligns with the return quantity.

SQL Query:
sql
SELECT *
FROM SDL_ALL_DISTRIBUTOR_SELLOUT_SALES_FACT
WHERE sls_qty < 0
   OR rtrn_qty < 0;
Issue: SLS_QTY
- The column 'sls_qty' contains negative values, which may not be appropriate if it represents sales quantities, as sales quantities are typically non-negative.

Issue: GRS_VAL
- The column 'grs_val' has negative values, which may not align with the assumption that gross values should be non-negative unless representing returns or corrections.

Issue: JJ_NET_VAL
- The column 'jj_net_val' contains negative values, which might indicate issues if net values are expected to be non-negative, unless they represent returns or adjustments.

Issue: RTRN_QTY
- The column 'rtrn_qty' has negative values, which might be incorrect if it is supposed to represent returned quantities, as returns are typically non-negative.

Issue: RTRN_VAL
- The column 'rtrn_val' contains negative values, which might be problematic if it is assumed that returns should have non-negative values.
========================================================================================================================================

table_name : SDL_AU_DSTR_CHS_HEADER  
solution : Update 'soh_amt' to ensure consistency with 'soh_qty' by setting 'soh_amt' to 'soh_qty' * 'last_cost'. Ensure 'soh_amt' is not negative.

SQL Query:
sql
SELECT *
FROM SDL_AU_DSTR_CHS_HEADER
WHERE soh_amt < 0 OR (soh_amt IS NOT NULL AND soh_amt <> soh_qty * last_cost);
Issue: last_cost - The column appears to represent numerical data (e.g., cost), but is stored as text. It should likely be a numeric data type.

Issue: soh_qty - The column represents quantity, which is typically numeric, but is stored as text. It should likely be a numeric data type.

Issue: soh_amt - The column represents an amount, which is typically numeric, but is stored as text. It should likely be a numeric data type.

Issue: month_02, month_03, month_04, month_05, month_06, month_07, month_08, month_09, month_10, month_11, month_12 - These columns represent monthly data, likely numeric (e.g., sales, counts), but are stored as text. They should likely be numeric data types.
========================================================================================================================================

table_name : SDL_AU_DSTR_API_HEADER
solution : Review and correct negative invoiced quantities. Verify the cost price is accurate for vendor-related high costs.

SQL Query:
SELECT *
FROM SDL_AU_DSTR_API_HEADER
WHERE article_id = 11
  AND (mth_total_invoiced_qty < 0 OR cost_price > 5000);
Issue: article_desc
- Some descriptions indicate non-standard or unexpected values (e.g., "Negative cost price", "Illogical quantity").

Issue: cost_price
- Negative values are present, which may not be logical for a cost price.

Issue: month_01, month_02, month_03, month_04
- Contains negative values which may not be logical for monthly data.

Issue: mth_total_invoiced_qty
- Negative values present, which may not be logical for invoiced quantities.

Issue: soh_qty
- Negative values present, which may not be logical for stock on hand quantities.

Issue: dc_soo_qty
- Negative values present, which may not be logical for distribution center sales order quantities.

Issue: so_backorder_qty
- Negative values present, which may not be logical for backorder quantities.

Issue: null_coloumn
- Column named "null_coloumn" contains only "None" values, indicating it might be redundant or improperly named.
========================================================================================================================================

table_name : SDL_CSL_ORDERBOOKING
solution : Correct the 'orddlvdate' to be on or after 'orderdate'; ensure 'ordtotalamt' and 'prdgrossamt' are positive.

SQL Query:
SELECT * 
FROM SDL_CSL_ORDERBOOKING
WHERE orddlvdate < orderdate
   OR ordtotalamt < 0
   OR prdgrossamt < 0;
Issue: prdselrate - Negative values in a column expected to represent product selling rates could indicate incorrect data entry or a reversal of expected values.
Issue: prdgrossamt - Negative values might suggest incorrect calculation or entry for gross amounts, which are typically expected to be non-negative.
========================================================================================================================================

table_name : SDL_KR_COUPANG_BPA_REPORT
solution : Correct the 'campaign_end_date' to be after 'campaign_start_date'. Ensure 'impression_count' is a non-negative value.

SQL Query:
SELECT *
FROM SDL_KR_COUPANG_BPA_REPORT
WHERE campaign_start_date > campaign_end_date
   OR impression_count < 0;
Issue: `campaign_end_date`
- The campaign end date for row 0 is earlier than the campaign start date, which is logically inconsistent.

Issue: `crtd_dttm`
- The timestamp is formatted as `YYYY-MM-DD HH:MM:SS`, which is correct, but the time seems unusually consistent with intervals of two hours between entries. This might be valid but is worth verifying for accuracy.
========================================================================================================================================

table_name : SDL_MDS_VN_POS_PRODUCTS
solution : Remove duplicate entries based on 'muid' and ensure 'changetrackingmask' has correct positive integer values.

SQL Query:
SELECT * FROM SDL_MDS_VN_POS_PRODUCTS
WHERE muid IN (
    SELECT muid FROM SDL_MDS_VN_POS_PRODUCTS
    GROUP BY muid
    HAVING COUNT(*) > 1
) OR changetrackingmask < 0;
Issue: `versionnumber` and `version_id`  
- Data inconsistency: For record 1, `versionnumber` is 2, which aligns semantically, but `version_id` is 9999999999, which seems incorrect for this context.

Issue: `code`  
- Data inconsistency: Record 4 has "InvalidCode" which may not align with the expected format of "CodeX".

Issue: `customer_sku`  
- Missing data: Record 5 has `None` which is unexpected for a customer SKU.

Issue: `barcode`  
- Missing data: Record 2 has `None` which is unexpected for a barcode.

Issue: `name`  
- Missing data: Record 8 has `None` which is unexpected for a product name.

Issue: `lastchgdatetime`  
- Data type inconsistency: Although defined as TEXT in metadata, it may be more appropriate as TIMESTAMP, given the datetime format.
========================================================================================================================================

table_name : SDL_ID_POS_DAILY_IDM_SELLOUT  
solution : Correct the negative value in the 'value' column for the anomalous row, ensuring it reflects the accurate transaction amount.

SQL Query:  
sql  
SELECT *  
FROM SDL_ID_POS_DAILY_IDM_SELLOUT  
WHERE value < 0;
Issue: KODE_BRANCH - The column name suggests it should contain a branch code, but text 'BR001', 'BR002', etc., resemble a concatenation of letters and numbers which may not be suitable for a numerical or specific coded format.

Issue: TGL - The column name 'TGL' implies a date, but it is stored as TEXT. Consider using a DATE or TIMESTAMP format for consistency and accuracy.
========================================================================================================================================

table_name : SDL_MDS_VN_POS_CUSTOMERS
solution : Correct the negative values in 'id', 'versionnumber', 'version_id', 'changetrackingmask', and 'enterversionnumber'. Ensure 'validationstatus' is set to 'Valid' after corrections.

SQL Query:
SELECT * FROM SDL_MDS_VN_POS_CUSTOMERS
WHERE id < 0 
   OR versionnumber < 0 
   OR version_id < 0 
   OR changetrackingmask < 0 
   OR enterversionnumber < 0 
   OR validationstatus != 'Valid';
Here are the columns with issues based on their semantic meaning and the data they hold:

1. **id**
   - Issue: The `id` column typically represents a unique identifier for each record, often expected to be non-negative. However, it contains a negative value (-1), which could indicate an error or special case that needs clarification.

2. **changetrackingmask**
   - Issue: The `changetrackingmask` column holds numbers that seem to represent different change states or categories. The value -999 might be an outlier or a placeholder that requires examination to ensure it aligns with the intended semantic meaning.

3. **note_closed_store**
   - Issue: The `note_closed_store` column contains the value "Closed" and `None`. It's unclear if `None` is intended to indicate open stores, or if it should be explicitly labeled. The semantic meaning may not be fully conveyed.

4. **customer_code**
   - Issue: The `customer_code` column has a `None` value, which might indicate missing data. Typically, one would expect this field to contain a valid code for every entry, assuming all entries are linked to a customer.

5. **enterusername**
   - Issue: The `enterusername` column includes usernames such as "admin" and "manager", which might be generic or placeholder values. If intended to represent specific users, these values may lack specificity.

6. **enterversionnumber**
   - Issue: The `enterversionnumber` column includes a negative value (-10), which seems inconsistent with the other entries. Version numbers are typically non-negative integers.

7. **validationstatus**
   - Issue: The `validationstatus` column contains values labeled as "Invalid" and "Valid." The term "Invalid" may imply data quality issues or processing errors, which might need further investigation to ensure data integrity.

These issues should be reviewed to ensure they align with the intended data structure and semantic meaning.
========================================================================================================================================

table_name : SDL_MDS_VN_PRICE_PRODUCTS  
solution : Ensure 'price' field is non-negative and 'bar_code' is unique.

SQL Query:  
sql  
SELECT *  
FROM SDL_MDS_VN_PRICE_PRODUCTS  
WHERE price < 0 OR bar_code IN (  
  SELECT bar_code  
  FROM SDL_MDS_VN_PRICE_PRODUCTS  
  GROUP BY bar_code  
  HAVING COUNT(*) > 1  
);
Issue: `versionnumber` - Contains negative values which are typically unexpected for a version number.

Issue: `version_id` - Contains negative values which are typically unexpected for an ID.

Issue: `muid` - Contains `None` values, which may indicate missing or incomplete data for what seems to be a unique identifier.

Issue: `versionname` - Contains `None` values, which may indicate missing or incomplete version naming.

Issue: `price` - Contains negative values which are typically unexpected for a price.

Issue: `code` - Contains `None` values, which may indicate missing or incomplete data for what seems to be a product code.

Issue: `product_id_concung` - Contains `None` values, which may indicate missing or incomplete product ID information.

Issue: `enterusername` - Contains `None` values, which may indicate missing or incomplete data for the user name.

Issue: `lastchgdatetime` - Contains `None` values, which may indicate missing or incomplete data that could affect tracking of changes.

Issue: `lastchgusername` - Contains `None` values, which may indicate missing or incomplete data for the user name responsible for the last change.
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_PRODUCT_MAPPING_COLES  
solution : Correct the negative 'versionnumber' from -51 to a valid positive number.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PACIFIC_PRODUCT_MAPPING_COLES 
WHERE versionnumber < 0;
- `id`: The presence of negative values (e.g., -1, -2) in the `id` column is unusual if it is intended to be a unique identifier. Typically, IDs are non-negative integers.

- `versionnumber`: The column `versionnumber` contains negative values (e.g., -1, -5). Version numbers are generally expected to be positive integers, representing sequential versions.

- `version_id`: The column `version_id` contains negative values (e.g., -7, -16). Similar to `versionnumber`, version IDs are typically non-negative integers.

- `code`: The presence of `None` in the `code` column suggests missing data, which might be unexpected if every product is supposed to have a code.

- `jnj_sap_code`: The presence of `None` in the `jnj_sap_code` column suggests missing data, which could be an issue if every product should have an associated SAP code.

- `prod_desc_coles`: The presence of `None` in `prod_desc_coles` indicates missing product descriptions, which may not align with the expectation that each product should have a description.

- `changetrackingmask`: The presence of negative values (e.g., -300, -1400) in `changetrackingmask` may be unexpected if the mask is intended to be non-negative.

Please review these columns where the data does not align with the anticipated semantic meaning or contains potential issues.
========================================================================================================================================

table_name : SDL_MDS_MY_ECOM_PRODUCT
solution : Correct the 'versionnumber' to match the expected range or value.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_MY_ECOM_PRODUCT 
WHERE versionnumber = 99999;
Issue: id - The 'id' column contains a value of '-1', which is typically not a valid identifier in most systems.

Issue: muid - The 'muid' column contains a 'None' value, which is not a valid UUID format string.

Issue: versionnumber - The 'versionnumber' column contains a value of '-4', which is typically not valid for version numbers as they are usually non-negative.

Issue: version_id - The 'version_id' column contains a value of '-1', which is typically not valid for version identifiers as they are usually non-negative.

Issue: versionflag - The 'versionflag' column contains flags like 'alpha', 'beta', and 'release', which are valid. However, ensure that 'None' is not present in this column, as it would be invalid.

Issue: name - The 'name' column contains a 'None' value which is unexpected for a product name.

Issue: changetrackingmask - The 'changetrackingmask' column contains a value of '-99', which might be a placeholder or error code instead of a typical tracking mask value.

Issue: validationstatus - The 'validationstatus' column contains values 'Invalid' and 'Valid', which appear valid. However, ensure only these expected statuses are present.
========================================================================================================================================

table_name : SDL_MDS_SG_ECOM_PRODUCT  
solution : Ensure 'upc' is unique and 'versionflag' status is consistent with product state.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_SG_ECOM_PRODUCT 
WHERE upc IN (
    SELECT upc 
    FROM SDL_MDS_SG_ECOM_PRODUCT 
    GROUP BY upc 
    HAVING COUNT(upc) > 1
) 
OR (versionflag = 'inactive' AND lastchgdatetime > enterdatetime);
Issue: VERSIONNUMBER
- The column contains negative values (e.g., -1, -5) which may not be semantically correct for a version number as it typically represents an ordinal value.

Issue: PROD_ATTR_1, PROD_ATTR_2, PROD_ATTR_3
- The attributes (e.g., "pattr1", "pattr2", "pattr3") do not provide clear semantic meaning and may require more descriptive names or additional context.

Issue: VERSIONFLAG
- The column contains text values such as "active" and "inactive," which are correct semantically but could benefit from further clarification on what the flags represent or how they are used.
========================================================================================================================================

table_name : SDL_MY_CUSTOMER_DIM  
solution : Validate 'cust_id' 50 with 'dstrbtr_grp_cd' B50 and check 'rdd_ind' status and 'cdl_dttm' accuracy.

SQL Query:  
sql  
SELECT cust_id, cust_nm, dstrbtr_grp_cd, dstrbtr_grp_nm, ullage, chnl, territory, retail_env, trdng_term_val, rdd_ind, cdl_dttm, curr_dt, file_name  
FROM SDL_MY_CUSTOMER_DIM  
WHERE (cust_id = 50 AND dstrbtr_grp_cd = 'B50' AND rdd_ind = 'N' AND cdl_dttm = '2023-02-19 13:00:00')
1. Column: `cust_id`
   Issue: The data type is TEXT, but the values are numeric and seem to represent unique identifiers for customers. A more appropriate data type might be INTEGER or STRING.

2. Column: `ullage`
   Issue: The data type is TEXT, but the values are numeric, including negative values. This suggests it might represent a quantitative measure, possibly better suited for an INTEGER or FLOAT data type.

3. Column: `trdng_term_val`
   Issue: The data type is TEXT, but the values are numeric. This column might represent trading term values, which could be better stored as INTEGER or FLOAT.

4. Column: `curr_dt`
   Issue: The data type is TIMESTAMP_NTZ, which is appropriate, but the metadata lists it as TEXT. The metadata should reflect TIMESTAMP_NTZ for accurate representation.

5. Column: `cdl_dttm`
   Issue: The data type is TEXT, but the values appear to represent date and time information. A more suitable data type would be TIMESTAMP or DATETIME.
========================================================================================================================================

table_name : SDL_MY_AFGR
solution : No anomalies detected, no solution required.

SQL Query:
SELECT * FROM SDL_MY_AFGR;
Issue: FILE_NAME - Some entries are 'None', which might indicate missing data where a file name is expected.
Issue: RTN_ORD_NUM - Some entries are 'None', which might indicate missing data where a return order number is expected.
Issue: RTN_ORD_DT - Some entries are 'None', which might indicate missing data where a return order date is expected.
Issue: CN_EXP_ISSUE_DT - Some entries are 'None', which might indicate missing data where an expected issue date is expected.
Issue: BILL_NUM - Some entries are 'None', which might indicate missing data where a bill number is expected.
Issue: BILL_DT - Some entries are 'None', which might indicate missing data where a bill date is expected.
Issue: CN_AMT - Some entries are 'None', which might indicate missing data where a credit note amount is expected.
Issue: CDL_DTTM - Some entries are 'None', which might indicate missing data where a date-time value is expected.
========================================================================================================================================

table_name : ITG_SFA_PM  
solution : Correct the file name format and verify the file path and existence.

SQL Query:
sql
SELECT taskid, filename, path, brand, mrchr_visitdate, customerid, remotekey, customername, salesgroup, storetype, dist_chnl, country, salescyclename, salescampaignname, mastertaskname, salesperson_firstname, salesperson_lastname, secondarytradecode, secondarytradename
FROM ITG_SFA_PM
WHERE filename LIKE 'invalid_file_name_%' OR path LIKE '/invalid/path/%';
Issue: filename
- The filenames contain the word "invalid", which suggests they may not be valid or correctly formatted filenames.

Issue: path
- The paths indicate "/invalid/path/to/file", which suggests they are not valid or actual paths.

Issue: salesperson_firstname
- Some entries have 'None' in the first name, which might not be expected for all records.

Issue: salesperson_lastname
- Some entries have 'None' in the last name, which might not be expected for all records.

Issue: dist_chnl
- Some entries have 'None', which might not be expected for all records if a distribution channel is mandatory.

Issue: secondarytradename
- Some entries have 'None', which might not be expected for all records if a secondary trade name is mandatory.
========================================================================================================================================

table_name : SDL_AU_DSTR_SIGMA_HEADER
solution : No anomalies detected, so no solution is required.

SQL Query:
SELECT * 
FROM SDL_AU_DSTR_SIGMA_HEADER
WHERE 1=0; -- This query will return no rows as there are no anomalies detected.
Issue: `temp`
- The column appears to hold temperature data but is stored as text with units (e.g., "25C"). It should ideally be in numerical format for temperature (e.g., 25) and potentially in a numerical data type with a separate column for units.

Issue: `cost_price` and `soh_qty`
- These columns contain negative values, which may not align with their expected semantic meanings. Prices and quantities are typically non-negative, so these values should be reviewed.

Issue: `month_08`, `month_09`, `month_10`, `month_11`, `month_12`, `month_13`, `month_14`, `month_15`, `month_16`
- These columns contain only zeroes. If they are intended to represent monthly data, the absence of any non-zero values may indicate an issue with the data collection or entry process.

Issue: `ean`
- Although typically a numerical identifier (EAN-13), it is stored as text. While this might be acceptable for identifiers, it is unusual for EAN codes to be represented this way unless leading zeros need to be preserved.

(Note: These issues are based on typical expectations and may require further context to determine if they are indeed problematic.)
========================================================================================================================================

table_name : SDL_HK_WINGKEUNG_INDIRECT_SALES_REP_ROUTE_PLAN
solution : The anomalies detected are likely due to incorrect data entries for 'visit_freq', 'week', and 'period'. Ensure 'visit_freq' is within expected range, 'week' should be a valid week number, and 'period' should align with standard periods. Correct the data to appropriate values.

SQL Query:
SELECT *
FROM SDL_HK_WINGKEUNG_INDIRECT_SALES_REP_ROUTE_PLAN
WHERE visit_freq > 52 OR week NOT BETWEEN 1 AND 52 OR period > 12;
Column: visit_freq
Issue: The column "visit_freq" contains negative values, which may be semantically incorrect if visit frequency is intended to represent a count of visits. Counting typically implies non-negative numbers, so these negative values could indicate data entry errors or a need for clarification on what the negative values represent.

Column: week
Issue: The column "week" appears to contain values formatted as "Week<number>", which may indicate a specific week in the year. Given that the sequential values go beyond typical annual week counts (e.g., Week100), it might suggest an issue unless the context allows for such high numbers, such as spanning multiple years or using a custom period definition.
========================================================================================================================================

table_name : SDL_DISTRIBUTOR_IVY_OUTLET_MASTER_ADFTEMP
solution : No solution needed as no anomalies were detected.

SQL Query:
sql
SELECT * FROM SDL_DISTRIBUTOR_IVY_OUTLET_MASTER_ADFTEMP WHERE 1=0;
Issue: `lattitude`
- Data Error: The data appears to be text but represents coordinates which should be of numeric data type.
- Semantic Misalignment: The correct spelling should be "latitude."

Issue: `longitude`
- Data Error: The data appears to be text but represents coordinates which should be of numeric data type.

Issue: `cdl_dttm`
- Data Error: The data listed as "Invalid Timestamp" does not conform to a typical timestamp format.

Issue: `run_id`
- Data Error: The data listed as negative numbers (e.g., -10, -20) which may not align with typical positive ID values.
========================================================================================================================================

table_name : SDL_MDS_PH_ECOM_PRODUCT
solution : Correct the 'id' from '00000000-0000-0000-0000-000000000000' to a valid UUID and ensure 'changetrackingmask' is a non-negative integer.

SQL Query:
SELECT * FROM SDL_MDS_PH_ECOM_PRODUCT
WHERE id = '00000000-0000-0000-0000-000000000000' 
   OR changetrackingmask < 0;
Issue: SKU4_CODE is expected to be a code related to a product's SKU, but it seems the pattern is inconsistent with SKU2_CODE, SKU3_CODE, etc., which are missing from the sample data.
Issue: SKU5_CODE is expected to be a code related to a product's SKU, but it seems the pattern is inconsistent with SKU2_CODE, SKU3_CODE, etc., which are missing from the sample data.
Issue: SKU2_CODE, SKU3_CODE, SKU1_CODE are listed in metadata but missing from the sample data, leading to potential data consistency issues.
========================================================================================================================================

table_name : SDL_POP6_SG_POPS  
solution : Correct the longitude and latitude values to valid ranges (-180 to 180 for longitude and -90 to 90 for latitude).

SQL Query:
sql
SELECT * 
FROM SDL_POP6_SG_POPS 
WHERE longitude NOT BETWEEN -180 AND 180 
   OR latitude NOT BETWEEN -90 AND 90;
Issue: `longitude`
- The longitude values in the sample data exceed the valid range of -180 to 180 degrees (e.g., 200.123, -200.000).

Issue: `latitude`
- The latitude values in the sample data exceed the valid range of -90 to 90 degrees (e.g., 180.000, -190.000).

Issue: `business_units_id`
- Contains a `None` value which may not align with expectations if all locations should have an associated business unit. 

Issue: `pop_name`
- Contains `None` value which may not be expected if all locations should have a name.

Issue: `address`
- Contains `None` value which may not be expected if all locations should have an address.
========================================================================================================================================

table_name : PRODTR_PRODUCTTRANSLATION  
solution : Update 'language' field from 'None' to the correct language code for the anomalous row.

SQL Query:  
sql  
SELECT *  
FROM PRODTR_PRODUCTTRANSLATION  
WHERE language IS NULL OR language = 'None';
Issue: `eannumber`
- The values in this column are expected to be valid EAN (European Article Number) codes, which are usually 12-13 digits long. However, some entries such as "None" and "ean123" do not align with the expected format.

Issue: `productid`
- This column contains a `None` value, which is unexpected for a product identifier, as these should uniquely identify products and are typically non-null.

Issue: `language`
- The column is expected to hold language codes. The value `None` does not align with this expectation, since a legitimate language code should be present.

Issue: `producttranslationname`
- This column contains a `None` value, which is unexpected as it should contain a name or description for the product translation.
========================================================================================================================================

table_name : SDL_DISTRIBUTOR_IVY_ORDER  
solution : Correct negative values in 'order_latitude'.

SQL Query:
sql
SELECT *
FROM SDL_DISTRIBUTOR_IVY_ORDER
WHERE order_latitude < 0;
Issue: uom and uom_count
- The "uom" column is expected to represent a unit of measure (e.g., PCS for pieces, BOX for boxes, LIT for liters), which it does. However, the "uom_count" column has negative values, which are semantically incorrect for a count of units.

Issue: qty
- The "qty" column is expected to represent a quantity, which should typically be a positive number. However, there are negative values present, which suggest potential errors or returns that need to be clarified in the context.

Issue: order_longitude and order_latitude
- The data type for "order_longitude" and "order_latitude" is listed as TEXT, but the data contains numerical values representing geographical coordinates. These should ideally be stored as a numerical data type (e.g., FLOAT or DOUBLE) to ensure correct processing and usage.

Issue: delivery_date
- The "delivery_date" column is represented as TIMESTAMP_NTZ in metadata, indicating it should be a timestamp without time zone. The semantic meaning aligns, but ensure that all entries strictly follow this format and data type.

Issue: cdl_dttm
- The "cdl_dttm" column is listed as TEXT in metadata, but it holds datetime values. This misalignment suggests it should be stored as a TIMESTAMP or DATETIME type for accurate handling and manipulation.
========================================================================================================================================

table_name : SDL_LA_GT_SALES_ORDER_FACT_TEMP
solution : No solution needed as no anomalies were detected.

SQL Query:
SELECT * 
FROM SDL_LA_GT_SALES_ORDER_FACT_TEMP 
WHERE 1=0;
Given the instructions, I'll review the data and metadata to identify any columns where the semantic meaning does not align with the content.

**Issues:**

1. **hashkey**
   - Issue: The name "hashkey" suggests a unique identifier, possibly a hash value. However, the sample data shows non-unique entries ("abc123" appears more than once).

2. **approved_date**
   - Issue: The name suggests a date of approval, but it might not align if any non-date entries are found.

3. **approved_time**
   - Issue: The name suggests a time of approval, but it might not align if any non-time entries are found.

4. **ref_15**
   - Issue: The name "ref_15" is vague and does not clearly indicate what type of reference it is. The sample data shows generic labels like "Ref1", "Ref2", etc.

5. **run_id**
   - Issue: The name suggests a unique run identifier, but the format ("12345678901234") appears numeric and could potentially be non-unique or not a traditional ID format.

If more data or entries were reviewed and found inconsistencies, they would also be listed similarly. However, based on the sample data provided, these are the observed issues.
========================================================================================================================================

table_name : SDL_MDS_PH_ISE_WEIGHTS  
solution : Correct the 'weight' value to a positive number as negative weights are invalid. Ensure 'id' is set to a positive integer as negative ids may cause issues in database operations.

SQL Query:
sql
SELECT *
FROM SDL_MDS_PH_ISE_WEIGHTS
WHERE weight < 0 OR id < 0;
Issue: `id`
- Semantic Meaning: A unique identifier for each record.
- Data Issue: Contains negative values, which may not align with typical ID semantics.

Issue: `versionnumber`
- Semantic Meaning: Indicates a version number.
- Data Issue: Contains negative and zero values, which may not be valid version numbers.

Issue: `changetrackingmask`
- Semantic Meaning: Likely used for tracking changes.
- Data Issue: Contains negative values, which may not be appropriate for a tracking mask.

Issue: `weight`
- Semantic Meaning: Represents a weight or importance measure.
- Data Issue: Contains negative values, which may not align with expected semantics of weight.

Issue: `versionflag`
- Semantic Meaning: Indicates the status of a version.
- Data Issue: Contains `None`, which may not be a valid status.

Issue: `validationstatus`
- Semantic Meaning: Indicates the validation state.
- Data Issue: Data alternates between 'valid' and 'invalid', which may be fine depending on context, but could indicate a pattern worth reviewing.
========================================================================================================================================

table_name : SDL_DISTRIBUTOR_IVY_INVENTORY  
solution : Verify the quantity value for distributor code DIST047 and adjust if incorrect.

SQL Query:
sql
SELECT * 
FROM SDL_DISTRIBUTOR_IVY_INVENTORY 
WHERE distributor_code = 'DIST047' 
AND warehouse_code = 'WH047' 
AND product_code = 'PRD047' 
AND batch_code = 'BATCH048' 
AND batch_expiry_date = '2024-02-02' 
AND uom = 'G' 
AND qty = 2000;
Issue: batch_expiry_date - The column contains a non-date value "abcd-ef-gh" and some None values, which do not align with the expected date format (YYYY-MM-DD).

Issue: qty - The column contains negative values, which may not be valid for quantities if negative quantities are not expected or allowed. Ensure business rules allow negative values.

Issue: cdl_dttm - Although defined as TEXT, it holds datetime values. Ensure all values conform to datetime format consistently.
========================================================================================================================================

table_name : SDL_POP6_SG_POP_LISTS  
solution : Verify and correct the 'status' value to ensure it is valid and consistent with other entries.

SQL Query:  
sql  
SELECT *  
FROM SDL_POP6_SG_POP_LISTS  
WHERE status < 0;
Issue: `hashkey` - The `hashkey` column is expected to be of type TEXT, which aligns with the metadata. However, without further context, it's unclear if the values like "key1", "key2", etc., are meaningful hash keys or placeholders. Ensure these values are appropriate hash keys relevant to the dataset's context.
========================================================================================================================================

table_name : SDL_ECOM_GMV_SHOPEE  
solution : Correct negative values for gross_sales, gross_units_sold, and product_views; review data entry or calculation methods for errors.

SQL Query:
sql
SELECT * 
FROM SDL_ECOM_GMV_SHOPEE
WHERE gross_sales < 0 
   OR gross_units_sold < 0 
   OR product_views < 0;
Column: gross_sales
Issue: The column contains negative values, which is unusual for sales data as it typically represents revenue.

Column: gross_orders
Issue: The column shows negative values, which is unlikely unless representing returns or cancellations, but this should be clarified.

Column: gross_units_sold
Issue: Negative values appear in this column, which is unexpected, as units sold would typically be non-negative.

Column: gross_item_per_order_growth
Issue: This column is missing from the sample data but is mentioned in the metadata.

Column: product_visitors
Issue: Negative values are present, which is not typical for visitor counts.

Column: product_id
Issue: Contains a None value, which is unusual for an identifier expected to uniquely identify products.

Column: platform
Issue: Contains a None value, which is unusual for a field expected to indicate the platform.

Column: filename
Issue: Contains a None value, which is unexpected for a field that should specify a file name.
========================================================================================================================================

table_name : SDL_MDS_SG_PRODUCT_HIERARCHY
solution : Correct negative values for 'id', 'versionnumber', 'brand_mapping_code', and 'lastchgversionnumber'. Ensure 'enterusername' and 'validationstatus' are populated.

SQL Query:
SELECT *
FROM SDL_MDS_SG_PRODUCT_HIERARCHY
WHERE id < 0 OR versionnumber < 0 OR brand_mapping_code < 0 OR lastchgversionnumber < 0
   OR enterusername IS NULL OR validationstatus IS NULL;
Certainly! Based on the provided data and metadata, here are the columns with issues:

1. **id**:
   - Issue: Contains negative values (-1, -18, -50) which might not be valid for an ID field typically expected to be positive.

2. **versionnumber**:
   - Issue: Contains negative values (-10) which might not be appropriate for a version number expected to be non-negative.

3. **changetrackingmask**:
   - Issue: Contains negative values (-1, -18, -50) which might not be appropriate for a changetracking mask expected to be non-negative.

4. **enterversionnumber**:
   - Issue: Contains negative values (-1) which might not be appropriate for a version number expected to be non-negative.

5. **lastchgversionnumber**:
   - Issue: Contains negative values (-1) which might not be appropriate for a version number expected to be non-negative.

6. **validationstatus**:
   - Issue: Contains 'None' which might not be valid if 'VALID' or other specific statuses are expected.

These issues highlight potential misalignments between the column names and the semantic meaning of the data they hold.
========================================================================================================================================

table_name : SDL_ECOM_SEARCH_ADS_BY_DATE  
solution : Validate and correct the 'sales_usd' and 'sales_lcy' fields to ensure accurate currency conversion and sales data consistency. Verify 'unique_visitors' and 'units_sold' counts for accuracy.

SQL Query:
sql
SELECT *
FROM SDL_ECOM_SEARCH_ADS_BY_DATE
WHERE 
    (sales_usd * 2 != sales_lcy OR 
    unique_visitors > visits OR 
    units_sold > orders)
    AND date = '2023-09-19';
Issue: `sales_usd` contains negative values, which may not be expected for sales amounts.  
Issue: `sales_lcy` contains negative values, which may not be expected for sales amounts.  
Issue: `orders` contains negative values, which may not be expected for the number of orders.  
Issue: `units_sold` contains negative values, which may not be expected for the number of units sold.  
Issue: `visits` contains negative values, which may not be expected for the number of visits.  
Issue: `unique_visitors` contains negative values, which may not be expected for the number of unique visitors.  
Issue: `buyers` contains negative values, which may not be expected for the number of buyers.  
Issue: `new_buyers` contains negative values, which may not be expected for the number of new buyers.  
Issue: `item_conversion_rate` contains negative values, which may not be expected for conversion rates.  
Issue: `filename` contains a `None` value, which may not be expected if every record should have an associated filename.
========================================================================================================================================

table_name : SDL_CSL_CLASSMASTER
solution : Correct the 'availabilty' value from 255 to a valid status code.

SQL Query:
sql
SELECT *
FROM SDL_CSL_CLASSMASTER
WHERE availabilty = 255;
Issue: classcode - The value 'E5E5E5E5E5' in row 5 is inconsistent with other alphanumeric patterns observed in this column, which are typically of length 2.
Issue: turnover - The negative value '-500.0' in row 2 is unusual for a turnover, which usually represents a positive financial figure.
Issue: availabilty - The negative value '-10' in row 3 is unusual for availability, which is typically a non-negative integer.
========================================================================================================================================

table_name : SDL_DISTRIBUTOR_CUSTOMER_DIM_ADFTEMP
solution : Review and correct the data for 'key_outlet', 'cust_id', and 'cust_nm' to ensure consistency and accuracy.

SQL Query:
SELECT *
FROM SDL_DISTRIBUTOR_CUSTOMER_DIM_ADFTEMP
WHERE key_outlet IS NULL
   OR cust_id IS NULL
   OR cust_nm IS NULL
   OR key_outlet LIKE '%XX%'
   OR cust_id LIKE '%XX%'
   OR cust_nm LIKE '%XX%';
Issue: `cust_id`
- The `cust_id` column is expected to contain unique identifiers for customers. However, there are instances of "None" which may indicate missing or invalid data.

Issue: `cust_nm`
- The `cust_nm` column is supposed to represent customer names, but there is an instance of "None," suggesting a missing or incomplete record.

Issue: `address`
- The `address` column is expected to contain physical addresses of customers or outlets. Instances of "None" suggest missing data.

Issue: `city`
- The `city` column should contain the city names corresponding to the addresses. However, there are occurrences of "None," indicating missing data.

Issue: `pst_cd`
- The `pst_cd` column is expected to contain postal codes. However, there are occurrences of "None," indicating missing data.

Issue: `chnl_grp2`
- There is an occurrence of "None" in the `chnl_grp2` column, which is expected to represent channel group names, indicating missing data.

Issue: `cust_grp2`
- The `cust_grp2` column should contain customer group names, but there is an instance of "None," indicating missing or incomplete data.
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_CIW_ADJUSTMENT  
solution : Correct the negative versionnumber from -10 to a valid positive number. Update the id from -1 to a valid positive id.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PACIFIC_CIW_ADJUSTMENT
WHERE id < 0 OR versionnumber < 0;
Issue: id
- Data includes negative values (e.g., -1), which may not be semantically meaningful for an identifier.

Issue: versionname
- Contains 'None' which is inconsistent with expected version naming conventions.

Issue: name
- Contains 'None', which is not meaningful for a name field.

Issue: code
- Contains 'None', which may not be valid for a code field.

Issue: sap_accnt
- All entries have the same prefix 'SAP', which might not be meaningful if variation is expected.

Issue: amt_obj_crncy & local_ccy
- The data types are text; however, the values appear to represent currency codes, which should be validated against a list of valid ISO currency codes.

Issue: validationstatus
- Contains status like 'Invalid', which seems semantically meaningful but should be verified against expected status options.
========================================================================================================================================

table_name : SDL_MDS_VN_ECOM_TARGET
solution : Ensure the 'enterdatetime' and 'lastchgdatetime' have correct future dates or adjust to current/past dates if necessary.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_VN_ECOM_TARGET 
WHERE enterdatetime > CURRENT_TIMESTAMP OR lastchgdatetime > CURRENT_TIMESTAMP;
Issue: ID column contains negative and zero values, which might not be valid as IDs are typically positive.
Issue: MUID contains 'None', which may not be appropriate if MUID is expected to be a unique identifier.
Issue: CODE contains 'None', which might not be valid if all entries are expected to have a code.
Issue: VERSIONFLAG contains 'None', which might be invalid if every entry is supposed to have a version flag.
========================================================================================================================================

table_name : MRCHR_MERCHANDISINGRESPONSE
solution : Ensure 'startdate' and 'starttime' are earlier than 'enddate' and 'endtime' for all entries.

SQL Query:
SELECT *
FROM MRCHR_MERCHANDISINGRESPONSE
WHERE TO_TIMESTAMP(startdate || ' ' || starttime) >= TO_TIMESTAMP(enddate || ' ' || endtime);
1. **fetchedsequence**  
   Issue: Contains negative numbers, which may not align with the expected meaning of a sequence number.

2. **enddate**  
   Issue: The `enddate` should logically be after the `startdate`, but some records have `enddate` before `startdate`.

3. **status**  
   Issue: The status values appear valid, but ensure that all possible statuses are accounted for and defined in the business logic.
========================================================================================================================================

table_name : SDL_DNR_CUSTOMER_DIM
solution : Ensure that numeric columns are present and correctly defined for anomaly detection. Review the schema and data ingestion processes to include necessary numeric data.

SQL Query:
SELECT *
FROM SDL_DNR_CUSTOMER_DIM
WHERE NOT EXISTS (
    SELECT *
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'SDL_DNR_CUSTOMER_DIM'
    AND DATA_TYPE IN ('NUMBER', 'INTEGER', 'FLOAT', 'DOUBLE')
);
Column: grcust
Issue: The column name suggests it might represent a group customer identifier, but it holds a mix of numeric and None values that do not consistently represent group identifiers.

Column: cust_id
Issue: None values are present, which could violate the expectation of a unique identifier for customers.

Column: custname
Issue: None values are present, which could violate the expectation that all customers should have a name.

Column: custadd
Issue: None values are present, which could violate the expectation that all customers should have an address.

Column: custcity
Issue: None values are present, which could violate the expectation that all customers should have a city.

Column: pstlz
Issue: None values and a 0 value are present, which could violate the expectation that all postal codes should be valid and complete.
========================================================================================================================================

table_name : SDL_MDS_PH_NPI_SALES_GROUPINGS
solution : Update the `id` value from negative to positive, ensuring unique and valid identification.

SQL Query:
SELECT * FROM SDL_MDS_PH_NPI_SALES_GROUPINGS WHERE id < 0;
Here are the columns with issues based on the provided data:

1. **id**
   - **Issue**: The 'id' column contains negative values, which might not be valid if the 'id' is supposed to be a unique identifier that is non-negative.

2. **versionnumber**
   - **Issue**: The 'versionnumber' column contains both positive and negative values. Typically, version numbers are non-negative integers, so negative values may indicate an error.

3. **changetrackingmask**
   - **Issue**: The 'changetrackingmask' column contains negative values, which may not be correct if this field is meant to represent a mask or bit flag, which are usually non-negative.

4. **version_id**
   - **Issue**: Similar to the 'id' column, 'version_id' contains negative values, which might not be valid for an identifier.

5. **account_name_code**
   - **Issue**: This column contains 'None' values which might indicate missing data if every record is expected to have an associated account name code.

If you have any specific questions about the data or need further assistance, feel free to ask!
========================================================================================================================================

table_name : SDL_MDS_VN_TOPDOOR_STORETYPE_MAPPING  
solution : Change 'changetrackingmask' value from -50 to a valid positive number to comply with expected data format.  

SQL Query:  
sql  
SELECT *  
FROM SDL_MDS_VN_TOPDOOR_STORETYPE_MAPPING  
WHERE changetrackingmask < 0;
Issue: id
- The 'id' column contains a value of -1, which is atypical for an identifier that usually represents a unique and positive number.

Issue: changetrackingmask
- The 'changetrackingmask' column includes negative values (e.g., -5, -10, -100, -99, -50), which might not align with the expected positive numeric tracking identifiers.
========================================================================================================================================

table_name : SDL_MY_DAILY_SELLOUT_SALES_FACT
solution : Ensure the gross price, quantity, and subtotal fields have valid non-zero values. Validate the data source for incorrect entries.

SQL Query:
SELECT * 
FROM SDL_MY_DAILY_SELLOUT_SALES_FACT 
WHERE grs_prc = 0 
   OR qty = 0 
   OR subtotal_1 = 0 
   OR subtotal_2 = 0 
   OR total_amt_aft_tax = 0 
   OR total_amt_bfr_tax = 0;
Issue in column 'total_amt_aft_tax': Contains negative value (-1000) which typically should be non-negative as it represents the total amount after tax.
Issue in column 'total_amt_bfr_tax': Contains negative value (-1000) which typically should be non-negative as it represents the total amount before tax.
Issue in column 'sls_emp': Contains a 'None' or missing value which might be expected to have a sales employee code.
Issue in column 'custom_field3': Contains a 'None' or missing value which might be expected to hold custom data.
Issue in column 'filename': Contains a 'None' or missing value which might be expected to have a file name.
========================================================================================================================================

table_name : SDL_DISTRIBUTOR_IVY_USER_MASTER  
solution : Correct 'run_id' to a positive integer and ensure unique identification for data consistency.

SQL Query:
sql
SELECT * 
FROM SDL_DISTRIBUTOR_IVY_USER_MASTER 
WHERE run_id <= 0;
Issue: `cdl_dttm` - The data type is listed as TEXT, but it contains date-time values. It should be in a DATETIME data type.
========================================================================================================================================

table_name : SDL_POP6_SG_PRODUCT_LISTS_PRODUCTS  
solution : Verify the 'msl_ranking' value for the specific SKU in the dataset and update it to match the expected ranking criteria.

SQL Query:
sql
SELECT *
FROM SDL_POP6_SG_PRODUCT_LISTS_PRODUCTS
WHERE product_list = 'List11'
  AND product_list_code = 'Code11'
  AND productdb_id = 'DB11'
  AND sku = 'SKU11'
  AND crtd_dttm = '2023-10-20 22:00:00';
Issue: msl_ranking
- Contains non-numeric or unexpected values such as 'rank', 'abc', 'high', 'low', 'xyz', which do not align with typical ranking systems that are usually numeric.

Issue: run_id
- Contains negative values like '-123', which may not be expected for an identifier that is usually positive.

Issue: hashkey
- The hashkey column might contain non-unique values if intended to be a unique identifier. Check for duplicates if uniqueness is a requirement.
========================================================================================================================================

table_name : SDL_MDS_SG_STORE_MASTER
solution : Verify 'versionflag' consistency with other records and validate 'changetrackingmask' for correct values.

SQL Query:
SELECT * FROM SDL_MDS_SG_STORE_MASTER
WHERE versionflag NOT IN (SELECT DISTINCT versionflag FROM SDL_MDS_SG_STORE_MASTER WHERE id <> 49)
OR changetrackingmask NOT IN (SELECT DISTINCT changetrackingmask FROM SDL_MDS_SG_STORE_MASTER WHERE id <> 49);
Issue: id
- Contains negative value (-1), which may not be expected for an identifier.

Issue: muid
- Contains 'None', which may not be appropriate for a unique identifier.

Issue: versionname
- Contains 'None', which may not be appropriate for a version name.

Issue: versionflag
- Contains 'None', which may not be appropriate for a version flag.

Issue: name
- Contains 'None', which may not be appropriate for a store name.

Issue: code
- Contains 'None', which may not be appropriate for a code.

Issue: changetrackingmask
- Contains negative value (-5), which may not be expected for a tracking mask.

Issue: customer_name
- Contains 'None', which may not be appropriate for a customer name.

Issue: customer_store_code
- Contains 'None', which may not be appropriate for a store code.

Issue: customer_store_name
- Contains 'None', which may not be appropriate for a store name.

Issue: customer_store_location
- Contains 'None', which may not be appropriate for a store location.

Issue: enterversionnumber
- Contains negative value (-2), which may not be expected for a version number.

Issue: lastchgusername
- Contains 'None', which may not be appropriate for a username.
========================================================================================================================================

table_name : SDL_ECOMMERCE_OFFTAKE_AMAZON
solution : Correct the negative quantity value and ensure product titles have valid characters.

SQL Query:
SELECT *
FROM SDL_ECOMMERCE_OFFTAKE_AMAZON
WHERE quantity < 0 OR LENGTH(product_title) <> LENGTH(TRIM(product_title));
Column: quantity
Issue: Negative values are present, which might not be semantically correct for a quantity field.

Column: mrp
Issue: Negative values are present, which may not be valid for a manufacturer's retail price.

Column: mrp_offtakes_value
Issue: Negative values are present, which might not align with the expected meaning of this field.
========================================================================================================================================

table_name : SDL_KR_COUPANG_SEARCH_KEYWORD_BY_CATEGORY
solution : Verify the product ranking and search keyword mapping for consistency; ensure data integrity across related fields.

SQL Query:
sql
SELECT *
FROM SDL_KR_COUPANG_SEARCH_KEYWORD_BY_CATEGORY
WHERE by_search_keyword = 'fan' 
  AND product_ranking = 45 
  AND category_depth1 = 'Home Appliances'
  AND category_depth2 = 'Climate Control'
  AND category_depth3 = 'Fans'
  AND ranking = 22 
  AND search_keyword = 'honeywell fan' 
  AND product_ranking = 1;
Issue: `yearmo`
- The `yearmo` column holds values that appear to represent year and month, but the format is inconsistent and includes invalid values (e.g., '202113', '202199'), where the month part should be between '01' and '12'.

Issue: `run_id`
- The `run_id` column is expected to be a number, but some values are negative, which may not be valid depending on the context of use.

Issue: `ranking`
- The `ranking` column is expected to be a text field, but it contains numerical values, which may indicate a potential mismatch between data type and stored values.
========================================================================================================================================

table_name : SDL_MDS_PH_POS_PRODUCT
solution : Correct negative values in 'cust_item_prc' and review 'versionnumber' for consistency.

SQL Query:
sql
SELECT *
FROM SDL_MDS_PH_POS_PRODUCT
WHERE cust_item_prc < 0 OR versionnumber != version_id;
Issue: `rownum`
- Expected to contain numeric data as it represents a row number, and the sample data aligns with this expectation. However, ensure it's consistently numeric across all entries.

Issue: `changetrackingmask`
- Expected data type `NUMBER`, but the semantic meaning suggests it should track changes, which may not always be numeric. Verify if the data type should accommodate non-numeric values.

Issue: `parent_customer_id`
- Expected data type `NUMBER`, and while the sample data aligns, ensure it consistently represents valid numeric identifiers for customers across the dataset.

These are potential issues based on the semantic meaning and the sample data provided. Ensure consistency and alignment with the expected data types for accurate data representation.
========================================================================================================================================

table_name : SDL_LA_GT_VISIT
solution : Correct the date and time discrepancies, ensure 'visit_end' is after 'time_visi', adjust 'time_survey_in' and 'time_survey_out' to reflect actual survey duration, and verify the 'visit_time' and 'count_survey' for logical consistency.

SQL Query:
sql
SELECT *
FROM SDL_LA_GT_VISIT
WHERE (date_plan > date_visi OR time_plan > time_visi)
   OR (time_survey_in > time_survey_out)
   OR (visit_end < time_visi)
   OR (visit_time <= 0)
   OR (count_survey < 0);
Issue: `id_customer` - Contains `None` values which should be replaced with valid customer IDs.
  
Issue: `customer_name` - Contains `None` values which should be replaced with valid customer names.

Issue: `sale_name` - Contains `None` values which should be replaced with valid sale names.

Issue: `date_plan` - No issues found.

Issue: `time_plan` - No issues found.

Issue: `date_visi` - No issues found.

Issue: `time_visi` - No issues found.

Issue: `object` - Contains `None` values which should be replaced with valid object names.

Issue: `visit_end` - No issues found.

Issue: `regioncode` - Contains `None` values which should be replaced with valid region codes.

Issue: `areacode` - Contains `None` values which should be replaced with valid area codes.

Issue: `branchcode` - Contains `None` values which should be replaced with valid branch codes.

Issue: `saleunit` - Contains `None` values which should be replaced with valid sale units.

Issue: `time_survey_in` - No issues found.

Issue: `time_survey_out` - No issues found.

Issue: `count_survey` - Contains negative values which should be replaced with valid non-negative counts.

Issue: `filename` - Contains `None` values which should be replaced with valid filenames.

Issue: `run_id` - Contains values with inconsistent lengths; should be standardized to a fixed length format.

Issue: `crt_dttm` - No issues found.
========================================================================================================================================

table_name : SDL_MDS_MY_PS_WEIGHTS
solution : Update the 'weight' column to a non-negative value and set 'validationstatus' to 'Valid'.

SQL Query:
SELECT * 
FROM SDL_MDS_MY_PS_WEIGHTS
WHERE weight < 0 OR validationstatus = 'Invalid';
Issue: `changetrackingmask` - The data includes a negative value (-1), which may not be appropriate for a tracking mask that typically involves non-negative identifiers or flags.

Issue: `weight` - The data contains negative values, which might not make sense if weight is expected to be a positive measure.
========================================================================================================================================

table_name : SDL_MDS_VN_ECOM_NTS
solution : Correct the 'year' value from 10000 to a valid year, and ensure 'nts_lcy' is not negative.

SQL Query:
SELECT * FROM SDL_MDS_VN_ECOM_NTS
WHERE year > 9999 OR nts_lcy < 0;
COLUMN: versionnumber
ISSUE: The value -1 in row 0 appears invalid for a version number, which is typically a non-negative integer.

COLUMN: name
ISSUE: The value 'None' in row 4 does not align with expected product names, which should be descriptive text.

COLUMN: code
ISSUE: The value 'None' in row 6 does not align with expected product codes, which should be alphanumeric text.

COLUMN: year
ISSUE: The value 10000 in row 2 and -2023 in row 7 are not valid years, which typically range from 0 to the present.

COLUMN: versionflag
ISSUE: The value 'None' in row 5 may not align with the expected text indicating a version flag.

COLUMN: nts_lcy
ISSUE: The value -300.5 in row 2 may be invalid as the amount should typically be non-negative.
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_ECOM_PRODUCT  
solution : Correct the 'muid' field to include a valid identifier, ensure 'cust_attr_2' is populated if required, and verify 'enterversionnumber' for consistency.

SQL Query:
sql
SELECT *
FROM SDL_MDS_PACIFIC_ECOM_PRODUCT
WHERE muid IS NULL
   OR cust_attr_2 IS NULL
   OR enterversionnumber < 0;
Issue: `id`
- The `id` column is expected to hold unique identifiers, but it contains duplicate values (e.g., multiple occurrences of the value `1`).

Issue: `muid`
- The `muid` column is expected to hold unique identifiers (often alphanumeric), but it contains `None` values, which may indicate missing data.

Issue: `code`
- The `code` column is expected to have numeric or alphanumeric product codes, but it contains `None` values, indicating missing data.

Issue: `dataset`
- The `dataset` column is expected to have dataset names or identifiers, but it contains `None` values, indicating missing data.

Issue: `prod_attr_2`
- The `prod_attr_2` column is expected to hold product attributes, but it contains `None` values, indicating missing data.

Issue: `prod_attr_3`
- The `prod_attr_3` column is expected to hold product attributes, but it contains `None` values, indicating missing data.

Issue: `enterusername`
- The `enterusername` column is expected to have usernames, but it contains `None` values, indicating missing data.

Issue: `lastchgusername`
- The `lastchgusername` column is expected to have usernames, but it contains `None` values, indicating missing data.

Issue: `validationstatus`
- The `validationstatus` column is expected to have validation statuses, but it contains `None` values, indicating missing data.
========================================================================================================================================

table_name : SDL_MY_DAILY_SELLOUT_SALES_FACT_MDS_SYNC  
solution : Verify the calculations for sub_total_1, discount, and sub_total_2. Ensure gross_item_price and quantity align with total_amt_after_tax and total_amt_before_tax.

SQL Query:  
sql
SELECT *  
FROM SDL_MY_DAILY_SELLOUT_SALES_FACT_MDS_SYNC  
WHERE (sub_total_1 + discount != sub_total_2) OR  
      (gross_item_price * quantity != total_amt_after_tax AND gross_item_price * quantity != total_amt_before_tax);
Issue: `DISCOUNT`
- The `DISCOUNT` column is expected to represent numerical values, which would typically be stored as integers or floats, but the `data_type` is listed as `TEXT`. This may cause issues when performing calculations or aggregations.

Issue: `QUANTITY`
- The `QUANTITY` column is expected to contain numerical values related to the quantity of items, but the `data_type` is listed as `TEXT`. This suggests a potential data type mismatch.

Issue: `SUB_TOTAL_1`
- The `SUB_TOTAL_1` column should represent numerical values (likely currency or monetary amounts), but the `data_type` is listed as `TEXT`. This might pose problems for numerical operations.

Issue: `SUB_TOTAL_2`
- Similar to `SUB_TOTAL_1`, the `SUB_TOTAL_2` column is expected to contain numerical data, but is listed as `TEXT`.

Issue: `GROSS_ITEM_PRICE`
- The `GROSS_ITEM_PRICE` column is likely intended to store numerical data regarding the price of items, yet it is listed as `TEXT`.

Issue: `QUANTITY_AFTER_CONVERSION`
- This column should contain numerical values, reflecting quantities after conversion, but is described as `TEXT`.

Issue: `QUANTITY_IN_PIECES`
- Expected to store numerical data indicating the quantity in pieces, this column is marked as `TEXT`.

Issue: `TOTAL_AMT_AFTER_TAX`
- The `TOTAL_AMT_AFTER_TAX` column should contain numerical data representing total amounts after applying tax, but the `data_type` is `TEXT`.

Issue: `TOTAL_AMT_BEFORE_TAX`
- Similar to `TOTAL_AMT_AFTER_TAX`, this column should store numerical values but is listed as `TEXT`.

Issue: `BOTTOM_LINE_DISCOUNT`
- Expected to store numerical discount values at the bottom line, but the data type is `TEXT`.
========================================================================================================================================

table_name : SDL_MDS_APAC_DCL_CUSTOMERS
solution : No anomalies detected, no solution needed.

SQL Query:
SELECT * FROM SDL_MDS_APAC_DCL_CUSTOMERS WHERE 1=0; -- No issues detected, query returns no rows
Column Name: sales_channel_id
Issue: The sample data includes a negative value (-10), which may not make sense for an identifier that typically represents a positive integer or zero.

Column Name: retailer_name_code
Issue: The sample data includes negative values (-1), which may not make sense for a code that typically represents a positive integer or zero.

Column Name: changetrackingmask
Issue: The sample data includes negative values (-5, -10), which may not make sense for a tracking mask that typically represents a positive integer or zero.

Column Name: enterversionnumber
Issue: The sample data includes negative values (-300), which may not make sense for a version number that typically represents a positive integer or zero.

Column Name: lastchgusername
Issue: The names `user2`, `user4`, and `user6` seem like system-generated usernames rather than actual usernames, which might not align with typical expectations for this field.
========================================================================================================================================

table_name : SDL_JNJ_CONSUMERREACH_SFM
solution : Correct 'yearmo' from 202350 to a valid format (e.g., 202302 or 202303).

SQL Query:
SELECT *
FROM SDL_JNJ_CONSUMERREACH_SFM
WHERE LENGTH(yearmo) <> 6 OR RIGHT(yearmo, 2) NOT BETWEEN '01' AND '12';
Column Name: cdate
Issue: Contains an invalid date value '9999-01-04', which does not align with the expected date format 'YYYY-MM-DD'.

Column Name: distribution
Issue: Contains negative values (-100, -900), which are unexpected for a column likely representing distribution quantities or values.
========================================================================================================================================

table_name : SDL_KR_COUPANG_DAILY_BRAND_REVIEWS
solution : Review score star should be between 1 and 5, correct the anomalous data.

SQL Query:
SELECT * 
FROM SDL_KR_COUPANG_DAILY_BRAND_REVIEWS
WHERE review_score_star < 1 OR review_score_star > 5;
Issue: review_score_star
- The column holds numeric values representing review scores, but the expected data type is TEXT, which may not be appropriate for storing numeric review scores.

Issue: run_id
- The column holds numeric values, but the data type is specified as TEXT in the metadata. The expected data type should be NUMBER.
========================================================================================================================================

table_name : SDL_MY_DAILY_SELLOUT_STOCK_FACT
solution : No solution needed as no anomalies were detected.

SQL Query:
SELECT *
FROM SDL_MY_DAILY_SELLOUT_STOCK_FACT
WHERE FALSE; -- Since no anomalies were detected, this query returns no results.
Issue: QTY_ON_ORD - The data type is TEXT, but it represents quantities which should be numeric.
Issue: QTY_ON_ORD_PC - The data type is TEXT, but it represents quantities which should be numeric.
Issue: QTY - The data type is TEXT, but it represents quantities which should be numeric.
Issue: QTY_COMMITTED_PC - The data type is TEXT, but it represents quantities which should be numeric.
Issue: AVAILABLE_QTY_PC - The data type is TEXT, but it represents quantities which should be numeric.
Issue: UNIT_PRC - The data type is TEXT, but it represents prices which should be numeric.
Issue: TOTAL_VAL - The data type is TEXT, but it represents monetary values which should be numeric.
========================================================================================================================================

table_name : SDL_POP6_SG_DISPLAYS
solution : Correct the 'end_date' to be after the 'start_date'.

SQL Query:
sql
SELECT * FROM SDL_POP6_SG_DISPLAYS
WHERE TO_DATE(end_date, 'YYYY-MM-DD') < TO_DATE(start_date, 'YYYY-MM-DD');
Issue: `start_date` and `end_date`  
- The `start_date` is expected to be earlier than or equal to the `end_date`, but all `end_date` values are earlier than the `start_date` in the data.

Issue: `display_number`  
- Contains negative values, which might not align with typical expectations for a "display number" which is usually non-negative.

Issue: `run_id`  
- Contains negative values, which might not align with typical expectations for an identifier that usually increments positively.

Issue: `crtd_dttm`  
- All timestamps are identical, which could be unexpected if each entry is supposed to have a unique creation timestamp.
========================================================================================================================================

table_name : SDL_MDS_SG_PS_WEIGHTS
solution : Adjust the 'weight' value to be within a valid range, ensuring it is not negative.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_SG_PS_WEIGHTS
WHERE weight < 0;
Column Name: versionnumber
Issue: The data contains a negative value (-15), which is unusual for a version number as versions are typically positive.

Column Name: version_id
Issue: The data contains a negative value (-6), which is unconventional for an ID as IDs are typically positive.

Column Name: weight
Issue: The data contains a negative value (-100.0, -200.0, -1100.0) which may be unexpected as weights are generally positive unless representing a specific context where negative values are meaningful.
========================================================================================================================================

Since there are no anomalies detected in the table 'SDL_KR_COUPANG_PRODUCT_RANKING_MONTHLY', there's no need for a solution. However, I can provide a template for future reference.

Sample output:

table_name : SDL_KR_COUPANG_PRODUCT_RANKING_MONTHLY
solution : No anomalies detected, no solution required.

SQL Query:
sql
-- Template query to detect anomalies; customize as needed
SELECT *
FROM SDL_KR_COUPANG_PRODUCT_RANKING_MONTHLY
WHERE <conditions_to_detect_anomalies>;


Please replace `<conditions_to_detect_anomalies>` with specific criteria to identify anomalies when they are present.
Issue: ranking
- Expected numerical values for ranking, but found text entries like "abc".

Issue: coupang_sku_id
- Some records have missing SKU IDs (e.g., "None").

Issue: coupang_sku_name
- Some records have missing SKU names (e.g., "None").
========================================================================================================================================

table_name : SDL_CSL_RETAILERHIERARCHY
solution : Correct 'turnover' value to ensure it is non-negative.

SQL Query:
SELECT *
FROM SDL_CSL_RETAILERHIERARCHY
WHERE turnover < 0;
Issue: turnover
- The turnover column includes negative values, which may not align with the expected semantic meaning of "turnover" as it typically represents revenue, which is usually non-negative.

Issue: run_id
- The run_id column contains negative numbers, which might not align with the expected semantic meaning of an identifier that usually is non-negative and incremental.
========================================================================================================================================

table_name : SDL_MDS_VN_GT_MSL_SHOPTYPE_MAPPING
solution : Update the validationstatus to 'Valid' if the data is confirmed correct, or check the data integrity for mismatched fields such as versionflag, active status, or shoptype related codes and correct them.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_VN_GT_MSL_SHOPTYPE_MAPPING
WHERE validationstatus = 'Invalid' OR active = 0;
Issue: `id`  
- The column name suggests a positive identifier, but it contains negative values (e.g., -1).

Issue: `versionnumber`
- The column name suggests a positive version number, but it contains negative values (e.g., -1).

Issue: `version_id`
- The column name suggests a positive identifier, but it contains negative values (e.g., -1).

Note: All other columns appear to contain data that aligns with their expected semantic meanings and data types.
========================================================================================================================================

table_name : SDL_KR_COUPANG_BRAND_RANKING  
solution : Correct the 'run_id' value from '-100' to a valid positive integer as it appears to be an erroneous entry.

SQL Query:
sql
SELECT * 
FROM SDL_KR_COUPANG_BRAND_RANKING
WHERE run_id < 0;
Issue: RANKING - Contains non-numeric values such as '-1', 'abc', and 'A1', which are not consistent with the expected ranking format. Rankings should ideally be positive integers.

Issue: JNJ_BRAND - Contains 'None', which may indicate missing or undefined data. All values should ideally be valid brand identifiers.

Issue: RANK_CHANGE - Contains values like 'None', '++', and '--', which are inconsistent with the expected format indicating rank change. Expected format should be a numeric change with an optional '+' or '-' sign.
========================================================================================================================================

table_name : SDL_KR_COUPANG_PRODUCTSALEREPORT
solution : Correct the negative value in 'cost_of_purchase' and ensure all financial figures are accurate.

SQL Query:
SELECT * 
FROM SDL_KR_COUPANG_PRODUCTSALEREPORT
WHERE cost_of_purchase < 0;
Column: units_sold
Issue: Contains negative values which are typically not valid for units sold.

Column: sns_units_sold
Issue: Contains negative values which are typically not valid for units sold.

Column: shipping_sales_gmv
Issue: Contains negative values which are typically not expected for sales.

Column: avg_product_rating
Issue: Contains values less than 1, which are typically not valid for product ratings.

Column: sns_cogs
Issue: Contains negative values which are typically not expected for costs.

Column: no_of_product_reviews
Issue: Contains a large number of reviews with a very low average rating, which might indicate a data inconsistency.

Column: yearmo
Issue: Contains values like "202313", "202314", etc., which are not valid month representations.
========================================================================================================================================

table_name : SDL_ECOMMERCE_6PAI  
solution : Investigate the cause of the negative sales growth and adjust strategies to align with market trends. Consider revising the sales targets and marketing efforts to address the gaps identified.

SQL Query:
sql
SELECT * 
FROM SDL_ECOMMERCE_6PAI 
WHERE score_weighted < 0 OR score_non_weighted < 0 OR gap_vs_pm < 0 OR gap_vs_p3m < 0 OR gap_vs_plan < 0;
Issue: YEAR - Contains an invalid year value "20212" which does not align with expected year format.
========================================================================================================================================

table_name : KPI2DATA_MAPPING
solution : Verify if the 'value' for 'Impressions' is unusually high or incorrectly recorded. Cross-check with source data or correct the entry.

SQL Query:
SELECT * FROM KPI2DATA_MAPPING
WHERE ctry = 'SAF' 
AND data_type = 'Marketing' 
AND identifier = 'ID313' 
AND kpi_name = 'Impressions' 
AND store_type = 'Retail' 
AND category = 'Advertising' 
AND segment = 'Media'
AND value > 999999;
Issue: "value" column contains numeric data, but the metadata indicates it should be of type TEXT.
========================================================================================================================================

table_name : SDL_CSL_TBL_SCHEMEWISE_APNO
solution : No solution needed as no anomalies were detected.

SQL Query:
SELECT * FROM SDL_CSL_TBL_SCHEMEWISE_APNO WHERE 1=0;  -- No anomalies detected, query returns no result.
Issue: `schid`
- The column `schid` has a value of `-1`, which is typically not expected for an ID column that should represent a unique identifier. This may indicate a data entry error or placeholder value.

Issue: `apno`
- The column `apno` has a value of `None`, which is not expected if `apno` is supposed to represent a unique alphanumeric code. It should not have missing values.

Issue: `createduserid`
- The column `createduserid` has a value of `-5`, which is typically not expected for a user ID. User IDs are usually positive numbers representing unique system users.
========================================================================================================================================

table_name : SDL_POP6_SG_EXECUTED_VISITS  
solution : Correct invalid longitude and latitude values to valid geographic coordinates.

SQL Query:
sql
SELECT *
FROM SDL_POP6_SG_EXECUTED_VISITS
WHERE check_in_longitude > 180 OR check_in_longitude < -180
   OR check_in_latitude > 90 OR check_in_latitude < -90
   OR check_out_longitude > 180 OR check_out_longitude < -180
   OR check_out_latitude > 90 OR check_out_latitude < -90;
Issue: `check_in_datetime` and `check_out_datetime` contain inconsistent data, as seen in row 2 where `check_out_datetime` is from 2022, which seems incorrect given the `visit_date`.

Issue: `pop_code` and `pop_name` contain `None` values in one of the rows, which might indicate missing data for that entry.

Issue: `check_in_longitude` and `check_in_latitude` contain values outside the valid range for geographical coordinates (longitude should be between -180 and 180, latitude between -90 and 90), as seen in multiple rows.

Issue: `planned_visit` and `cancelled_visit` contain extreme values (e.g., -99999, 99999, 100000), which likely indicate errors or placeholders.

Issue: `file_name` contains `None` in one of the rows, which may indicate missing or unrecorded data.
========================================================================================================================================

table_name : SDL_MY_CIW_MAP
solution : Update 'ciw_buckt1' to a valid bucket value. Ensure 'acct_desc' is not None.

SQL Query:
SELECT * 
FROM SDL_MY_CIW_MAP 
WHERE ciw_buckt1 IS NULL OR acct_desc IS NULL;
Issue: `ACCT_NUM`  
- The column name suggests it should contain numeric account numbers, but the data type is `TEXT`. If account numbers are expected to be purely numeric, this could be misleading.

Issue: `CDL_DTTM`  
- The column name implies a datetime format, but the data type is `TEXT`. If date and time values are expected, this should likely be a timestamp or datetime data type.

Issue: `BRAVO_DESC1` and `BRAVO_DESC2`  
- While these columns are of `TEXT` type, the presence of repetitive values like "Description" and "None" might not align well with the semantic expectation of a descriptive field. These should ideally contain more varied descriptive text.

Issue: `ACCT_DESC`  
- Similar to the Bravo description fields, this column frequently uses "None," which may not align with the expectation of a descriptive field providing meaningful account descriptions.
========================================================================================================================================

table_name : SDL_JNJ_OSA_OOS_REPORT
solution : Verify 'run_id' field is valid; revise to correct values. Ensure 'oos_reason' is recorded accurately when 'oos' is 'No'.

SQL Query:
SELECT *
FROM SDL_JNJ_OSA_OOS_REPORT
WHERE run_id = -1 OR (oos = 'No' AND oos_reason IS NOT NULL);
Issue: `emp_address_pc` - The data in this column should represent postal codes but contains non-numeric values like "ABCDE", which are not valid postal codes.

Issue: `emp_address_supervisor` - This column appears to be intended for supervisor identifiers or codes, but contains non-numeric values such as "ABCDE", which may not be valid identifiers.

Issue: `barcode` - While it generally contains numeric strings, there are discrepancies in length (e.g., "111222333444" vs. "12345678901"), which may not align with standard barcode formats.

Issue: `oos_reason` - Contains a "None" value, which may not be appropriate if every record is expected to have a reason for being out of stock.

Issue: `run_id` - This column is expected to be numeric, but the metadata specifies it as NUMBER, indicating a potential data type mismatch in the metadata.
========================================================================================================================================

table_name : SDL_MDS_VN_PS_WEIGHTS
solution : Correct the negative versionnumber to a positive integer and verify if the weight value and changetrackingmask are within acceptable ranges.

SQL Query:
SELECT * 
FROM SDL_MDS_VN_PS_WEIGHTS
WHERE versionnumber < 0
   OR weight <= 0 
   OR changetrackingmask > 1000000000;
Issue: versionnumber contains negative values which is unusual for version numbers, which are typically positive integers.
Issue: changetrackingmask has the same value 999999999 for all records, which may not accurately reflect changes unless intended as a constant.
========================================================================================================================================

table_name : SDL_DSTR_COLES_INV  
solution : Verify and correct the repeated values in the 'closing_soh_nic', 'closing_soh_qty_ctns', 'closing_soh_qty_octns', and 'closing_soh_qty_unit' fields for accuracy.

SQL Query:
sql
SELECT *
FROM SDL_DSTR_COLES_INV
WHERE closing_soh_nic = closing_soh_qty_ctns
  AND closing_soh_qty_ctns = closing_soh_qty_octns
  AND closing_soh_qty_octns = closing_soh_qty_unit;
Issue: vendor
- The column contains a very long numeric string for the first two entries, which might not align with typical vendor identifiers.

Issue: closing_soh_nic
- The column contains negative values, which may not be expected in a stock on hand context.

Issue: closing_soh_qty_ctns
- The column contains negative values, which may not be expected in a stock on hand context.

Issue: dc_days_on_hand
- The column contains a value of 9999 and negative values, which might not be realistic for days on hand.

Issue: inv_date
- The column is marked as TEXT in the metadata but contains date values, which might be more appropriately formatted as DATE.
========================================================================================================================================

table_name : SDL_MDS_VN_SKU_BENCHMARKS  
solution : Update the 'valid_to' date to be after 'valid_from' to ensure logical date sequence.

SQL Query:
sql
SELECT * FROM SDL_MDS_VN_SKU_BENCHMARKS
WHERE valid_to < valid_from;
Issue: `versionnumber` contains negative value (-1), which is unexpected for version numbers typically starting from 0 or 1.
Issue: `valid_to` has dates earlier than `valid_from`, which is logically incorrect for date ranges.
========================================================================================================================================

table_name : SDL_ECOM_AMS
solution : No anomalies detected, no action required.

SQL Query:
SELECT *
FROM SDL_ECOM_AMS
WHERE FALSE; -- No anomalies detected; no records to return.
Issue: `price`
- The column `price` contains negative values, which may not be valid unless representing a refund or similar scenario. Ensure that negative values are expected in this context.

Issue: `order_id`
- The column `order_id` has duplicate values (`ORD123` appears more than once). Order IDs are typically unique identifiers for each order. Ensure duplicates are intentional if they represent something specific, like multiple items in a single order.

Issue: `order_completed_time`
- The column `order_completed_time` in row 6 has a date prior to `order_time`, which may indicate an error in data entry as orders typically cannot be completed before they are placed.
========================================================================================================================================

table_name : SDL_MDS_MY_GT_PRODUCT_MAPPING
solution : Ensure 'id' is a positive integer. Update or remove rows with invalid 'id' values.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_MY_GT_PRODUCT_MAPPING
WHERE id < 0;
Issue: `versionnumber` - The column contains negative values and NaNs, which may not be appropriate for a version number that is typically a positive value.

Issue: `version_id` - The column contains negative values, which may not be appropriate for an ID that is typically a positive value.

Issue: `changetrackingmask` - The column contains negative values, which may not be appropriate for a tracking mask that is typically a positive value or zero.

Issue: `product_description` - Contains some `None` values, which could be problematic if descriptions are expected for all products.

Issue: `code` - Contains some `NaN` values, which could be problematic if codes are expected for all entries.

Issue: `distributor_id` - Contains some `None` values, which could be problematic if IDs are expected for all distributors.

Issue: `enterversionnumber` - Contains some `NaN` values, which could be problematic if version numbers are expected for all entries.

Issue: `lastchgversionnumber` - Contains some `NaN` values, which could be problematic if version numbers are expected for all entries.
========================================================================================================================================

table_name : SDL_SPIRAL_MTI_OFFTAKE
solution : Fix data entry errors by validating 'quantity', 'amount', and 'amountusd' fields; ensure no unrealistic values; implement input constraints.

SQL Query:
SELECT * 
FROM SDL_SPIRAL_MTI_OFFTAKE
WHERE quantity > 1000000 OR amount > 1000000 OR amountusd > 1000000;
Issue: quantity
- Contains negative and extremely large values, which may be unlikely for a quantity field.

Issue: year
- Contains a future year (e.g., 9999), which is likely incorrect or a placeholder value.

Issue: amount
- Contains negative values, which may not align with expected positive transaction amounts.

Issue: amountusd
- Contains negative values, which may not align with expected positive transaction amounts.
========================================================================================================================================

table_name : SDL_KR_COUPANG_PRODUCT_SUMMARY_WEEKLY
solution : Check and correct the ranking value for 'coupang_sku_id' 890123 as it is unusually high, possibly due to data entry error or incorrect aggregation. Verify and update the 'yearmo' format if necessary.

SQL Query:
SELECT *
FROM SDL_KR_COUPANG_PRODUCT_SUMMARY_WEEKLY
WHERE ranking > 1000000 OR yearmo IS NULL;
Issue: `ranking`
- The column `ranking` holds a mixture of numeric and text data (e.g., "9999999999" and "-1"). The expected semantic meaning suggests it should only contain numeric rankings, possibly with a specific range (e.g., positive integers for ranks).

Issue: `jnj_product_flag`
- The column `jnj_product_flag` contains text data ("Yes" or "No"), which aligns with a boolean flag. However, the column name suggests it might not be immediately clear that "Yes" and "No" are the only expected values, indicating it should be a boolean type rather than text.

Issue: `coupang_sku_id`
- The column `coupang_sku_id` is labeled as `TEXT` in the metadata, which might suggest alphanumeric content. However, the sample data shows numeric values, indicating it could potentially be better represented as a numeric data type.
========================================================================================================================================

table_name : SDL_MDS_SG_SKU_BENCHMARKS
solution : Correct negative and inconsistent values in version_id, jj_target, and comp_packsize columns as they should be positive and logically consistent with related data.

SQL Query:
SELECT * FROM SDL_MDS_SG_SKU_BENCHMARKS
WHERE version_id < 0
   OR jj_target < 0
   OR comp_packsize < 0
   OR variance < 0
   OR validationstatus = 'invalid';
Issue: `versionnumber`  
- The data type is `NUMBER` but includes a `-1`, which might signify an error or invalid value.

Issue: `version_id`  
- The data values include a negative number `-101`, which could be an error or invalid ID.

Issue: `comp_packsize`  
- The column contains a negative value `-10.0`, which might not make sense for a pack size.

Issue: `valid_to`  
- The format is `TIMESTAMP_NTZ`, but the value `2023-12-31 23:59:59` suggests it may not align if the time zone is relevant.

Issue: `enterusername`, `lastchgusername`  
- These columns are marked as `TEXT`, which is correct, but ensure that usernames like `user1`, `user2`, etc., are valid and meaningful within the context.

Issue: `validationstatus`  
- The column values alternate between `valid` and `invalid`, ensure this is expected and correctly implemented.
========================================================================================================================================

table_name : SDL_POP6_SG_DISPLAY_PLANS
solution : Correct the 'status' and 'required_number_of_displays' to positive values if appropriate; verify the data logic for these fields.

SQL Query:
SELECT * 
FROM SDL_POP6_SG_DISPLAY_PLANS 
WHERE status < 0 OR required_number_of_displays < 0;
Issue: `status` column contains negative values, which may not align with the expected semantic meaning of a "status" indicating a positive state or condition.

Issue: `required_number_of_displays` column contains negative values, which may not align with the expected semantic meaning of a "required number" indicating a positive quantity.

Issue: `start_date` and `end_date` columns have instances where the `end_date` is earlier than the `start_date`, which may not align with the expected chronological order.
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_CUST_CIW_PLAN
solution : No issues detected, no solution required.

SQL Query:
-- Since no anomalies were detected, no specific SQL query is necessary to identify issues.
Issue: `id`  
- The `id` column contains negative numbers, which may not be typical for an identifier column as IDs are often non-negative.  

Issue: `version_id`  
- The `version_id` column contains negative values, which may not align with typical version identifiers that are often positive or non-negative integers.  

Issue: `versionnumber`  
- The `versionnumber` column contains negative values, which may not be standard as version numbers are often non-negative.  

Issue: `name`  
- Contains values such as "InvalidName" and `None`, which may imply invalid or missing names.  

Issue: `changetrackingmask`  
- The `changetrackingmask` column contains negative values, which may not align with its expected purpose, typically represented by non-negative integers or bitmasks.  

Issue: `goal_gp`  
- Contains negative values, which may be unexpected if this represents a goal value that is typically non-negative.  

Issue: `enterversionnumber`  
- The `enterversionnumber` column contains negative values, which may not align with typical version numbers.  

Issue: `lastchgversionnumber`  
- Contains negative values, which may not align with typical positive version numbers.  

Issue: `validationstatus`  
- Contains values like "invalid", indicating potential issues with validation or data integrity.
========================================================================================================================================

table_name : SDL_MARKET_SHARE_QSD  
solution : Correct the negative value in the 'value' column for the anomalous row to a non-negative value.

SQL Query:
sql
SELECT * 
FROM SDL_MARKET_SHARE_QSD 
WHERE value < 0;
Issue: period_date
- Some dates are invalid, e.g., "2022-13-01" and "2022-02-30". These are not possible dates in the calendar.

Issue: value
- The presence of negative values such as -100.0, -200.0, etc., may be unexpected depending on the context of the data (e.g., sales or revenue).

Issue: category
- The entry "None" in row 2 is inconsistent with other entries that are valid category names.

Issue: database date
- Similar to period_date, "2022-13-01" and "2022-02-30" are invalid dates.

Issue: text desc
- The entry "None" in row 2 is inconsistent with other entries that contain descriptions.
========================================================================================================================================

Certainly! Below is the solution based on the anomaly detected in the specified table, along with the corresponding SQL query to identify such anomalies:

table_name : SDL_MDS_VN_CUSTOMER_SALES_ORGANIZATION
solution : Correct negative values in 'mti_code' and ensure 'versionflag' matches 'status' field. Validate 'validationstatus' as 'Valid'.

SQL Query:
sql
SELECT *
FROM SDL_MDS_VN_CUSTOMER_SALES_ORGANIZATION
WHERE mti_code < 0
   OR (versionflag = 'Inactive' AND status <> 'Inactive')
   OR validationstatus <> 'Valid';
Issue: ID
- Data Type: Expected NUMBER, but contains negative numbers, which may not be semantically appropriate as IDs are typically non-negative.

Issue: CHANGETRACKINGMASK
- Semantic Meaning: The values include both negative and positive numbers, which may not align with the typical use of a mask that usually involves non-negative bitwise operations.

Issue: MTD_CODE
- Semantic Meaning: The values include both negative and positive numbers, which may not align with the typical usage of codes that are often non-negative.

Issue: VALIDATIONSTATUS
- Semantic Meaning: Inconsistent validation statuses such as "Invalid" and "Pending" might need clarification or an explanation based on the business context.
========================================================================================================================================

table_name : SDL_POP6_SG_PLANNED_VISITS
solution : Correct the planned_visit_date to a valid future date if the visit is still pending, or update the status if the visit has already occurred.

SQL Query:
SELECT * 
FROM SDL_POP6_SG_PLANNED_VISITS
WHERE planned_visit_date < CURRENT_DATE();
Issue: RUN_ID - The data type is NUMBER, but negative values are present which may not be expected for an ID field.
========================================================================================================================================

table_name : MS_MASTERSURVEY
solution : No issues detected, no solution required.

SQL Query:
SELECT 'No anomalies detected' AS result FROM MS_MASTERSURVEY LIMIT 1;
Issue: FETCHEDSEQUENCE - Contains negative and unusually large values, indicating potential anomalies in sequence logic.
Issue: MASTERSURVEYID - Contains 'None' indicating missing IDs.
Issue: MASTERSURVEYNAME - Contains 'None' indicating missing names.
Issue: MASTERSURVEYDESCRIPTION - Contains 'None' and empty strings indicating missing descriptions.
Issue: CDL_DATETIME - Contains 'None' indicating missing datetime information.
Issue: CDL_SOURCE_FILE - Contains 'None' indicating missing source files.
Issue: LOAD_KEY - Contains 'None' indicating missing load keys.
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_ECOM_NTS  
solution : Correct the 'year' value to a valid year, preferably the current year or a relevant past year.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PACIFIC_ECOM_NTS
WHERE year > YEAR(CURRENT_DATE) OR year < 1970;
Issue: year
- The column name "year" implies that it should contain valid year values. However, the sample data includes a value of 9999, which is not a typical year and may indicate a placeholder or error.

Issue: versionname
- The column "versionname" contains a value 'None', which is inconsistent if it's intended to represent specific version names.

Issue: code
- The column "code" has a value of 'None', which is inconsistent with the expectation of a text-based code.

Issue: customer_name
- The column "customer_name" includes a value of 'None', which is inconsistent with the expectation of having a customer's name.

Issue: crncy_cd
- The column "crncy_cd" contains a value of 'None', which is inconsistent with the expectation of having a currency code.

Issue: enterusername
- The column "enterusername" includes a value of 'None', which is inconsistent with the expectation of a username.

Issue: need_state
- The column "need_state" is missing from the provided data sample, even though it is listed in the metadata, suggesting a misalignment between the metadata and the data sample.

Issue: brand
- The column "brand" is missing from the provided data sample, even though it is listed in the metadata, suggesting a misalignment between the metadata and the data sample.

Issue: month
- The column "month" is missing from the provided data sample, even though it is listed in the metadata, suggesting a misalignment between the metadata and the data sample.

Issue: gfo
- The column "gfo" is missing from the provided data sample, even though it is listed in the metadata, suggesting a misalignment between the metadata and the data sample.

Issue: market
- The column "market" is missing from the provided data sample, even though it is listed in the metadata, suggesting a misalignment between the metadata and the data sample.
========================================================================================================================================

table_name : SDL_MDS_PH_ISE_PARENT  
solution : Correct 'versionnumber' and 'changetrackingmask' to valid non-negative values. Ensure 'versionname' is not None. Validate 'validationstatus'.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PH_ISE_PARENT
WHERE versionnumber < 0 
   OR changetrackingmask < 0 
   OR versionname IS NULL 
   OR validationstatus = 'Invalid';
Column: versionname
Issue: Contains a None value which is not consistent with expected text format representing version names.

Column: soldtocode_name
Issue: Contains a None value which is not consistent with expected text format representing names.

Column: mtprefix
Issue: Contains a None value which is not consistent with expected text format representing prefixes.

Column: lastchgusername
Issue: Contains a None value which is not consistent with expected text format representing usernames.
========================================================================================================================================

table_name : SDL_MDS_SG_PS_TARGETS  
solution : Ensure that 'versionnumber' and 'version_id' are consistent and match with 'versionname'. Verify 'changetrackingmask' for any discrepancies.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_SG_PS_TARGETS
WHERE versionnumber <> version_id + 1
   OR changetrackingmask <> version_id;
Certainly, here's a concise output highlighting the issues found in the columns based on the semantic meaning and the data they hold:

1. **versionnumber**:
   - Issue: The `versionnumber` column has a value of `9999`, which seems inconsistent with the rest of the data that appears to follow a sequential pattern.

2. **code**:
   - Issue: The `code` column contains a `None` value, which may be inconsistent if every entry is expected to have a code.

Each of these issues suggests a potential misalignment between the semantic meaning of the column name and the data contained within.
========================================================================================================================================

table_name : SDL_HK_IMS_WINGKEUNG_INV  
solution : Correct the negative 'amount' value to reflect an appropriate transaction adjustment.

SQL Query:
sql
SELECT *
FROM SDL_HK_IMS_WINGKEUNG_INV
WHERE amount < 0;
Issue: closing
- The column "closing" contains negative values which might not align with its semantic meaning if it represents quantities or balances that are typically non-negative.

Issue: amount
- The column "amount" contains negative values which might not align with its semantic meaning if it represents quantities or transactions that are expected to be positive.
========================================================================================================================================

table_name: SDL_MDS_VN_DISTRIBUTOR_CUSTOMERS  
solution: Address missing values in 'versionnumber', 'version_id', 'account_id', 'enterversionnumber', and 'lastchgversionnumber'. Verify validity and consistency of 'group_account_id' given its negative value.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_VN_DISTRIBUTOR_CUSTOMERS 
WHERE versionnumber IS NULL 
   OR version_id IS NULL 
   OR account_id IS NULL 
   OR enterversionnumber IS NULL 
   OR lastchgversionnumber IS NULL 
   OR group_account_id < 0;
Issue: versionname - Contains None, which is unexpected for a column likely meant to hold version names.

Issue: versionnumber - Contains negative values, which may not be semantically meaningful for a version number.

Issue: name - Contains None, which is unexpected for a column likely meant to hold names.

Issue: code - Contains None, which is unexpected for a column likely meant to hold codes.

Issue: changetrackingmask - Contains NaN values, which may not be semantically meaningful for a change tracking mask.

Issue: address - Contains None, which is unexpected for a column likely meant to hold addresses.

Issue: province_name - Contains None, which is unexpected for a column likely meant to hold province names.

Issue: province_id - Contains negative and NaN values, which may not be semantically meaningful for a province ID.

Issue: retail_environment - Contains None, which is unexpected for a column likely meant to hold retail environment descriptions.

Issue: enterusername - Contains None, which is unexpected for a column likely meant to hold usernames.

Issue: enterversionnumber - Contains NaN values, which may not be semantically meaningful for a version number.

Issue: lastchgusername - Contains None, which is unexpected for a column likely meant to hold usernames.

Issue: lastchgversionnumber - Contains NaN values, which may not be semantically meaningful for a version number.

Issue: validationstatus - Contains None, which is unexpected for a column likely meant to hold validation statuses.
========================================================================================================================================

table_name : SDL_MDS_VN_GT_GTS_RATIO  
solution : Review and correct the 'percentage' value as it seems unusually high compared to typical range.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_VN_GT_GTS_RATIO 
WHERE percentage > 100;
Column: versionnumber
Issue: Contains negative values (-2), which are not typical for version numbers.

Column: version_id
Issue: Contains negative values (-3), which are not typical for version identifiers.

Column: changetrackingmask
Issue: Contains negative value (-10), which might not be expected for tracking masks.

Column: percentage
Issue: Contains negative value (-50.0), unexpected for percentages which typically range from 0 to 100.

Column: validationstatus
Issue: The semantic meaning suggests a status indicator, but "Invalid" is not as frequent as "Valid," appearing only in a few instances.
========================================================================================================================================

table_name : SDL_IRI_SCAN_SALES
solution : Correct the negative and unusually high values in 'weighted_distribution', 'numeric_distribution', and 'store_count_where_scanned'. Ensure these fields have realistic, positive values.

SQL Query:
sql
SELECT *
FROM SDL_IRI_SCAN_SALES
WHERE weighted_distribution < 0
   OR numeric_distribution > 100
   OR store_count_where_scanned < 0;
Issue: IRI_EAN
- The "iri_ean" column is expected to contain a unique numeric identifier, typically a 12 or 13-digit number representing the product code (EAN). The presence of "None" indicates missing or incomplete data, which could affect product identification.

Issue: SCAN_SALES
- The "scan_sales" column is expected to represent the total sales in monetary value. Negative values are present, which may indicate refunds, returns, or errors in data recording.

Issue: SCAN_UNITS
- The "scan_units" column is expected to represent the total number of units sold. Negative values are present, which could indicate returns or errors in data recording.

Issue: STORE_COUNT_WHERE_SCANNED
- The "store_count_where_scanned" column is expected to represent the count of stores where the product was scanned. Negative values are present, which are not logically valid.

Issue: NUMERIC_DISTRIBUTION
- The "numeric_distribution" column likely represents a percentage or index value. Negative values are present, which may not be appropriate depending on the context.

Issue: WEIGHTED_DISTRIBUTION
- The "weighted_distribution" column also likely represents a percentage or index value. Negative values are present, which may not be appropriate depending on the context.

Issue: FILENAME
- The "filename" column is expected to contain the name of the file from which the data was sourced. The presence of "None" indicates missing data, which could affect traceability.
========================================================================================================================================

table_name : SDL_POP6_SG_PRODUCTS
solution : Correct negative values for columns 'status', 'unit_price', 'display_order', 'largest_uom_quantity', 'middle_uom_quantity', 'smallest_uom_quantity', 'run_id'. Ensure 'launch_date' is valid and conforms to expected format. Verify 'barcode', 'sku', 'sku_code' for uniqueness and validity.

SQL Query:
SELECT *
FROM SDL_POP6_SG_PRODUCTS
WHERE status < 0 
   OR unit_price < 0 
   OR display_order < 0 
   OR largest_uom_quantity < 0 
   OR middle_uom_quantity < 0 
   OR smallest_uom_quantity < 0 
   OR run_id < 0 
   OR TRY_TO_DATE(launch_date, 'YYYY-MM-DD') IS NULL;
Issue: `status`
- Expected to represent a status indicator, often positive or neutral values for active or pending items. The negative value `-1` throughout suggests a potential misalignment if `-1` does not represent a valid status.

Issue: `unit_price`
- Typically represents a monetary amount, expected to be non-negative. The presence of negative values (e.g., `-100.0`) is unusual unless indicating a discount or refund, which is not clear from the context.

Issue: `display_order`
- Usually represents a sequence or rank, expected to be non-negative. Negative values (e.g., `-5`) could indicate reverse ordering, but this is not typical for a display order.

Issue: `largest_uom_quantity`, `middle_uom_quantity`, `smallest_uom_quantity`
- Typically expected to be non-negative as they represent unit quantities. Negative values (e.g., `-10`) are unusual unless indicating a special case that is not clear from the context.

Issue: `run_id`
- Typically represents an identifier for a process or execution, expected to be non-negative. The negative values (e.g., `-10`) could indicate a special case, but this is not typical for an identifier.

Note: The other columns appear to hold data that aligns with their semantic meaning based on the provided sample data.
========================================================================================================================================

table_name : SDL_KR_COUPANG_PRODUCT_RANKING_DAILY  
solution : Update 'yearmo' from 20235 to 202310 to correct the date format.

SQL Query:
sql
SELECT * 
FROM SDL_KR_COUPANG_PRODUCT_RANKING_DAILY
WHERE LENGTH(yearmo) != 6 OR yearmo NOT LIKE '2023%'
Issue: ranking - Contains non-numeric value 'Two', which is inconsistent with expected rank values.
Issue: file_name - Contains 'None' value, which is inconsistent with expected file name format.
Issue: yearmo - Contains '99999' and '20235', which are not valid year-month formats.
========================================================================================================================================

table_name : SDL_COMPETITIVE_BANNER_GROUP
solution : Correct negative dollar value for SKU222 in 2029-Q2; verify data source accuracy.

SQL Query:
SELECT * FROM SDL_COMPETITIVE_BANNER_GROUP
WHERE dollar < 0;
Issue: unit
- The "unit" column contains negative values, which may not make sense if it represents a quantity sold or produced. Units are typically non-negative.

Issue: dollar
- The "dollar" column contains negative values, which could imply discounts or returns, but this should be validated if it aligns with expected data for this context.
========================================================================================================================================

table_name : SDL_MDS_MY_PS_MSL  
solution : Verify and correct 'muid' format; ensure 'ean' is 13 digits.  

SQL Query:  
sql  
SELECT * FROM SDL_MDS_MY_PS_MSL  
WHERE LENGTH(muid) != 7 OR LENGTH(ean) != 13;
Issue: versionnumber
- Expected to be a positive number representing the version number, but contains negative values (e.g., -5).

Issue: name
- Expected to be a non-empty text description, but contains 'None' (e.g., row 19).

Issue: code
- Expected to be a non-empty text code, but contains 'None' (e.g., row 6).

Issue: versionflag
- Expected to be a consistent flag value, but contains inconsistent values like 'None' (e.g., row 9).

Issue: valid_to
- Expected to be a valid future date, but contains '9999-12-31 23:59:59' suggesting a placeholder (e.g., row 3).
========================================================================================================================================

table_name : SDL_MDS_LOG  
solution : Ensure numeric data is available for anomaly detection by converting necessary columns to numeric data types or adding numerical columns where applicable.

SQL Query:
sql
SELECT *
FROM SDL_MDS_LOG
WHERE TRY_CAST(column_name AS NUMBER) IS NULL
Column: status
Issue: The status "None" does not align with typical status values like "Complete" or "Failed."

Column: result
Issue: The result "None" is unexpected as it usually denotes a specific outcome like "Success" or an error description.
========================================================================================================================================

table_name : SDL_MDS_APAC_DCL_PRODUCTS
solution : Correct negative values in 'id', 'changetrackingmask', 'sales channel_id', and 'srp usd' columns; ensure 'id', 'changetrackingmask', 'sales channel_id' are positive integers, and 'srp usd' is a non-negative decimal.

SQL Query:
SELECT *
FROM SDL_MDS_APAC_DCL_PRODUCTS
WHERE id < 0
   OR changetrackingmask < 0
   OR "sales channel_id" < 0
   OR "srp usd" < 0;
1. Column: id
   Issue: The value -1 is present, which is unusual for an ID that is typically positive.

2. Column: versionnumber
   Issue: Contains negative numbers (e.g., -1, -11), which are not typical for version numbers.

3. Column: changetrackingmask
   Issue: Contains negative values (e.g., -5, -7), which may not be valid for a tracking mask.

4. Column: srp usd
   Issue: Contains negative values (e.g., -50.0, -10.0, -1500.0), which are unusual for a suggested retail price.

5. Column: comments
   Issue: Some entries have 'None', which may indicate missing or incomplete data.
========================================================================================================================================

table_name : SDL_CSL_SALESMANMASTER
solution : Correct the 'distcode' and 'smemail' fields for missing values.

SQL Query:
SELECT * 
FROM SDL_CSL_SALESMANMASTER
WHERE distcode IS NULL OR smemail IS NULL;
Certainly! I'll go through the given data and highlight any discrepancies between the semantic meanings and the data they hold as per the provided column names. 

### Issues:

1. **distcode**: 
   - Issue: Contains `None` entries, which might indicate missing district codes. If district code is mandatory, this could be an issue.
   
2. **smid**: 
   - Issue: Contains negative and zero values which might not be valid if `smid` is supposed to be a positive identifier.
   
3. **smname**: 
   - Issue: Contains `None` values, which might be unexpected if every salesperson is supposed to have a name.
   
4. **smphoneno**: 
   - Issue: Contains `None` values. If phone numbers are mandatory for all salespersons, this could be an issue.

5. **smemail**: 
   - Issue: Contains `None` values. If email addresses are mandatory, this could be an issue.

6. **smdailyallowance**: 
   - Issue: Contains negative values, which might not be valid if allowances cannot be negative.

7. **smmonthlysalary**: 
   - Issue: Contains negative values, which might not be valid if salary cannot be negative.

8. **smmktcredit**: 
   - Issue: Contains negative values, which might not be valid if market credit cannot be negative.

9. **uploadflag**: 
   - Issue: Contains values other than 'Y' or 'N', which might be unexpected if only these two flags are valid.

10. **rdssmtype**: 
    - Issue: Contains `None` values, which might be unexpected if every salesperson is supposed to have a type.

11. **uniquesalescode**: 
    - Issue: Contains `None` values, possibly indicating missing unique sales codes.

12. **file_name**: 
    - Issue: Contains `None` values, which might be unexpected if every record is supposed to be associated with a file.

These issues indicate potential discrepancies between the expected data and the actual values stored in the dataset.
========================================================================================================================================

table_name : SDL_POP6_SG_PRODUCT_ATTRIBUTE_AUDITS
solution : Correct the 'audit_form_id' from 'None' to the appropriate value for 'visit_id' V3.

SQL Query:
SELECT *
FROM SDL_POP6_SG_PRODUCT_ATTRIBUTE_AUDITS
WHERE audit_form_id IS NULL;
Issue: visit_id
- Description: Expected to hold unique identifiers for visits, but contains 'None' in some rows, which might indicate missing or incomplete data.

Issue: audit_form_id
- Description: Expected to hold identifiers for audit forms, but contains 'None' in some rows, indicating potential incomplete data.

Issue: audit_form
- Description: Expected to contain names of audit forms, but contains 'None' in some rows, indicating missing information.

Issue: section_id
- Description: Expected to hold identifiers for sections, but contains 'None' in some rows, indicating missing data.

Issue: section
- Description: Expected to contain names of sections, but contains 'None' in some rows, indicating missing information.

Issue: product_attribute_id
- Description: Expected to hold identifiers for product attributes, but contains 'None' in some rows, which might indicate missing data.

Issue: product_attribute
- Description: Expected to contain names of product attributes, but contains 'None' in some rows, indicating missing information.

Issue: run_id
- Description: Expected to be a positive or zero integer identifier for runs, but contains negative values, which may not align with its typical meaning.
========================================================================================================================================

table_name : SDL_ID_POS_DIAMOND_SELLOUT
solution : Correct 'qty' to a non-negative value as negative quantity is not logical for sales.

SQL Query:
sql
SELECT * 
FROM SDL_ID_POS_DIAMOND_SELLOUT
WHERE qty < 0;
Issue: yearmonth
- The value "9999-12" is likely erroneous as it suggests a future date that is unrealistic.

Issue: sales
- Contains negative values, which may not be valid unless they represent refunds or returns.

Issue: qty
- Contains negative and zero values, which may not be valid for quantity unless they represent returns or no stock.
========================================================================================================================================

table_name : SDL_API_DSTR
solution : Correct negative values in 'mth_total_invoiced_qty' and 'dc_soo_qty', and update missing 'vendor_desc'.

SQL Query:
SELECT *
FROM SDL_API_DSTR
WHERE mth_total_invoiced_qty < 0
   OR dc_soo_qty < 0
   OR vendor_desc IS NULL;
Issue: product_ean
- Contains negative values, which are not valid for EANs.

Issue: cost_price
- Contains non-numeric values (e.g., "fifty").

Issue: article_desc
- Contains a 'None' value, which might indicate missing descriptions.

Issue: soh_qty
- Contains negative values, which may not be valid for stock on hand quantities.

Issue: dc_soo_qty
- Contains negative values, which may not be valid for DC stock on order quantities.

Issue: so_backorder_qty
- Contains negative values, which may not be valid for stock on backorder quantities.
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_COGS_MASTER  
solution : Correct nz_cogs_per_unit from -1700.0 to a positive value consistent with similar products.

SQL Query:  
sql
SELECT *  
FROM SDL_MDS_PACIFIC_COGS_MASTER  
WHERE nz_cogs_per_unit < 0;
Issue: code
- The column 'code' contains a 'None' value which is unexpected for a code that typically represents a product or item identifier.

Issue: name
- The column 'name' contains a 'None' value, which is unexpected, as each entry should have a corresponding product name.

Issue: jj_year
- The column 'jj_year' contains 9999, which may be used as a placeholder or error code instead of a valid year.

Issue: sku_year
- The column 'sku_year' contains 9999, which may be used as a placeholder or error code instead of a valid year.
========================================================================================================================================

table_name : SDL_MDS_VN_ECOM_PRODUCT
solution : The issue with 'version_id' being negative should be addressed by ensuring that 'version_id' is a positive integer.

SQL Query:
SELECT * FROM SDL_MDS_VN_ECOM_PRODUCT WHERE version_id < 0;
Issue: 'versionnumber' contains negative values which are unexpected for a version number.
Issue: 'version_id' contains negative values which are unexpected for an identifier.
Issue: 'changetrackingmask' contains negative values which might be unexpected for a mask value.
========================================================================================================================================

table_name : SALES_DATA_FORMAT
solution : No issues detected.

SQL Query:
SELECT * FROM SALES_DATA_FORMAT WHERE FALSE;
Issue: `billing_type` - The sample data contains values like "1", "what", and "are", which do not clearly align with typical billing types, suggesting potential misclassification or inconsistent data entry.
========================================================================================================================================

table_name : SDL_LA_GT_ROUTE_DETAIL  
solution : Correct negative route_no value to a valid positive number.

SQL Query:  
sql
SELECT *  
FROM SDL_LA_GT_ROUTE_DETAIL  
WHERE route_no < 0;
Issue: `ROUTE_NO`
- The column `ROUTE_NO` has a record with a negative value (-3) which may not align with the expected semantic meaning of a route number typically being a positive integer.

Issue: `CREATED_DATE`
- The metadata indicates `CREATED_DATE` should be `TEXT`, but the values appear to be in a date format (e.g., `2023-01-01`). Ensure the data type aligns with the intended format, or update metadata if the values are indeed dates.
========================================================================================================================================

table_name : SDL_MDS_VN_PS_STORE_TAGGING
solution : Update 'versionnumber' to a valid number, ensure 'changetrackingmask' has a non-negative value, and verify 'validationstatus' is correctly set.

SQL Query:
sql
SELECT *
FROM SDL_MDS_VN_PS_STORE_TAGGING
WHERE versionnumber = 99999
   OR changetrackingmask < 0
   OR validationstatus = 'Not Validated';
Issue: id - Contains a negative value (-1), which might not be expected in a typical ID column.
Issue: muid - Contains an invalid UUID format ("invalid-muid-format"), which should typically be in the form of a UUID.
Issue: versionnumber - Contains an unusually high value (99999) and a negative value (-5), which may not be expected for version numbers.
Issue: name - Contains a "None" entry, which might not be expected if all entries are supposed to have a name.
Issue: status - Contains an "Unknown" entry, which might not be a valid status if all statuses are predefined.
Issue: store_name - Contains a "None" entry, which might not be expected if all entries are supposed to have a store name.
========================================================================================================================================

table_name : SDL_CSL_SCHEMEUTILIZATION
solution : Correct negative values for 'schemelutilizedqty' and 'billedqty'. Validate 'schlinecount' for negative values. Ensure 'billedrate' and 'schemeutilizedamt' align with business rules.

SQL Query:
SELECT *
FROM SDL_CSL_SCHEMEUTILIZATION
WHERE schemeutilizedqty < 0 
   OR billedqty < 0 
   OR schlinecount < 0 
   OR schvaluetype = 'Volume' AND schemeutilizedamt < 0;
Issue: `billedqty` - The column name suggests a quantity, which usually is expected to be a positive number. However, the sample data includes negative numbers, which may indicate returns or errors. Clarification is needed on whether negative values are appropriate.

Issue: `billedrate` - The column name suggests a rate, typically expected to be a positive number. The presence of negative numbers could indicate discounts or errors and needs clarification.

(Note: The semantic meanings for the text columns are assumed valid and were not skipped as per the instructions.)
========================================================================================================================================

table_name : SDL_FPA_PROFIT_CENTER_MAPPING
solution : Ensure that numeric columns are included in the table for anomaly detection. Add or identify columns that contain numeric data related to profit center metrics.

SQL Query:
SELECT * 
FROM SDL_FPA_PROFIT_CENTER_MAPPING
WHERE FALSE; -- This query is a placeholder to indicate no numeric data is available, modify to check specific numeric anomalies once numeric data is added.
Issue: dimension
- The column name suggests a reference to a dimension, typically represented by a name or identifier. However, it contains negative and non-standard numeric values like "-100" and "99999," which may not align with typical dimension naming conventions.

Issue: execution_order
- The column name implies a sequence or order, usually numeric, but it contains textual values such as "Order1," "Order4," etc., which may not align with a standard execution order format.
========================================================================================================================================

table_name : SDL_ALL_DISTRIBUTOR_SELLIN_SALES_FACT
solution : Correct the numerator value to be non-negative, as it represents a quantity or count.

SQL Query:
sql
SELECT * 
FROM SDL_ALL_DISTRIBUTOR_SELLIN_SALES_FACT
WHERE numerator < 0;
Issue: `item1`  
- Several entries contain `None`, which is unexpected for a column labeled `item1`.

Issue: `curr`  
- Entry for index 17 contains `None`, which is unexpected for a currency column.

Issue: `filename`  
- Entries for indices 19 and 20 contain `None`, which is unexpected for a filename column.
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_PERENSO_CYCLE_DATES
solution : Check and correct the 'cycle_year' value from 9999 to the correct year corresponding to the provided dates.

SQL Query:
sql
SELECT *
FROM SDL_MDS_PACIFIC_PERENSO_CYCLE_DATES
WHERE cycle_year = 9999;
1. Column: `versionnumber`
   Issue: Contains negative values, which might not be valid for a version number.

2. Column: `version_id`
   Issue: Contains negative values and duplicates, which might not be valid for a version ID.

3. Column: `end_date`
   Issue: Some end dates are earlier than start dates, which is logically incorrect.

4. Column: `cycle_year`
   Issue: Contains values like 9999 and 10000, which may not be meaningful years for a cycle.

5. Column: `lastchgusername`
   Issue: Contains `None` values, which might indicate missing data for a username.

6. Column: `validationstatus`
   Issue: Contains `None` values, which might indicate missing validation status.
========================================================================================================================================

table_name : SDL_HK_POS_SCORECARD_MANNINGS  
solution : Correct negative salesqty to a non-negative value and verify salesvalue alignment.

SQL Query:  
sql  
SELECT *  
FROM SDL_HK_POS_SCORECARD_MANNINGS  
WHERE salesqty < 0;
Column: salesqty
Issue: Contains negative values, which may not align with the expected semantic meaning of representing quantities sold.

Column: salesvalue
Issue: Contains negative values, which may not align with the expected semantic meaning of representing monetary sales value.

Column: vendorid
Issue: Contains a negative value (-1) which may not align with the expected format of vendor identifiers.
========================================================================================================================================

table_name : SDL_MDS_MY_GT_OUTLETATTRIBUTES  
solution : Change cust_year '9999' to a valid year.

SQL Query:  
sql
SELECT *  
FROM SDL_MDS_MY_GT_OUTLETATTRIBUTES  
WHERE cust_year = '9999';
Issue: `id`
- The `id` column is expected to be a unique identifier for each record, typically a non-negative integer, but it contains negative values which is unconventional for an ID column.

Issue: `cust_year`
- The `cust_year` column is expected to represent a year, typically a positive integer within a reasonable range (e.g., 1900-2100), but it contains negative values and unrealistic values like `9999`.

Issue: `changetrackingmask`
- The `changetrackingmask` column is expected to be a positive integer representing some form of change tracking, but it contains negative values which may not be appropriate for tracking masks.

Issue: `code`
- The `code` column contains a `None` value, which might indicate missing or improperly formatted data for what appears to be a mandatory text field.
========================================================================================================================================

table_name : SDL_MDS_PH_NPI_PEG_ITEM
solution : Correct negative values in 'id', 'peg_itemcode_code', and 'salescycle' columns to valid positive values.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PH_NPI_PEG_ITEM 
WHERE id < 0 OR peg_itemcode_code < 0 OR salescycle < 0;
Issue: `id`  
- Negative value (-1) found in a column expected to contain unique identifiers, typically positive integers.

Issue: `changetrackingmask`  
- Contains a negative value (-100), which may not be semantically valid unless explicitly defined in the context.

Issue: `peg_itemcode_code`  
- Contains `None` for a record, which may indicate missing data where a code is expected.

Issue: `salescycle`  
- Contains a negative value (-5), which may not be semantically valid unless explicitly defined in the context.

Issue: `enterusername`  
- Contains `None` for a record, indicating missing data where a username is expected.
========================================================================================================================================

table_name : SDL_CUSTOMERPL_STDCOST_2022
solution : Correct the negative quantity value for the specified material number.

SQL Query:
sql
SELECT * 
FROM SDL_CUSTOMERPL_STDCOST_2022 
WHERE qty < 0;
Column: materialdesc
Issue: The semantic meaning implies a description of the material, which is expected to be a non-empty string. All entries should be valid; however, ensure that descriptions are not missing or overly generic, which may not be evident from the sample but worth checking in larger datasets.
========================================================================================================================================

table_name : SDL_ID_MDS_LOG  
solution : Ensure numeric data columns are populated for anomaly detection.

SQL Query:  
sql  
SELECT *  
FROM SDL_ID_MDS_LOG  
WHERE TRY_CAST(column_name AS NUMBER) IS NULL  
AND column_name IS NOT NULL;
Issue: STATUS - The value "None" is not a typical status value. Expected values might include "Completed", "Failed", "Running", etc., but "None" indicates missing information or an unexpected value.

Issue: RESULT - The value "None" does not provide meaningful information. The column is expected to contain descriptive text about the outcome of a job, such as error messages or status descriptions, but "None" is ambiguous or missing information.
========================================================================================================================================

table_name : SDL_ID_POS_DAILY_SAT_SELLOUT  
solution : Verify the 'plu' value and ensure it is correct. Check if the 'type' as 'Return' is accurate for the product and validate the 'value' field for correctness.

SQL Query:  
sql
SELECT *  
FROM SDL_ID_POS_DAILY_SAT_SELLOUT  
WHERE plu = 50 AND type = 'Return' AND value = 4300.0 AND tgl = '2023-12-03' AND kode_branch = 50;
Issue: `VALUE` - Contains negative numbers, which might be unexpected if it represents a value that should always be non-negative like sales totals. Negative numbers may indicate returns or errors that need further investigation.
========================================================================================================================================

table_name : SDL_LA_GT_SCHEDULE
solution : Ensure numeric data types are used for fields requiring number values and populate missing numeric data.

SQL Query:
sql
SELECT * 
FROM SDL_LA_GT_SCHEDULE 
WHERE TRY_TO_NUMBER(<column_name>) IS NULL 
OR <column_name> IS NULL;
Issue: SCHEDULE_DATE - The data type is listed as TEXT, but it represents dates, which would typically be better served by a DATE data type to ensure proper date handling and validation.
========================================================================================================================================

table_name : SDL_GCGH_GEO_HIER
solution : Add numeric columns to the table for anomaly detection.

SQL Query:
sql
SELECT *
FROM SDL_GCGH_GEO_HIER
WHERE NOT EXISTS (SELECT COLUMN_NAME 
                  FROM INFORMATION_SCHEMA.COLUMNS 
                  WHERE TABLE_NAME = 'SDL_GCGH_GEO_HIER' 
                  AND DATA_TYPE IN ('NUMBER', 'FLOAT', 'INTEGER'));
Issue: `subcluster`
- Some entries have 'None', which may not align with expected subcluster identifiers if all markets are supposed to have a subcluster.

Issue: `country_code_iso2`
- Some entries have 'None', which should ideally be a two-letter country code according to ISO 3166-1 alpha-2 standards.

Issue: `market`
- Some entries have 'None', which should ideally be a valid market identifier.

Issue: `market_type`
- Some entries have 'None', which should ideally specify the type of market, such as 'Retail' or 'Wholesale'.

Issue: `country_code_iso3`
- Some entries have 'None', which should ideally be a three-letter country code according to ISO 3166-1 alpha-3 standards.
========================================================================================================================================

table_name : SDL_CSL_SALESINVOICEORDERS
solution : Ensure 'run_id' is positive, check 'uploadflag' for correct status, and validate 'orderdate' against 'createddate'.

SQL Query:
SELECT * 
FROM SDL_CSL_SALESINVOICEORDERS 
WHERE run_id < 0 
   OR uploadflag NOT IN ('Y', 'N') 
   OR orderdate <> createddate;
Issue: RUN_ID contains negative numbers, which may not align with the typical expectation that a run identifier should be positive.
Issue: SYNCID contains negative numbers, which may not align with the typical expectation that a synchronization identifier should be positive.
========================================================================================================================================

table_name : SDL_LA_GT_INVENTORY_FACT  
solution : Correct negative quantity and amount values for expired product batch.

SQL Query:  
sql  
SELECT *  
FROM SDL_LA_GT_INVENTORY_FACT  
WHERE qty < 0 OR expirydate < CURRENT_DATE;
Issue: QTY
- Expected a numeric data type, but the metadata indicates it is stored as TEXT.

Issue: AMOUNT
- Expected a numeric data type, but the metadata indicates it is stored as TEXT.
========================================================================================================================================

table_name : SDL_LA_GT_ROUTE_HEADER_TEMP
solution : Ensure numeric columns are populated and correct data types are used.

SQL Query:
sql
SELECT *
FROM SDL_LA_GT_ROUTE_HEADER_TEMP
WHERE TRY_CAST(numeric_column AS NUMBER) IS NULL
Issue: is_active
- Contains 'None', which is not a valid boolean value.
- Contains 'yes'/'no', which should ideally be 'true'/'false'.

Issue: routesale
- Contains negative values, which might not make sense for sales.

Issue: saleunit
- Contains 'None', which indicates missing data.
- Contains negative values, which might not be logical for sale units.

Issue: route_code
- Contains 'None', which indicates missing data.

Issue: last_updated_date
- Contains future dates, which might not be valid for a 'last updated' field.

Issue: run_id
- Contains 'None', which indicates missing data.

Issue: filename
- Contains 'None', which indicates missing data.
- Duplicate filenames present, which could lead to confusion or errors.

Issue: crt_dttm
- Contains future timestamps, which might not be logical for a creation datetime field.
========================================================================================================================================

table_name : SDL_JNJ_MER_SHARE_OF_SHELF  
solution : Update 'file_name' to a valid non-null value and 'yearmo' to match the 'sos_date' in YYYYMM format.

SQL Query:
sql
SELECT * 
FROM SDL_JNJ_MER_SHARE_OF_SHELF
WHERE file_name IS NULL OR yearmo != TO_CHAR(sos_date, 'YYYYMM');
Issue: `yearmo` column contains invalid year-month values (e.g., 999912, 202313, 202314, etc.) which do not correspond to standard calendar months.
========================================================================================================================================

table_name : SDL_ECOM_CPAS  
solution : Verify and correct the 'spending' value for shop49 on 2023-03-03 as it may be erroneously high.

SQL Query:
sql
SELECT * 
FROM SDL_ECOM_CPAS
WHERE date = '2023-03-03' AND shop = 'shop49' AND spending > 3000;
Issue: `date` column - Data type is TEXT in metadata, but it represents dates. Expected data type should be DATE or similar.

Issue: `shop` column - Contains a `None` value which might not align with the column's expected purpose if all entries should be valid shop identifiers.
========================================================================================================================================

table_name : SDL_POP6_SG_PRODUCT_LISTS_ALLOCATION
solution : Verify and correct 'product_group_status' and 'product_list_status' as they are inconsistent with expected values.

SQL Query:
SELECT *
FROM SDL_POP6_SG_PRODUCT_LISTS_ALLOCATION
WHERE product_group_status NOT IN (1, 2, 3) OR product_list_status NOT IN (1, 2, 3, 4);
Issue: PRODUCT_GROUP_STATUS
- The values in the column include negative numbers, which may not align with a typical status indication. Typically, status indicators are non-negative.

Issue: PRODUCT_LIST_STATUS
- Similarly, the presence of negative numbers in a status column may not align with its semantic meaning.

Issue: RUN_ID
- The presence of negative numbers in a column that likely represents an identifier or sequence number may not align with its intended use.
========================================================================================================================================

table_name : SDL_KR_COUPANG_CUSTOMER_BRAND_TREND
solution : Correct negative user counts and negative sales amounts; verify data source for errors.

SQL Query:
SELECT *
FROM SDL_KR_COUPANG_CUSTOMER_BRAND_TREND
WHERE curr_user_count < 0 OR tot_user_count < 0 
OR curr_user_sales_amt < 0 OR new_user_sales_amt < 0 
OR curr_user_avg_product_sales_price < 0 
OR new_user_avg_product_sales_price < 0 
OR tot_user_avg_product_sales_price < 0;
1. **new_user_count**
   - Issue: Contains negative values, which may not make sense for counting new users.

2. **curr_user_count**
   - Issue: Contains negative values, which may not make sense for counting current users.

3. **tot_user_count**
   - Issue: Contains negative values, which may not make sense for counting total users.

4. **new_user_sales_amt**
   - Issue: Contains negative values, which may not make sense for a sales amount unless it represents refunds or returns.

5. **curr_user_sales_amt**
   - Issue: Contains negative values, which may not make sense for a sales amount unless it represents refunds or returns.

6. **new_user_avg_product_sales_price**
   - Issue: Contains negative values, which may not make sense for an average sales price unless it represents a discount or refund.

7. **curr_user_avg_product_sales_price**
   - Issue: Contains negative values, which may not make sense for an average sales price unless it represents a discount or refund.

8. **tot_user_avg_product_sales_price**
   - Issue: Contains negative values, which may not make sense for an average sales price unless it represents a discount or refund.

9. **run_id**
   - Issue: Contains negative values, which may not be appropriate for an ID or run identifier.
========================================================================================================================================

table_name : SDL_MDS_PH_ISE_SOS_TARGETS  
solution : Correct 'versionnumber' to a positive integer, check 'target' for valid values, and ensure 'cal_year' is within a plausible range.  

SQL Query:  
sql  
SELECT *  
FROM SDL_MDS_PH_ISE_SOS_TARGETS  
WHERE versionnumber <= 0  
   OR target IS NULL  
   OR cal_year NOT BETWEEN 1900 AND 2100;
Issue: `cal_year` - The `cal_year` column appears to contain non-standard year values like 99999, which do not align with typical calendar year formats.

Issue: `enterusername` - The `enterusername` column contains a `None` value, which may indicate missing or incomplete data for user identification purposes.

Issue: `lastchgusername` - The `lastchgusername` column contains a `None` value, which may indicate missing or incomplete data for user identification purposes.
========================================================================================================================================

table_name : SDL_ID_POS_GUARDIAN_STOCK
solution : Verify and correct the data for article QQ789 regarding category, stock on hand in stores and DC, and customer details for the specified year and month. Ensure data alignment with source records.

SQL Query:
SELECT *
FROM SDL_ID_POS_GUARDIAN_STOCK
WHERE article = 'QQ789'
  AND soh_stores = 100.0
  AND soh_dc = 100.0
  AND pos_cust = 'Customer39'
  AND yearmonth = 202005;
Issue: soh_stores - Negative values found in inventory column, which may indicate data entry errors or need for clarification on negative inventory meaning.
Issue: soh_dc - Negative values found in inventory column, which may indicate data entry errors or need for clarification on negative inventory meaning.
Issue: pos_cust - Contains 'None' value, which may indicate missing customer information or need for placeholder.
Issue: category - Contains 'None' value, which may indicate missing category information or need for placeholder.
========================================================================================================================================

table_name : SDL_CCR_PRODUCT_MAPPING
solution : Ensure numeric data type for relevant columns and populate missing numeric values for anomaly detection.

SQL Query:
SELECT *
FROM SDL_CCR_PRODUCT_MAPPING
WHERE TRY_CAST(<numeric_column_name> AS NUMBER) IS NULL;
Issue: LOGICAL_OPERATOR - Contains values like "XYZ" and "-AND", which are not standard logical operators (typically "AND", "OR", etc.).

Issue: EXECUTION_ORDER - Contains non-numeric values like "None" and unusually high values such as "9999" or "10000", which may indicate incorrect data.
========================================================================================================================================

table_name : SDL_MY_AS_WATSONS_INVENTORY
solution : Correct 'mnth_id' to a valid month (01-12) and ensure 'inv_qty_pc' is non-negative.

SQL Query:
SELECT *
FROM SDL_MY_AS_WATSONS_INVENTORY
WHERE mnth_id NOT BETWEEN 1 AND 12 OR inv_qty_pc < 0;
Issue: year
- Contains values like 9999 which may not be a valid year.

Issue: mnth_id
- Contains values like 99 and 0 which are not valid month identifiers (should range from 1 to 12).

Issue: inv_qty_pc
- Contains negative values which might be unexpected for inventory quantities.

Issue: inv_value
- Contains negative values which might be unexpected for inventory values.
========================================================================================================================================

