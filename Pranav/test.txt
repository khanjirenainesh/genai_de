table_name : PRODBU_PRODUCTBUSINESSUNIT  
solution : Correct the 'islisted' field to have consistent values. Ensure 'maximumorderquantity' does not exceed realistic limits.

SQL Query:
sql
SELECT * 
FROM PRODBU_PRODUCTBUSINESSUNIT 
WHERE islisted NOT IN ('Yes', 'No') 
   OR maximumorderquantity > 10000;
========================================================================================================================================

table_name : MRCHR_RESPONSES  
solution : Correct negative values for 'pricedetails' and 'categoryfacings', set 'facings' to zero if negative.

SQL Query:
sql
SELECT *
FROM MRCHR_RESPONSES
WHERE pricedetails < 0 OR categoryfacings < 0 OR facings < 0;
========================================================================================================================================

table_name : SDL_DISTRIBUTOR_CUSTOMER_DIM_ADFTEMP
solution : Review the data for any discrepancies in key_outlet, jj_sap_dstrbtr_id, and cust_id as these may be causing the anomaly.

SQL Query:
sql
SELECT *
FROM SDL_DISTRIBUTOR_CUSTOMER_DIM_ADFTEMP
WHERE key_outlet IS NULL 
   OR jj_sap_dstrbtr_id IS NULL 
   OR cust_id IS NULL 
   OR key_outlet = '' 
   OR jj_sap_dstrbtr_id = '' 
   OR cust_id = ''
   OR jj_sap_dstrbtr_id NOT LIKE 'DSTR%' 
   OR cust_id NOT LIKE 'CUST%'
   OR LENGTH(pst_cd) != 5;
========================================================================================================================================

table_name : SDL_CSL_RETAILERMASTER
solution : No anomalies detected.

SQL Query:
SELECT * FROM SDL_CSL_RETAILERMASTER;
========================================================================================================================================

table_name : SDL_ECOM_BACKMARGIN
solution : No solution needed as no anomalies detected.

SQL Query:
sql
SELECT * 
FROM SDL_ECOM_BACKMARGIN
WHERE FALSE;  -- No anomalies detected, so no filtering needed
========================================================================================================================================

table_name : SDL_CSL_SALESRETURN
solution : No anomalies detected, no action needed.

SQL Query:
SELECT * FROM SDL_CSL_SALESRETURN WHERE FALSE;
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_CIW_ADJUSTMENT
solution : The anomaly is due to the 'id' being negative and 'versionnumber' being negative. Ensure IDs are positive and verify the logic for version numbers to prevent negative values.

SQL Query:
sql
SELECT *
FROM SDL_MDS_PACIFIC_CIW_ADJUSTMENT
WHERE id < 0 OR versionnumber < 0;
========================================================================================================================================

table_name : SDL_ECOM_SHOPEE_COMPENSATION
solution : No solution needed as no anomalies were detected.

SQL Query:
SELECT 'No anomalies detected' AS status;
========================================================================================================================================

table_name : SDL_ECOM_COGS
solution : No solution needed as there are no anomalies detected.

SQL Query:
sql
-- Example query to check for anomalies, which returned no results for SDL_ECOM_COGS
SELECT * FROM SDL_ECOM_COGS WHERE <condition_for_anomaly>;
========================================================================================================================================

table_name : SDL_MDS_MY_SKU_BENCHMARKS  
solution : Correct the invalid packsize values and ensure consistency between 'jj_packsize', 'jj_target', and 'variance'.

SQL Query:
sql
SELECT *
FROM SDL_MDS_MY_SKU_BENCHMARKS
WHERE jj_packsize != jj_target + variance;
========================================================================================================================================

table_name : SDL_MDS_PH_ISE_WEIGHTS  
solution : Update 'weight' to a non-negative value, and ensure 'id' is a positive integer.

SQL Query:  
sql  
SELECT *  
FROM SDL_MDS_PH_ISE_WEIGHTS  
WHERE id < 0 OR weight < 0;
========================================================================================================================================

table_name : SDL_MDS_VN_ECOM_TARGET
solution : Validate 'enterdatetime' and 'lastchgdatetime' fields to ensure they do not contain future dates, as the detected anomaly suggests a future date entry.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_VN_ECOM_TARGET
WHERE enterdatetime > CURRENT_TIMESTAMP() OR lastchgdatetime > CURRENT_TIMESTAMP();
========================================================================================================================================

table_name : MRCHR_MERCHANDISINGRESPONSE  
solution : Ensure 'startdate' and 'enddate' are consistent; 'starttime' should be before 'endtime'.

SQL Query:
sql
SELECT * 
FROM MRCHR_MERCHANDISINGRESPONSE
WHERE startdate > enddate OR (startdate = enddate AND starttime > endtime);
========================================================================================================================================

table_name : SDL_CBD_GT_SALES_REPORT_FACT  
solution : Verify and validate the sales quantity for 'HighSalesQty', ensure the client 'DuplicateClient007' is correctly identified, and review the seasonal demand justification.

SQL Query:
sql
SELECT *
FROM SDL_CBD_GT_SALES_REPORT_FACT
WHERE sales_qty > 5000 OR client = 'DuplicateClient007';
========================================================================================================================================

table_name : SDL_DNR_CUSTOMER_DIM  
solution : Add numeric columns or ensure existing columns have numeric data types for anomaly detection.

SQL Query:
sql
SELECT COLUMN_NAME, DATA_TYPE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'SDL_DNR_CUSTOMER_DIM'
AND DATA_TYPE NOT IN ('NUMBER', 'FLOAT', 'INTEGER', 'DECIMAL');
========================================================================================================================================

table_name : SDL_DAILYSALES_DEL
solution : Correct negative values in 'salgrossamt', 'salnetamt', 'prdselratebeforetax', 'prdselrateaftertax', 'prdgrossamt', 'mrp', 'salfreeqtyvalue', and 'lpvalue'. Validate 'prdqty' and 'prdfreeqty' to ensure they are non-negative. Review business logic for calculating these fields to prevent future anomalies.

SQL Query:
SELECT *
FROM SDL_DAILYSALES_DEL
WHERE salgrossamt < 0
   OR salnetamt < 0
   OR prdselratebeforetax < 0
   OR prdselrateaftertax < 0
   OR prdgrossamt < 0
   OR mrp < 0
   OR salfreeqtyvalue < 0
   OR lpvalue < 0
   OR prdqty < 0
   OR prdfreeqty < 0;
========================================================================================================================================

table_name : SDL_GCPH_BRAND  
solution : Verify 'suggestedclassificationscore' as it is unusually high. Check for data consistency in 'gross_weight', 'length', and 'height' fields. Ensure 'ean_upc' follows standard format.

SQL Query:
sql
SELECT *
FROM SDL_GCPH_BRAND
WHERE suggestedclassificationscore > 100 
   OR gross_weight != 400.0 
   OR length != 400.0 
   OR height != 400.0 
   OR LENGTH(ean_upc) != 13;
========================================================================================================================================

table_name : SDL_KR_COUPANG_BPA_REPORT  
solution : Correct the campaign_end_date to be after the campaign_start_date and ensure no negative values in impression_count.

SQL Query:
sql
SELECT * 
FROM SDL_KR_COUPANG_BPA_REPORT
WHERE campaign_end_date < campaign_start_date
   OR impression_count < 0;
========================================================================================================================================

table_name : SDL_MDS_PH_NPI_SALES_GROUPINGS  
solution : Validate and correct `versionflag` and `changetrackingmask` inconsistencies.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PH_NPI_SALES_GROUPINGS
WHERE versionflag = 'deprecated' AND changetrackingmask != 40;
========================================================================================================================================

table_name : SDL_MDS_VN_TOPDOOR_STORETYPE_MAPPING
solution : Correct the negative value in 'changetrackingmask' to a positive integer.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_VN_TOPDOOR_STORETYPE_MAPPING
WHERE changetrackingmask < 0;
========================================================================================================================================

table_name : SDL_MDS_VN_POS_CUSTOMERS
solution : Correct negative values for 'id', 'versionnumber', 'version_id', and 'changetrackingmask', and ensure 'validationstatus' is valid.

SQL Query:
sql
SELECT *
FROM SDL_MDS_VN_POS_CUSTOMERS
WHERE id < 0
   OR versionnumber < 0
   OR version_id < 0
   OR changetrackingmask < 0
   OR validationstatus = 'Invalid';
========================================================================================================================================

I'm sorry, but based on the information provided, there are no anomalies detected in the table 'SDL_DISTRIBUTOR_IVY_OUTLET_MASTER_ADFTEMP', so no solutions are needed.

However, I can provide a generic SQL template to detect anomalies in a Snowflake database. You can customize this query based on specific criteria you want to check for anomalies.

sql
SELECT *
FROM <your_table_name>
WHERE <anomaly_condition>;


Replace `<your_table_name>` with your actual table name and `<anomaly_condition>` with the conditions that define an anomaly in your context.
========================================================================================================================================

table_name : SDL_JNJ_MER_COP  
solution : Update the 'emp_address_pc' to a valid postal code and ensure 'start_date' is not before 'cop_date'.

SQL Query:  
sql
SELECT * 
FROM SDL_JNJ_MER_COP 
WHERE emp_address_pc IS NULL 
   OR start_date < cop_date;
========================================================================================================================================

table_name : SDL_MDS_MY_PRODUCT_MASTER
solution : No anomalies detected, no solution required.

SQL Query:
SELECT * 
FROM SDL_MDS_MY_PRODUCT_MASTER 
WHERE <condition to detect anomalies>;
-- Note: Replace <condition to detect anomalies> with actual anomaly detection logic if needed.
========================================================================================================================================

table_name: SDL_POP6_SG_PRODUCT_LISTS_PRODUCTS  
solution: Verify and update the 'product_list_code' for 'List11' as it may be incorrect.

SQL Query:
sql
SELECT *
FROM SDL_POP6_SG_PRODUCT_LISTS_PRODUCTS
WHERE product_list = 'List11'
  AND product_list_code = 'Code11'
  AND productdb_id = 'DB11'
  AND sku = 'SKU11'
  AND crtd_dttm = '2023-10-20 22:00:00';
========================================================================================================================================

table_name : DAILYSALES
solution : No issues detected.

SQL Query:
sql
SELECT * FROM DAILYSALES
WHERE 1=0; -- Placeholder query since no anomalies were detected
========================================================================================================================================

table_name : SDL_LA_GT_SALES_ORDER_FACT_TEMP
solution : No anomalies detected.

SQL Query:
SELECT *
FROM SDL_LA_GT_SALES_ORDER_FACT_TEMP
WHERE FALSE;
========================================================================================================================================

table_name : SDL_KR_COUPANG_SEARCH_KEYWORD_BY_CATEGORY  
solution : The anomaly appears to be a mismatch between the search keyword "honeywell fan" and the product name "Honeywell TurboForce". Verify that the search keyword and product ranking are correctly associated with the product name in the database.  

SQL Query:  
sql  
SELECT *  
FROM SDL_KR_COUPANG_SEARCH_KEYWORD_BY_CATEGORY  
WHERE by_search_keyword = 'fan'  
AND search_keyword = 'honeywell fan'  
AND product_name <> 'Honeywell TurboForce';
========================================================================================================================================

table_name : SDL_CSL_PRODUCTWISESTOCK
solution : No issues detected, no solution needed.

SQL Query:
SELECT 'No anomalies detected' AS message;
========================================================================================================================================

table_name : SDL_CSL_RETAILERROUTE  
solution : Ensure all fields have valid values, especially for distcode, rtrid, rtrcode, rtrname, rmid, rmcode, rmname, and routetype. Replace or update any 'None' or negative values with appropriate data.

SQL Query:  
sql  
SELECT *  
FROM SDL_CSL_RETAILERROUTE  
WHERE distcode IS NULL  
   OR rtrid = -1  
   OR rtrcode IS NULL  
   OR rtrname IS NULL  
   OR rmid = -10  
   OR rmcode IS NULL  
   OR rmname IS NULL  
   OR routetype IS NULL  
   OR uploadflag IS NULL  
   OR syncid = -1  
   OR run_id = -100;
========================================================================================================================================

table_name : SDL_LA_GT_VISIT  
solution : Correct 'time_survey_out' to be after 'time_survey_in', and ensure 'visit_time' is a positive duration.

SQL Query:
sql
SELECT *
FROM SDL_LA_GT_VISIT
WHERE time_survey_out < time_survey_in
   OR visit_time < 0;
========================================================================================================================================

table_name : SDL_MDS_MY_PS_WEIGHTS  
solution : Update 'weight' column to a valid positive value as negative weights are invalid.

SQL Query:
sql
SELECT * FROM SDL_MDS_MY_PS_WEIGHTS
WHERE weight < 0;
========================================================================================================================================

table_name : SDL_JNJ_CONSUMERREACH_CVS  
solution : Ensure 'retailname' is populated; verify data source for missing values.

SQL Query:  
sql
SELECT *  
FROM SDL_JNJ_CONSUMERREACH_CVS  
WHERE retailname IS NULL;
========================================================================================================================================

table_name : SDL_MDS_VN_ECOM_NTS
solution : Check for negative values in the 'nts_lcy' column and verify if they are correctly recorded or need adjustment.

SQL Query:
sql
SELECT *
FROM SDL_MDS_VN_ECOM_NTS
WHERE nts_lcy < 0;
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_ECOM_PRODUCT  
solution : Update 'muid' field with appropriate unique identifier; ensure 'cust_attr_2' is not None; resolve 'enterversionnumber' as it should be positive; verify 'validationstatus' consistency with current status.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PACIFIC_ECOM_PRODUCT
WHERE muid IS NULL 
   OR cust_attr_2 IS NULL 
   OR enterversionnumber < 0 
   OR validationstatus NOT IN ('in_review', 'draft');
========================================================================================================================================

table_name : SDL_LA_GT_CUSTOMER  
solution : Update the anomalous row by providing valid data for mandatory fields such as 'arcode', 'arname', 'araddress', 'telephone', 'city', 'region', 'saledistrict', 'saleoffice', 'salegroup', 'artypecode', 'saleemployee', 'salename', 'billprovince', 'billzipcode', 'activestatus', 'latitude', 'longitude', and 'branchcode'. Ensure that 'activestatus' is set to a valid value and longitude/latitude are accurate. Validate 'routestep1' through 'routestep10' to have appropriate values or set them to NULL if not applicable.

SQL Query:
sql
SELECT *
FROM SDL_LA_GT_CUSTOMER
WHERE (arcode IS NULL OR araddress IS NULL OR telephone IS NULL OR city IS NULL OR region IS NULL OR saledistrict IS NULL OR saleoffice IS NULL OR salegroup IS NULL OR artypecode IS NULL OR saleemployee IS NULL OR salename IS NULL OR billprovince IS NULL OR billzipcode IS NULL OR activestatus = -99999 OR latitude IS NULL OR longitude IS NULL OR branchcode IS NULL);
========================================================================================================================================

I'm sorry, but there are no anomalies detected in the provided table 'SDL_MDS_APAC_DCL_CUSTOMERS', so no specific solution is necessary. If you have other tables with detected anomalies, please provide details for those tables so I can help generate solutions and SQL queries.
========================================================================================================================================

table_name : SDL_MDS_SG_PRODUCT_MAPPING  
solution : Validate 'versionnumber' and ensure it matches 'version_id'. Check for consistency between 'customer_name_id' and other related fields. Verify 'enterdatetime' and 'lastchgdatetime' for logical consistency.  

SQL Query:  
sql
SELECT *  
FROM SDL_MDS_SG_PRODUCT_MAPPING  
WHERE versionnumber != version_id  
   OR customer_name_id != RIGHT(customer_name_code, LENGTH(customer_name_id))  
   OR enterusername IS NULL OR lastchgusername IS NULL  
   OR enterdatetime > lastchgdatetime;
========================================================================================================================================

table_name : SDL_MDS_VN_PS_TARGETS
solution : Update the 'value' field to a positive number if negative values are not allowed, or verify the data entry process for errors.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_VN_PS_TARGETS
WHERE value < 0;
========================================================================================================================================

table_name : SDL_MY_DAILY_SELLOUT_SALES_FACT
solution : Investigate and correct the 'qty', 'qty_pc', 'qty_aft_conv', 'subtotal_1', 'discount', 'subtotal_2', 'bottom_line_dscnt', 'total_amt_aft_tax', and 'total_amt_bfr_tax' fields as they are all zero, which indicates incorrect or missing data.

SQL Query:
sql
SELECT * 
FROM SDL_MY_DAILY_SELLOUT_SALES_FACT
WHERE qty = 0 
  AND qty_pc = 0 
  AND qty_aft_conv = 0 
  AND subtotal_1 = 0 
  AND discount = 0 
  AND subtotal_2 = 0 
  AND bottom_line_dscnt = 0 
  AND total_amt_aft_tax = 0 
  AND total_amt_bfr_tax = 0;
========================================================================================================================================

table_name : SDL_DISTRIBUTOR_IVY_USER_MASTER  
solution : Verify 'run_id' and 'cdl_dttm' fields for inaccuracies. Ensure 'run_id' is a positive integer and 'cdl_dttm' is in a valid range.

SQL Query:  
sql
SELECT *  
FROM SDL_DISTRIBUTOR_IVY_USER_MASTER  
WHERE run_id < 0  
   OR cdl_dttm > CURRENT_TIMESTAMP;
========================================================================================================================================

table_name : SDL_MDS_PH_LAV_PRODUCT
solution : Correct the mismatched promostartperiod and promoendperiod values. Ensure all date formats are consistent.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PH_LAV_PRODUCT
WHERE promostartperiod > promoendperiod
   OR promostartperiod IS NULL
   OR promoendperiod IS NULL;
========================================================================================================================================

table_name : SDL_LA_GT_SELLOUT_FACT  
solution : Correct negative grossprice value to reflect accurate pricing.

SQL Query:
sql
SELECT * 
FROM SDL_LA_GT_SELLOUT_FACT 
WHERE grossprice < 0;
========================================================================================================================================

table_name: SDL_MDS_SG_STORE_MASTER  
solution: Review and correct the 'customer_store_location' to ensure it matches the expected format or data consistency rules.

SQL Query:  
sql
SELECT *  
FROM SDL_MDS_SG_STORE_MASTER  
WHERE (customer_store_location IS NULL OR customer_store_location NOT LIKE '%Location%')  
AND validationstatus = 'Valid';
========================================================================================================================================

table_name : SDL_CSL_UDCMASTER  
solution : The anomalies detected in the table 'SDL_CSL_UDCMASTER' are related to inappropriate values in the 'columnprecision', 'editable', and 'columnmandatory' fields where values are negative. Correct these values to appropriate non-negative values based on business logic or database constraints.

SQL Query:
sql
SELECT * 
FROM SDL_CSL_UDCMASTER 
WHERE columnprecision < 0 
   OR editable < 0 
   OR columnmandatory < 0;
========================================================================================================================================

table_name : SDL_LA_GT_SALES_ORDER_FACT  
solution : Verify and correct the negative 'totalbeforevat' to ensure data integrity.

SQL Query:
sql
SELECT * 
FROM SDL_LA_GT_SALES_ORDER_FACT
WHERE totalbeforevat < 0;
========================================================================================================================================

table_name : SDL_ECOMMERCE_OFFTAKE_AMAZON  
solution : Correct negative quantity to zero or a valid positive number, verify data entry for accuracy.

SQL Query:
sql
SELECT * FROM SDL_ECOMMERCE_OFFTAKE_AMAZON
WHERE quantity < 0;
========================================================================================================================================

table_name : SDL_MDS_PH_POS_PRODUCT  
solution : Correct negative values in 'cust_item_prc'; ensure 'computed_price_per_unit' and 'jj_price_per_unit' are realistic; validate 'versionflag' and 'validationstatus'.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PH_POS_PRODUCT
WHERE cust_item_prc < 0 
   OR computed_price_per_unit <= 0 
   OR jj_price_per_unit <= 0 
   OR versionflag IS NULL 
   OR validationstatus = 'Invalid';
========================================================================================================================================

table_name : SDL_AU_DSTR_SIGMA_HEADER
solution : No issues detected.

SQL Query:
SELECT * FROM SDL_AU_DSTR_SIGMA_HEADER WHERE 1=2;
========================================================================================================================================

table_name : SDL_MDS_PH_NON_ISE_WEIGHTS  
solution : Correct the weight to a positive value and ensure changetrackingmask is non-negative.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PH_NON_ISE_WEIGHTS
WHERE weight < 0 OR changetrackingmask < 0;
========================================================================================================================================

table_name: SDL_MDS_PH_ECOM_PRODUCT  
solution: The 'changetrackingmask' value cannot be negative. Update it to a valid positive integer or correct value.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PH_ECOM_PRODUCT
WHERE id = '00000000-0000-0000-0000-000000000000' 
  AND changetrackingmask < 0;
========================================================================================================================================

table_name : SDL_MY_AFGR
solution : No anomalies detected, hence no solution needed.

SQL Query:
sql
-- Since there are no anomalies detected, no specific SQL query is required.
-- For future anomaly detection, use a query template like below:
-- SELECT * FROM SDL_MY_AFGR WHERE <anomaly_condition>;
========================================================================================================================================

table_name : SDL_MY_DAILY_SELLOUT_SALES_FACT_MDS_SYNC  
solution : Verify 'gross_item_price' and 'quantity' calculations as they seem incorrect; ensure 'total_amt_after_tax' and 'total_amt_before_tax' align with expected values.

SQL Query:
sql
SELECT * 
FROM SDL_MY_DAILY_SELLOUT_SALES_FACT_MDS_SYNC
WHERE 
    gross_item_price * quantity != sub_total_1 OR
    sub_total_1 - discount != sub_total_2 OR
    sub_total_2 != total_amt_before_tax OR
    total_amt_after_tax <= bottom_line_discount OR
    total_amt_after_tax != total_amt_before_tax;
========================================================================================================================================

table_name: SDL_JNJ_CONSUMERREACH_SFM  
solution: Update 'yearmo' to '202302' for consistency with 'cdate'.  

SQL Query:  
sql  
SELECT *  
FROM SDL_JNJ_CONSUMERREACH_SFM  
WHERE LENGTH(yearmo) != 6 OR yearmo != TO_CHAR(cdate, 'YYYYMM');
========================================================================================================================================

table_name : SDL_KR_COUPANG_DAILY_BRAND_REVIEWS  
solution : Ensure 'review_score_star' values are within the expected range (e.g., 1 to 5) and correct the anomalies.

SQL Query:
sql
SELECT * 
FROM SDL_KR_COUPANG_DAILY_BRAND_REVIEWS
WHERE review_score_star NOT BETWEEN 1 AND 5;
========================================================================================================================================

table_name : SDL_MY_DAILY_SELLOUT_STOCK_FACT
solution : No specific solution needed as no anomalies were detected.

SQL Query:
SELECT *
FROM SDL_MY_DAILY_SELLOUT_STOCK_FACT
WHERE 1=0 -- No anomalies detected
========================================================================================================================================

table_name : CUST_CUSTOMER  
solution : Verify and correct the 'region' field for consistency with other database records.

SQL Query:
sql
SELECT *
FROM CUST_CUSTOMER
WHERE region = 'West'
AND fetcheddatetime = '2023-10-02 00:00:00'
AND fetchedsequence = 0
AND azurefile = 'file2.txt'
AND azuredatetime = '2023-10-02 00:00:00'
AND customerid = 'CUST002'
AND remotekey = 'REM002'
AND customername = 'Jane Smith'
AND country = 'USA'
AND county = 'Cook'
AND district = 'District 10'
AND city = 'Chicago'
AND postcode = '60601'
AND streetname = 'Broadway'
AND streetnumber = '456'
AND storereference = 'STORE002'
AND email = 'jane@example.com'
AND phonenumber = '987654321'
AND storetype = 'Wholesale'
AND website = 'www.example.net'
AND ecommerceflag = 'No'
AND marketingpermission = 'Yes'
AND channel = 'Offline'
AND salesgroup = 'Group B'
AND secondarytradecode = 'CODE2'
AND secondarytradename = 'Trade Name 2'
AND soldtoparty = 'Party B'
AND cdl_datetime = '2023-10-02 00:00:00'
AND cdl_source_file = 'source2.csv'
AND load_key = 'LOAD002';
========================================================================================================================================

table_name : SDL_POP6_SG_DISPLAYS
solution : The end_date cannot be before the start_date. Correct the end_date to be after or on the start_date.

SQL Query:
sql
SELECT * 
FROM SDL_POP6_SG_DISPLAYS
WHERE end_date < start_date;
========================================================================================================================================

table_name : SDL_CSL_DAILYSALES
solution : Review and correct calculation errors in 'saltotdedn', 'salnetamt', and 'prdnetamt' fields to ensure accurate sales data.

SQL Query:
sql
SELECT *
FROM SDL_CSL_DAILYSALES
WHERE (salgrossamt - saltotdedn + saltotaddn + salroundoffamt) != salnetamt
   OR (prdgrossamt - prdspldiscamt - prdschdiscamt - prdcashdiscamt - prddbdiscamt + prdtaxamt) != prdnetamt;
========================================================================================================================================

table_name : SDL_CSL_DAILYSALES_UNDELIVERED
solution : No anomalies detected, no solution required.

SQL Query:
SELECT * FROM SDL_CSL_DAILYSALES_UNDELIVERED WHERE FALSE;
========================================================================================================================================

table_name : SDL_CSL_RDSSMWEEKLYTARGET_OUTPUT  
solution : Rectify 'distcode', 'targetrefno', 'smcode', 'smname', 'rmcode', 'rmname', 'targetyear', 'targetmonth', 'targetvalue', 'targetname', 'targetstatus', 'targettype', and 'downloadstatus' with valid data. Ensure 'targetyear' and 'targetmonth' are positive integers. Correct 'targetvalue', 'week1', 'week2', 'week3', 'week4', and 'week5' to appropriate positive values. Update 'run_id' and 'file_name' with correct identifiers.

SQL Query:
sql
SELECT * 
FROM SDL_CSL_RDSSMWEEKLYTARGET_OUTPUT 
WHERE distcode IS NULL 
   OR targetrefno IS NULL 
   OR smcode IS NULL 
   OR smname IS NULL 
   OR rmcode IS NULL 
   OR rmname IS NULL 
   OR targetyear <= 0 
   OR targetmonth IS NULL 
   OR targetvalue < 0 
   OR targetname IS NULL 
   OR week1 < 0 
   OR week2 < 0 
   OR week3 < 0 
   OR week4 < 0 
   OR week5 < 0 
   OR targetstatus IS NULL 
   OR targettype IS NULL 
   OR downloadstatus IS NULL 
   OR run_id < 0 
   OR file_name IS NULL;
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_ACCT_NIELSENCODE_MAPPING  
solution : Change the 'id' from -2 to a valid unique positive integer and ensure 'versionname', 'versionflag', and 'validationstatus' are not None. Verify other fields for consistency as needed.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PACIFIC_ACCT_NIELSENCODE_MAPPING
WHERE id < 0 
   OR versionname IS NULL 
   OR versionflag IS NULL 
   OR validationstatus IS NULL;
========================================================================================================================================

table_name : SDL_MDS_VN_CUSTOMER_SEGMENTATION  
solution : Correct the negative values in 'versionnumber' and 'changetrackingmask' fields to valid non-negative integers.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_VN_CUSTOMER_SEGMENTATION
WHERE versionnumber < 0 OR changetrackingmask < 0;
========================================================================================================================================

table_name : SDL_ID_POS_CARREFOUR_STOCK
solution : Verify and correct negative stock_amt for 'Clothing'. Check data entry or source for errors.

SQL Query:
SELECT *
FROM SDL_ID_POS_CARREFOUR_STOCK
WHERE stock_amt < 0;
========================================================================================================================================

table_name : SDL_MDS_PH_MSL_DTLS
solution : Check 'lastchgdatetime' and 'enterdatetime' for logical consistency and ensure unique 'id' and 'muid' values.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PH_MSL_DTLS
WHERE id = muid
   OR enterdatetime > lastchgdatetime
   OR lastchgdatetime < enterdatetime
   OR (SELECT COUNT(*) FROM SDL_MDS_PH_MSL_DTLS WHERE id = 'unique-key-50') > 1;
========================================================================================================================================

table_name : SDL_MDS_PH_LAV_CUSTOMER
solution : No anomalies detected.

SQL Query:
SELECT * FROM SDL_MDS_PH_LAV_CUSTOMER;
========================================================================================================================================

table_name : SDL_KR_COUPANG_PRODUCT_MASTER
solution : No solution needed as no anomalies detected.

SQL Query:
SELECT * FROM SDL_KR_COUPANG_PRODUCT_MASTER;
========================================================================================================================================

table_name : SDL_ECOM_GMV_KONVY
solution : Check and correct data types and constraints for numeric fields to prevent unrealistic values, ensure barcode and itemcode fields are valid, and fix missing values for productname, status, and platform.

SQL Query:
sql
SELECT *
FROM SDL_ECOM_GMV_KONVY
WHERE sales_amount = 9999999999.0
   OR total_unit_sold = 9999999999.0
   OR current_price = 9999999999.0
   OR pro_price = 9999999999.0
   OR pro_cost = 9999999999.0
   OR cost_in_vat = 9999999999.0
   OR cost = 9999999999.0
   OR market_value = 9999999999.0
   OR stock_turnover_days = 9999
   OR view_no = 'infinite'
   OR conversion = 9999999999.0
   OR productname IS NULL
   OR status IS NULL
   OR platform IS NULL;
========================================================================================================================================

table_name : SDL_HK_IMS_VIVA_SEL_OUT  
solution : Correct negative values for sales_volume, sales_order_quantity, and net_trade_sales. Validate account_types and ensure sales_office_name and sales_group_name are correctly formatted.

SQL Query:
sql
SELECT * 
FROM SDL_HK_IMS_VIVA_SEL_OUT 
WHERE sales_volume < 0 
   OR sales_order_quantity < 0 
   OR net_trade_sales < 0 
   OR account_types IS NULL 
   OR LENGTH(sales_office_name) > 12 
   OR LENGTH(sales_group_name) > 12;
========================================================================================================================================

table_name : SDL_KR_COUPANG_PA_REPORT  
solution : Correct the negative value in 'total_conversion_sales_1d' and ensure all monetary fields are non-negative.

SQL Query:
sql
SELECT *
FROM SDL_KR_COUPANG_PA_REPORT
WHERE total_conversion_sales_1d < 0;
========================================================================================================================================

table_name : SDL_MDS_PH_POS_CUSTOMERS
solution : No anomalies detected.

SQL Query:
SELECT * FROM SDL_MDS_PH_POS_CUSTOMERS WHERE 1=0;
========================================================================================================================================

table_name : SDL_MY_ACCRUALS  
solution : Correct negative value in 'may_val' to a valid positive value or nullify if invalid.

SQL Query:
sql
SELECT cust_id, cust_nm, jj_year, file_type, jan_val, feb_val, mar_val, apr_val, may_val, 
       jun_val, jul_val, aug_val, sep_val, oct_val, nov_val, dec_val, cdl_dttm, curr_dt, file_name
FROM SDL_MY_ACCRUALS
WHERE may_val < 0;
========================================================================================================================================

table_name : SDL_MDS_SG_PRODUCT_EXCEPTIONS  
solution : Correct the 'changetrackingmask' value from negative to a valid positive integer.  

SQL Query:  
sql  
SELECT *  
FROM SDL_MDS_SG_PRODUCT_EXCEPTIONS  
WHERE changetrackingmask < 0;
========================================================================================================================================

table_name : SDL_CLAVIS_GB_PRODUCTS  
solution : Check and correct the mismatched data types and formatting in the columns, especially those related to numeric calculations and status indicators. Ensure that 'is_competitor' and 'delete_ind' have consistent Boolean values, and verify URL formatting.

SQL Query:
sql
SELECT * 
FROM SDL_CLAVIS_GB_PRODUCTS
WHERE 
    NOT REGEXP_LIKE(is_competitor, '^(Yes|No)$') OR
    NOT REGEXP_LIKE(delete_ind, '^(Y|N)$') OR
    avail_status NOT IN ('Available', 'Pre-order', 'Out of Stock') OR
    price_currency_symbol IS NULL OR
    observed_price < 0 OR
    diff_from_prev_observed_price_percent < 0 OR
    url NOT LIKE 'http%' OR
    product_image_url NOT LIKE 'http%';
========================================================================================================================================

table_name : SDL_CHS_DSTR  
solution : Correct the negative last_cost and sales figures (month_06, month_12) in the dataset.

SQL Query:
sql
SELECT * 
FROM SDL_CHS_DSTR 
WHERE last_cost < 0 
   OR month_06 < 0 
   OR month_12 < 0;
========================================================================================================================================

table_name : SDL_CSL_UDCDETAILS  
solution : Verify 'distcode', 'masterid', and 'run_id' for inconsistencies or unintended duplicates.

SQL Query:  
sql  
SELECT *  
FROM SDL_CSL_UDCDETAILS  
WHERE distcode = 31  
  AND masterid = 49  
  AND run_id = 50  
  AND crt_dttm = '2023-02-19 11:00:00';
========================================================================================================================================

table_name : SDL_HK_IMS_WINGKEUNG_SEL_OUT  
solution : Ensure 'net_trade_sales' is non-negative and corresponds correctly to 'sales_volume' and 'sales_order_quantity'. Validate data entry for 'net_trade_sales'.

SQL Query:
sql
SELECT *
FROM SDL_HK_IMS_WINGKEUNG_SEL_OUT
WHERE net_trade_sales < 0
   OR net_trade_sales > (sales_volume * local_curr_exch_rate)
   OR sales_order_quantity < 0;
========================================================================================================================================

table_name : SDL_ID_POS_IDM_SELLOUT  
solution : Correct the 'yearmonth' field to follow the 'YYYYMM' format.  
SQL Query:  
sql  
SELECT *  
FROM SDL_ID_POS_IDM_SELLOUT  
WHERE LENGTH(yearmonth) != 6 OR NOT REGEXP_LIKE(yearmonth, '^\d{6}$');
========================================================================================================================================

table_name : SDL_GCPH_CATEGORY  
solution : Correct negative values in 'length', 'net_weight', 'volume', 'gross_weight', 'height', and 'width' fields. 

SQL Query:
sql
SELECT * 
FROM SDL_GCPH_CATEGORY
WHERE length < 0 
   OR net_weight < 0 
   OR volume < 0 
   OR gross_weight < 0 
   OR height < 0 
   OR width < 0;
========================================================================================================================================

table_name : SDL_CHW_ECOMM_DATA  
solution : Correct negative sales_online value to a valid positive number or investigate for data entry error.

SQL Query:
sql
SELECT * 
FROM SDL_CHW_ECOMM_DATA
WHERE sales_online < 0;
========================================================================================================================================

table_name : SDL_ID_POS_DAILY_BASEDLINE_SELLOUT
solution : Validate and correct invalid data entries, such as negative values for quantities, days, and invalid month/year formats.

SQL Query:
sql
SELECT *
FROM SDL_ID_POS_DAILY_BASEDLINE_SELLOUT
WHERE
    plu < 0 OR
    month NOT BETWEEN 1 AND 12 OR
    year < 1900 OR
    qty_trx < 0 OR
    cum_ytm_qty < 0 OR
    promo_qty < 0 OR
    cum_promo_qty < 0 OR
    basedline_total_qty < 0 OR
    cum_basedline_total_qty < 0 OR
    total_days < 0 OR
    cum_total_days < 0 OR
    promo_days < 0 OR
    cum_promo_days < 0 OR
    baselined_total_days < 0 OR
    cum_baselined_total_days < 0 OR
    total_qty_baselined < 0 OR
    indirect_qty_trx < 0 OR
    indirect_cum_qty < 0 OR
    indirect_promo_qty < 0 OR
    indirect_cum_promo_qty < 0 OR
    indirect_basedline_total_qty < 0 OR
    indirect_cum_basedline_total_qty < 0 OR
    indirect_qty_basedlined < 0 OR
    NOT REGEXP_LIKE(yearmonth, '^\d{4}-(0[1-9]|1[0-2])$');
========================================================================================================================================

table_name : SDL_KR_BO_YOUNG_JONG_HAP_LOGISTICS_GT_SELLOUT
solution : Correct negative quantity value to a valid positive number or verify if a return transaction; ensure data integrity and accuracy.

SQL Query:
SELECT *
FROM SDL_KR_BO_YOUNG_JONG_HAP_LOGISTICS_GT_SELLOUT
WHERE qty < 0;
========================================================================================================================================

table_name : SDL_GCCH_CUST_HIER  
solution : Correct negative values for 'tamr_id', 'manualclassificationid', and 'suggestedclassificationscore'. Ensure valid 'origin_entity_id' and 'origin_source_name'. 

SQL Query:
sql
SELECT *
FROM SDL_GCCH_CUST_HIER
WHERE tamr_id < 0
   OR manualclassificationid < 0
   OR suggestedclassificationscore < 0
   OR origin_entity_id IS NULL
   OR origin_source_name IS NULL;
========================================================================================================================================

table_name : SDL_MDS_PH_MSL_HDR  
solution : Ensure 'muid', 'versionname', 'versionflag', 'name', 'code', 'csg_code_code', 'csg_code_name', 'to_salescycle', 'enterusername', 'lastchgusername', and 'validationstatus' are populated correctly; validate 'versionnumber', 'version_id', 'csg_code_id', and 'changetrackingmask' for accuracy.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PH_MSL_HDR 
WHERE (muid IS NULL OR versionname IS NULL OR versionflag IS NULL OR name IS NULL OR code IS NULL OR csg_code_code IS NULL OR csg_code_name IS NULL OR to_salescycle IS NULL OR enterusername IS NULL OR lastchgusername IS NULL OR validationstatus IS NULL) 
OR (versionnumber = 9999 OR version_id = 9999 OR csg_code_id = 3 OR changetrackingmask = 3);
========================================================================================================================================

table_name : SDL_JNJ_CONSUMERREACH_711  
solution : Ensure 'jjskuname' contains valid product names and update 'retailbranch' to a correct format.

SQL Query:
sql
SELECT *
FROM SDL_JNJ_CONSUMERREACH_711
WHERE jjskuname IS NULL OR 
      retailbranch NOT LIKE 'Branch %';
========================================================================================================================================

table_name : PROD_PRODUCT  
solution : Correct negative 'width' and 'maximumorderquantity' values to positive, validate 'islisted', 'isorderable', and 'isreturnable' for logical consistency.

SQL Query:  
sql  
SELECT *  
FROM PROD_PRODUCT  
WHERE width < 0  
   OR maximumorderquantity < 0  
   OR (islisted = 'no' AND isorderable = 'yes');
========================================================================================================================================

table_name : SDL_KR_COUPANG_PRODUCT_SUMMARY_MONTHLY  
solution : Correct 'yearmo' to a valid year-month format, ensure 'run_id' is positive, and verify 'category_depth3' is correctly populated or marked as 'None'.

SQL Query:
sql
SELECT *
FROM SDL_KR_COUPANG_PRODUCT_SUMMARY_MONTHLY
WHERE (yearmo NOT SIMILAR TO '[0-9]{6}' OR CAST(SUBSTRING(yearmo, 1, 4) AS INT) < 2000 OR CAST(SUBSTRING(yearmo, 5, 2) AS INT) > 12)
   OR run_id < 0
   OR category_depth3 IS NULL;
========================================================================================================================================

table_name : SDL_MDS_SG_CUSTOMER_HIERARCHY  
solution : Ensure 'versionname', 'versionnumber', 'version_id', and 'versionflag' are consistent and correctly represent the hierarchy. Validate 'customer_segmentation_level_2_id' for uniqueness and consistency with the corresponding segmentation name.

SQL Query:  
sql
SELECT *  
FROM SDL_MDS_SG_CUSTOMER_HIERARCHY  
WHERE versionname IS NULL  
   OR versionnumber IS NULL  
   OR version_id IS NULL  
   OR versionflag IS NULL  
   OR customer_segmentation_level_2_id IS NULL  
   OR customer_segmentation_level_2_name IS NULL  
   OR customer_segmentation_level_2_id IN (SELECT customer_segmentation_level_2_id  
                                          FROM SDL_MDS_SG_CUSTOMER_HIERARCHY  
                                          GROUP BY customer_segmentation_level_2_id  
                                          HAVING COUNT(*) > 1);
========================================================================================================================================

Since no anomalies were detected in the table 'SDL_IG_INVENTORY_DATA', there are no specific solutions to provide. However, I can provide a sample structure of how the solution should look for a table with detected anomalies.

Sample Output:


table_name : SDL_IG_INVENTORY_DATA
solution : No issues detected, no specific solution required.

SQL Query:
SELECT * FROM SDL_IG_INVENTORY_DATA WHERE <anomaly_condition>;


For future reference, here's a generic Snowflake SQL query template to identify anomalies in data sets. You would need to replace `<anomaly_condition>` with specific conditions relevant to the data you are analyzing:

sql
SELECT * FROM <table_name>
WHERE <anomaly_condition>;


Replace `<table_name>` with the actual table name and `<anomaly_condition>` with specific conditions that identify anomalies, such as missing data, inconsistent values, or out-of-range data.
========================================================================================================================================

I'm sorry, but no specific anomalies were detected based on the data you provided. Please provide details about any anomalies found in other tables, and I'll be happy to assist with solutions and SQL queries for those.
========================================================================================================================================

table_name : SDL_CBD_GT_SALES_REPORT_FACT_TEMP  
solution : Review and correct negative sales_qty, foc_qty, net_price, and net_sales values. Verify if it's a return or error in data entry.

SQL Query:
sql
SELECT *
FROM SDL_CBD_GT_SALES_REPORT_FACT_TEMP
WHERE sales_qty < 0 OR foc_qty < 0 OR net_price < 0 OR net_sales < 0;
========================================================================================================================================

table_name : SDL_DISTRIBUTOR_CUSTOMER_DIM  
solution : Ensure numeric columns are correctly defined and populated for anomaly detection.

SQL Query:
sql
SELECT COLUMN_NAME
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'SDL_DISTRIBUTOR_CUSTOMER_DIM'
AND DATA_TYPE NOT IN ('NUMBER', 'FLOAT', 'INTEGER');
========================================================================================================================================

table_name : SDL_AU_DSTR_CHS_HEADER  
solution : Set 'soh_amt' to be equal to 'last_cost' multiplied by 'soh_qty' for consistency.  

SQL Query:  
sql  
SELECT *  
FROM SDL_AU_DSTR_CHS_HEADER  
WHERE soh_amt != (last_cost * soh_qty)  
    OR soh_amt < 0  
    OR soh_qty < 0;
========================================================================================================================================

table_name : SDL_MDS_SG_PS_WEIGHTS  
solution : Update the 'weight' value to a valid non-negative value based on business rules or correct data entry mistake.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_SG_PS_WEIGHTS 
WHERE weight < 0;
========================================================================================================================================

table_name : SDL_KR_COUPANG_PRODUCT_RANKING_MONTHLY
solution : No issues detected.

SQL Query:
sql
-- This query checks for anomalies in the 'SDL_KR_COUPANG_PRODUCT_RANKING_MONTHLY' table.
-- Since no anomalies were detected, the focus is on retrieving relevant data without anomalies.
SELECT *
FROM SDL_KR_COUPANG_PRODUCT_RANKING_MONTHLY
WHERE 1 = 1; -- Ensure the query runs but does not filter out any records
========================================================================================================================================

table_name : SDL_CSL_RETAILERHIERARCHY  
solution : Correct negative turnover value to a valid positive figure or investigate for data entry error.

SQL Query:
sql
SELECT * 
FROM SDL_CSL_RETAILERHIERARCHY 
WHERE turnover < 0;
========================================================================================================================================

table_name : SDL_MDS_SG_PRODUCT_HIERARCHY
solution : Adjust negative values for id, versionnumber, and lastchgversionnumber. Ensure enterusername and lastchgusername are not None. Validate versionflag and validationstatus.

SQL Query:
sql
SELECT *
FROM SDL_MDS_SG_PRODUCT_HIERARCHY
WHERE id < 0 
   OR versionnumber < 0 
   OR lastchgversionnumber < 0 
   OR enterusername IS NULL 
   OR lastchgusername IS NULL 
   OR versionflag IS NULL 
   OR validationstatus IS NULL;
========================================================================================================================================

table_name : SDL_MDS_VN_GT_MSL_SHOPTYPE_MAPPING  
solution : Ensure 'versionflag' is set to 'active' and 'validationstatus' is set to 'Valid' for valid entries, and verify data consistency.

SQL Query:
sql
SELECT * FROM SDL_MDS_VN_GT_MSL_SHOPTYPE_MAPPING
WHERE validationstatus = 'Invalid' OR versionflag = 'inactive';
========================================================================================================================================

table_name : PRODTR_PRODUCTTRANSLATION  
solution : Set 'language' to the correct value for the region 'Australia'.

SQL Query:
sql
SELECT * 
FROM PRODTR_PRODUCTTRANSLATION 
WHERE region = 'Australia' 
  AND language IS NULL;
========================================================================================================================================

table_name : SDL_KR_COUPANG_BRAND_RANKING
solution : Investigate and correct the negative run_id value; ensure all run_id entries are non-negative integers.

SQL Query:
sql
SELECT *
FROM SDL_KR_COUPANG_BRAND_RANKING
WHERE run_id < 0;
========================================================================================================================================

table_name : SDL_KR_COUPANG_PRODUCTSALEREPORT  
solution : Correct negative cost_of_purchase value to reflect actual cost.

SQL Query:
sql
SELECT * 
FROM SDL_KR_COUPANG_PRODUCTSALEREPORT 
WHERE cost_of_purchase < 0;
========================================================================================================================================

table_name : SDL_ECOMMERCE_6PAI  
solution : Investigate the significant negative sales growth for Franchise1 in the North USA market for January 20212. Verify the correctness of the data entry for the year and consider potential external factors affecting this market segment.

SQL Query:
sql
SELECT *
FROM SDL_ECOMMERCE_6PAI
WHERE score_weighted < 0 OR score_non_weighted < 0 OR gap_vs_pm < 0 OR gap_vs_p3m < 0 OR gap_vs_plan < 0;
========================================================================================================================================

table_name : SDL_POP6_SG_POP_LISTS  
solution : Correct the negative 'status' value to a valid positive integer or the appropriate status code.

SQL Query:  
sql
SELECT *  
FROM SDL_POP6_SG_POP_LISTS  
WHERE status < 0;
========================================================================================================================================

table_name: KPI2DATA_MAPPING  
solution: Verify and correct the 'value' for 'Impressions' as it is anomalously high for the given period. Check data source or business logic for accuracy.

SQL Query:  
sql
SELECT *  
FROM KPI2DATA_MAPPING  
WHERE kpi_name = 'Impressions' AND value > 900000 AND start_date = '2023-08-01' AND end_date = '2023-08-31';
========================================================================================================================================

table_name : SDL_CSL_TBL_SCHEMEWISE_APNO
solution : No solution needed as no anomalies were detected.

SQL Query:
SELECT COUNT(*) AS anomaly_count
FROM SDL_CSL_TBL_SCHEMEWISE_APNO
HAVING anomaly_count = 0;
========================================================================================================================================

table_name : SDL_MY_CUSTOMER_DIM  
solution : Verify and correct the 'dstrbtr_grp_cd' and 'dstrbtr_grp_nm' to ensure they are consistent across records. Check if 'rdd_ind' should be 'Y' based on 'cdl_dttm' and 'curr_dt' values.

SQL Query:
sql
SELECT *
FROM SDL_MY_CUSTOMER_DIM
WHERE (dstrbtr_grp_cd != 'B50' OR dstrbtr_grp_nm != 'GroupB')
   OR (rdd_ind = 'N' AND cdl_dttm <= curr_dt);
========================================================================================================================================

table_name : SDL_POP6_SG_EXECUTED_VISITS
solution : Correct the invalid latitude and longitude values to fall within the valid range for geographic coordinates.

SQL Query:
sql
SELECT *
FROM SDL_POP6_SG_EXECUTED_VISITS
WHERE check_in_longitude NOT BETWEEN -180 AND 180
   OR check_in_latitude NOT BETWEEN -90 AND 90
   OR check_out_longitude NOT BETWEEN -180 AND 180
   OR check_out_latitude NOT BETWEEN -90 AND 90;
========================================================================================================================================

table_name : SDL_MDS_PH_DISTRIBUTOR_PRODUCT  
solution : Update the 'promoendperiod' to a date later than 'promostartperiod' to correct the anomalous date sequence.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PH_DISTRIBUTOR_PRODUCT
WHERE promostartperiod > promoendperiod;
========================================================================================================================================

table_name : SDL_CSL_ORDERBOOKING  
solution : Correct the 'orddlvdate' to be after 'orderdate', fix negative 'ordtotalamt' and 'prdgrossamt', and adjust 'prdselrate' to ensure logical pricing.

SQL Query:
sql
SELECT * 
FROM SDL_CSL_ORDERBOOKING
WHERE orddlvdate < orderdate 
   OR ordtotalamt < 0
   OR prdgrossamt < 0
   OR prdselrate < 0;
========================================================================================================================================

table_name : SDL_MY_CIW_MAP
solution : Ensure 'ciw_buckt1' and 'acct_desc' columns have non-null values for all rows.

SQL Query:
sql
SELECT *
FROM SDL_MY_CIW_MAP
WHERE ciw_buckt1 IS NULL OR acct_desc IS NULL;
========================================================================================================================================

table_name : SDL_JNJ_OSA_OOS_REPORT  
solution : Correct the 'run_id' value to a valid positive integer and verify if 'oos_reason' should be populated when 'oos' is 'No'. Ensure 'week' aligns with 'osa_oos_date'.

SQL Query:
sql
SELECT *
FROM SDL_JNJ_OSA_OOS_REPORT
WHERE run_id < 0 
   OR (oos = 'No' AND oos_reason IS NOT NULL)
   OR DATE_PART('week', osa_oos_date) != week;
========================================================================================================================================

table_name : SDL_MDS_VN_PS_WEIGHTS
solution : Correct the 'versionnumber' from -2 to a valid positive integer.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_VN_PS_WEIGHTS 
WHERE versionnumber < 0;
========================================================================================================================================

table_name : SDL_DSTR_COLES_INV  
solution : Verify inventory calculation logic for closing_soh fields as all values are identical and unusually high.  

SQL Query:  
sql  
SELECT *  
FROM SDL_DSTR_COLES_INV  
WHERE closing_soh_nic = closing_soh_qty_ctns  
AND closing_soh_qty_ctns = closing_soh_qty_octns  
AND closing_soh_qty_octns = closing_soh_qty_unit  
AND closing_soh_qty_unit = dc_days_on_hand;
========================================================================================================================================

table_name : SDL_AU_DSTR_API_HEADER  
solution : Verify the 'cost_price' for the product with article_id 11 as it seems unusually high; consider reviewing vendor pricing or data entry errors.

SQL Query:
sql
SELECT *
FROM SDL_AU_DSTR_API_HEADER
WHERE article_id = 11
AND (cost_price > 5000 OR cost_price IS NULL);
========================================================================================================================================

table_name : SDL_MDS_MY_PS_MSL  
solution : Review and correct the 'versionnumber' to ensure it matches the expected sequence or format.

SQL Query:
sql
SELECT * FROM SDL_MDS_MY_PS_MSL
WHERE versionnumber = 50 AND versionname = 'v25.1' AND version_id = 25;
========================================================================================================================================

table_name : SDL_CSL_SALESMANMASTER
solution : Update 'distcode' where it is None and ensure 'smemail' is filled appropriately.

SQL Query:
SELECT *
FROM SDL_CSL_SALESMANMASTER
WHERE distcode IS NULL OR smemail IS NULL;
========================================================================================================================================

table_name : SDL_DISTRIBUTOR_IVY_ORDER  
solution : Correct latitude and longitude values; they must be within valid ranges.

SQL Query:
sql
SELECT *
FROM SDL_DISTRIBUTOR_IVY_ORDER
WHERE order_latitude < -90 OR order_latitude > 90
   OR order_longitude < -180 OR order_longitude > 180;
========================================================================================================================================

table_name : SDL_POP6_SG_DISPLAY_PLANS  
solution : Adjust the 'status' and 'required_number_of_displays' to non-negative values. Ensure business logic for these fields is applied correctly.

SQL Query:
sql
SELECT * 
FROM SDL_POP6_SG_DISPLAY_PLANS 
WHERE status < 0 OR required_number_of_displays < 0;
========================================================================================================================================

table_name : SDL_POP6_SG_PRODUCTS  
solution : Correct negative values in 'status', 'unit_price', 'display_order', 'largest_uom_quantity', 'middle_uom_quantity', and 'smallest_uom_quantity'. Ensure 'run_id' is positive.  

SQL Query:  
sql
SELECT * 
FROM SDL_POP6_SG_PRODUCTS 
WHERE status < 0 
   OR unit_price < 0 
   OR display_order < 0 
   OR largest_uom_quantity < 0 
   OR middle_uom_quantity < 0 
   OR smallest_uom_quantity < 0 
   OR run_id < 0;
========================================================================================================================================

table_name : SDL_POP6_SG_PRODUCT_ATTRIBUTE_AUDITS
solution : Validate the presence of audit_form_id, ensure field dependency consistency, and verify product attribute details.

SQL Query:
sql
SELECT *
FROM SDL_POP6_SG_PRODUCT_ATTRIBUTE_AUDITS
WHERE audit_form_id IS NULL
   OR dependent_on_field_id IS NOT NULL AND field_id IS NULL
   OR product_attribute_id IS NULL 
   OR product_attribute_value_id IS NULL;
========================================================================================================================================

table_name : SDL_ID_POS_DIAMOND_SELLOUT
solution : Correct the 'qty' value to a positive number; negative quantities are not valid for sales.

SQL Query:
sql
SELECT * 
FROM SDL_ID_POS_DIAMOND_SELLOUT
WHERE qty < 0;
========================================================================================================================================

table_name : SDL_MDS_VN_PRICE_PRODUCTS  
solution : Correct 'lastchgversionnumber' to be an integer, as it currently appears as a decimal.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_VN_PRICE_PRODUCTS
WHERE lastchgversionnumber != FLOOR(lastchgversionnumber);
========================================================================================================================================

table_name : SDL_SPIRAL_MTI_OFFTAKE
solution : Correct the quantity, amount, and amountusd fields for the anomalous row as they contain excessively large values that are likely incorrect.

SQL Query:
SELECT *
FROM SDL_SPIRAL_MTI_OFFTAKE
WHERE quantity > 1000000 OR amount > 1000000 OR amountusd > 1000000;
========================================================================================================================================

table_name : SDL_API_DSTR
solution : Adjust negative values in 'month_13' and 'dc_soo_qty' to address logical errors in inventory and sales data.

SQL Query:
sql
SELECT *
FROM SDL_API_DSTR
WHERE month_13 < 0 OR dc_soo_qty < 0;
========================================================================================================================================

table_name : SDL_LA_GT_ROUTE_DETAIL_TEMP
solution : Update 'created_date' to match 'file_upload_date' if it is intended to be on or before the 'file_upload_date', or verify data entry for correctness.

SQL Query:
SELECT *
FROM SDL_LA_GT_ROUTE_DETAIL_TEMP
WHERE created_date > file_upload_date;
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_ECOM_NTS
solution : Correct the 'year' value to a valid year and check the 'brand' field for missing data.

SQL Query:
sql
SELECT *
FROM SDL_MDS_PACIFIC_ECOM_NTS
WHERE year > YEAR(CURRENT_DATE) OR brand IS NULL;
========================================================================================================================================

table_name : SDL_POP6_SG_POPS  
solution : Correct the longitude and latitude values for 'popdb_id' POP048 to valid geographical coordinates. Longitude and latitude should be within the range of -180 to 180 and -90 to 90 respectively.

SQL Query:
sql
SELECT * 
FROM SDL_POP6_SG_POPS
WHERE longitude NOT BETWEEN -180 AND 180
   OR latitude NOT BETWEEN -90 AND 90;
========================================================================================================================================

table_name: SDL_DSTR_WOOLWORTH_INV  
solution: Correct invalid negative values for lead time (lt), stock on hand (soh_oms), demand (demand_oms), and other relevant metrics. Ensure article description is not null. Review replenishment strategy and demand forecasting. Validate data entry processes and implement data validation checks.

SQL Query:
sql
SELECT *
FROM SDL_DSTR_WOOLWORTH_INV
WHERE lt < 0 
   OR soh_oms < 0 
   OR demand_oms < 0 
   OR article_code IS NULL 
   OR articledesc IS NULL
   OR cons_days_oos < 0
   OR total_wholesale_demand_om < 0;
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_COGS_MASTER  
solution : Ensure that 'au_cogs_per_unit' and 'nz_cogs_per_unit' have consistent positive values, and correct 'nz_cogs_per_unit' for sku 'SKU50' in 2023.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PACIFIC_COGS_MASTER 
WHERE (au_cogs_per_unit < 0 OR nz_cogs_per_unit < 0)
AND sku = 'SKU50' 
AND sku_year = 2023;
========================================================================================================================================

table_name : SDL_MDS_SG_PS_TARGETS
solution : Review the 'version_id' and 'versionnumber' fields for consistency as they should typically be aligned. Ensure 'enterdatetime' and 'lastchgdatetime' accurately reflect the timing of changes.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_SG_PS_TARGETS
WHERE version_id <> versionnumber 
   OR enterdatetime <> lastchgdatetime;
========================================================================================================================================

table_name : SDL_MDS_PH_CLOBOTICS_SOS_REF
solution : Update the 'validationstatus' to 'Valid' if the data is confirmed correct; otherwise, investigate and correct any underlying data issues.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PH_CLOBOTICS_SOS_REF
WHERE validationstatus = 'Invalid';
========================================================================================================================================

table_name : SDL_MDS_PH_POS_PRICELIST  
solution : Correct the 'yearmo' to a valid format (e.g., 2023-12). Update 'listpricecase', 'listpricedz', and 'listpriceunit' to positive values.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PH_POS_PRICELIST 
WHERE yearmo NOT LIKE '____-__' 
   OR listpricecase < 0 
   OR listpricedz < 0 
   OR listpriceunit < 0;
========================================================================================================================================

table_name : SDL_ALL_DISTRIBUTOR_SELLOUT_SALES_FACT  
solution : Investigate negative sales quantity and ensure return quantity is consistent with sales records. Validate transaction details with distributor D049.

SQL Query:
sql
SELECT * 
FROM SDL_ALL_DISTRIBUTOR_SELLOUT_SALES_FACT 
WHERE sls_qty < 0 OR rtrn_qty > sls_qty;
========================================================================================================================================

table_name : SDL_MDS_VN_POS_PRODUCTS  
solution : Ensure unique identifiers for 'muid' and validate against negative 'changetrackingmask'.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_VN_POS_PRODUCTS 
WHERE muid = 'duplicate-muid-1' 
   OR changetrackingmask < 0;
========================================================================================================================================

table_name : SDL_DISTRIBUTOR_IVY_INVENTORY
solution : Verify batch code BATCH048 for correct quantity or data entry errors.

SQL Query:
sql
SELECT distributor_code, warehouse_code, product_code, batch_code, batch_expiry_date, uom, qty, cdl_dttm, run_id, file_name
FROM SDL_DISTRIBUTOR_IVY_INVENTORY
WHERE batch_code = 'BATCH048' AND qty = 2000;
========================================================================================================================================

table_name : SDL_ID_POS_DAILY_IDM_SELLOUT  
solution : Correct the negative value in the 'value' column for the specific row and verify data entry processes.

SQL Query:
sql
SELECT * 
FROM SDL_ID_POS_DAILY_IDM_SELLOUT
WHERE value < 0;
========================================================================================================================================

table_name: SDL_MDS_PACIFIC_PRODUCT_MAPPING_COLES  
solution: Update 'versionnumber' to a positive value as negative values are not valid for version numbers.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PACIFIC_PRODUCT_MAPPING_COLES
WHERE versionnumber < 0;
========================================================================================================================================

table_name : SDL_MDS_MY_ECOM_PRODUCT
solution : The anomaly detected in the 'SDL_MDS_MY_ECOM_PRODUCT' table may be due to an unusually high 'versionnumber' which is set to 99999. Consider verifying the correct value for 'versionnumber' and ensure it aligns with the expected range of values.

SQL Query:
sql
SELECT *
FROM SDL_MDS_MY_ECOM_PRODUCT
WHERE versionnumber > 10000;  -- Adjust the threshold based on expected versioning logic
========================================================================================================================================

table_name : SDL_MDS_SG_ECOM_PRODUCT
solution : Verify and correct the 'versionflag' to ensure it reflects the correct status, and confirm that 'upc' follows the EAN-13 format.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_SG_ECOM_PRODUCT
WHERE LENGTH(upc) != 13 
   OR versionflag NOT IN ('active', 'inactive');
========================================================================================================================================

table_name : ITG_SFA_PM  
solution : Validate and correct the 'filename' and 'path' fields to ensure they follow the required format and directory structure.

SQL Query:
sql
SELECT * 
FROM ITG_SFA_PM 
WHERE filename LIKE 'invalid_%' OR path LIKE '/invalid/%';
========================================================================================================================================

table_name : SDL_ECOM_GMV_SHOPEE
solution : Correct negative values in 'gross_sales', 'gross_units_sold', and 'product_views'. Ensure growth rates are calculated correctly based on positive baseline values.

SQL Query:
sql
SELECT *
FROM SDL_ECOM_GMV_SHOPEE
WHERE gross_sales < 0 
   OR gross_units_sold < 0 
   OR product_views < 0 
   OR gross_sales_growth < 0 
   OR gross_orders_growth < 0 
   OR gross_units_sold_growth < 0 
   OR product_views_growth < 0 
   OR gross_order_conversion_rate_growth < 0 
   OR gross_item_conversion_rate_growth < 0;
========================================================================================================================================

table_name : SDL_HK_WINGKEUNG_INDIRECT_SALES_REP_ROUTE_PLAN  
solution : Correct the 'visit_freq' to a realistic value and verify 'week' value is valid within a year.

SQL Query:
sql
SELECT *
FROM SDL_HK_WINGKEUNG_INDIRECT_SALES_REP_ROUTE_PLAN
WHERE visit_freq > 7 OR week NOT BETWEEN 1 AND 52;
========================================================================================================================================

table_name : SDL_CSL_CLASSMASTER
solution : Verify and update the 'availabilty' to match expected values, ensure 'classcode' and 'classdesc' are correctly entered, and check 'turnover' for accuracy.

SQL Query:
sql
SELECT *
FROM SDL_CSL_CLASSMASTER
WHERE (availabilty IS NULL OR availabilty < 0)
   OR (classcode IS NULL OR classcode = '')
   OR (classdesc IS NULL OR classdesc = '')
   OR (turnover IS NULL OR turnover < 0);
========================================================================================================================================

table_name : SDL_ECOM_SEARCH_ADS_BY_DATE  
solution : Investigate the unusually high sales to orders ratio and ensure the sales_usd and sales_lcy values are correct. Validate the conversion of local currency to USD, and check for any data entry errors in the number of unique visitors and buyers.

SQL Query:
sql
SELECT *
FROM SDL_ECOM_SEARCH_ADS_BY_DATE
WHERE (sales_usd / NULLIF(orders, 0)) > 10
   OR (sales_lcy / NULLIF(orders, 0)) > 20
   OR units_sold > visits
   OR buyers > unique_visitors
   OR new_buyers > buyers
   OR item_conversion_rate > 100;
========================================================================================================================================

table_name: SDL_MDS_VN_SKU_BENCHMARKS  
solution: The 'valid_to' date (2024-05-31) is earlier than the 'valid_from' date (2024-08-01), which is incorrect. Correct the dates to ensure 'valid_to' is not before 'valid_from'.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_VN_SKU_BENCHMARKS 
WHERE valid_to < valid_from;
========================================================================================================================================

table_name : SDL_ECOM_AMS
solution : No anomalies detected.

SQL Query:
SELECT * FROM SDL_ECOM_AMS WHERE 1=0;
========================================================================================================================================

table_name : SDL_MDS_MY_GT_PRODUCT_MAPPING
solution : The 'id' value of -1 is invalid; it should be a positive integer. Update the 'id' to a valid unique identifier.

SQL Query:
sql
SELECT *
FROM SDL_MDS_MY_GT_PRODUCT_MAPPING
WHERE id < 0;
========================================================================================================================================

table_name : SDL_KR_COUPANG_PRODUCT_SUMMARY_WEEKLY  
solution : Review and correct the ranking value for the 'Rolex Luxury Watch' entry; the current ranking '9999999999' is likely incorrect or a data entry error. Verify the correct ranking from a reliable source and update the database accordingly.

SQL Query:
sql
SELECT * 
FROM SDL_KR_COUPANG_PRODUCT_SUMMARY_WEEKLY
WHERE LENGTH(CAST(ranking AS STRING)) > 10;
========================================================================================================================================

table_name : SDL_MDS_SG_SKU_BENCHMARKS  
solution : Correct the negative values for 'variance', 'jj_target', and 'comp_packsize' fields in the anomalous row.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_SG_SKU_BENCHMARKS 
WHERE variance < 0 OR jj_target < 0 OR comp_packsize < 0;
========================================================================================================================================

Since no anomalies were detected in the table 'SDL_MDS_PACIFIC_CUST_CIW_PLAN', there is no solution needed.

table_name : SDL_MDS_PACIFIC_CUST_CIW_PLAN
solution : No solution required as no anomalies were detected.

SQL Query:
sql
SELECT * FROM SDL_MDS_PACIFIC_CUST_CIW_PLAN WHERE FALSE;
========================================================================================================================================

table_name : SDL_MARKET_SHARE_QSD  
solution : Correct the negative value in the 'value' column to reflect an accurate data point.

SQL Query:
sql
SELECT * 
FROM SDL_MARKET_SHARE_QSD 
WHERE value < 0;
========================================================================================================================================

table_name: SDL_MDS_VN_CUSTOMER_SALES_ORGANIZATION  
solution: Address negative values in 'mti_code'; verify and correct 'versionflag' and 'status' values; ensure 'validationstatus' is 'Valid'.

SQL Query:  
sql
SELECT * FROM SDL_MDS_VN_CUSTOMER_SALES_ORGANIZATION  
WHERE mti_code < 0 OR versionflag = 'Inactive' OR status = 'Inactive' OR validationstatus = 'Invalid';
========================================================================================================================================

table_name : SDL_POP6_SG_PLANNED_VISITS  
solution : Verify the planned_visit_date against valid date ranges and ensure consistent data entry for pop_code and pop_name.  

SQL Query:
sql
SELECT * 
FROM SDL_POP6_SG_PLANNED_VISITS 
WHERE planned_visit_date < '2023-01-01' OR planned_visit_date > '2023-12-31' 
OR pop_code IS NULL 
OR pop_name IS NULL;
========================================================================================================================================

table_name : MS_MASTERSURVEY
solution : No action required as no anomalies were detected.

SQL Query:
SELECT * FROM MS_MASTERSURVEY WHERE 1=0;
========================================================================================================================================

table_name : SDL_MDS_LOG
solution : Add numeric data columns for anomaly detection, like 'anomaly_score'.

SQL Query:
sql
SELECT *
FROM SDL_MDS_LOG
WHERE TRY_TO_NUMBER(<column_name>) IS NULL
========================================================================================================================================

table_name : SDL_MDS_VN_ECOM_PRODUCT
solution : Correct the 'version_id' from negative to a valid positive integer.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_VN_ECOM_PRODUCT
WHERE version_id < 0;
========================================================================================================================================

table_name : SDL_MDS_VN_DISTRIBUTOR_CUSTOMERS
solution : Ensure all required fields have appropriate values. Update 'versionnumber', 'version_id', 'name', 'account_id', 'enterversionnumber', 'lastchgversionnumber' where missing or incorrect. Correct 'group_account_id' to be non-negative and valid.

SQL Query:
sql
SELECT *
FROM SDL_MDS_VN_DISTRIBUTOR_CUSTOMERS
WHERE versionnumber IS NULL
   OR version_id IS NULL
   OR name IS NULL
   OR account_id IS NULL
   OR enterversionnumber IS NULL
   OR lastchgversionnumber IS NULL
   OR group_account_id < 0;
========================================================================================================================================

table_name : SDL_COMPETITIVE_BANNER_GROUP
solution : Correct the negative dollar value to ensure accurate financial reporting.

SQL Query:
SELECT * 
FROM SDL_COMPETITIVE_BANNER_GROUP
WHERE dollar < 0;
========================================================================================================================================

table_name : SDL_LA_GT_ROUTE_DETAIL  
solution : Validate and correct the negative route_no value for route_id 'route3'.

SQL Query:
sql
SELECT *
FROM SDL_LA_GT_ROUTE_DETAIL
WHERE route_no < 0;
========================================================================================================================================

table_name : SDL_MDS_APAC_DCL_PRODUCTS
solution : Correct the negative values for 'id', 'changetrackingmask', 'sales channel_id', and 'srp usd'. Ensure valid price for 'srp usd'.

SQL Query:
sql
SELECT *
FROM SDL_MDS_APAC_DCL_PRODUCTS
WHERE id < 0 
   OR changetrackingmask < 0 
   OR "sales channel_id" < 0 
   OR "srp usd" < 0;
========================================================================================================================================

table_name : SDL_MDS_PH_ISE_PARENT  
solution : Correct 'versionnumber' to a valid positive value, ensure 'versionname' is not None, correct 'changetrackingmask' to a valid value.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PH_ISE_PARENT
WHERE versionnumber < 0 
   OR versionname IS NULL 
   OR changetrackingmask < 0;
========================================================================================================================================

table_name : SDL_HK_IMS_WINGKEUNG_INV
solution : Investigate the negative 'amount' value for 'prod_code' PROD171 and correct it if necessary. Ensure 'closing' and 'amount' values are consistent.

SQL Query:
sql
SELECT * 
FROM SDL_HK_IMS_WINGKEUNG_INV 
WHERE amount < 0;
========================================================================================================================================

table_name : SDL_MDS_VN_GT_GTS_RATIO  
solution : Check and correct the 'percentage' value for id 50; it seems unusually high (500.0).

SQL Query:
sql
SELECT * 
FROM SDL_MDS_VN_GT_GTS_RATIO 
WHERE percentage > 100;
========================================================================================================================================

table_name : SDL_IRI_SCAN_SALES  
solution : Correct 'numeric_distribution', 'weighted_distribution', and 'store_count_where_scanned' as they have non-logical values (e.g., negative or excessively high).

SQL Query:  
sql
SELECT *  
FROM SDL_IRI_SCAN_SALES  
WHERE numeric_distribution < 0  
   OR weighted_distribution < 0  
   OR store_count_where_scanned < 0  
   OR numeric_distribution > 100  
   OR weighted_distribution > 100  
   OR store_count_where_scanned > 100;
========================================================================================================================================

table_name : SDL_KR_COUPANG_PRODUCT_RANKING_DAILY  
solution : Correct the 'yearmo' value from 20235 to the appropriate format, likely '202310'.

SQL Query:
sql
SELECT * 
FROM SDL_KR_COUPANG_PRODUCT_RANKING_DAILY 
WHERE LENGTH(yearmo) != 6 OR yearmo NOT LIKE '2023%';
========================================================================================================================================

table_name : SDL_MDS_VN_PS_STORE_TAGGING
solution : Update the changetrackingmask to a valid positive value, ensure versionnumber is unique, and verify the correctness of validationstatus.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_VN_PS_STORE_TAGGING
WHERE versionnumber = 99999
   OR changetrackingmask = -1
   OR validationstatus = 'Not Validated';
========================================================================================================================================

table_name : SDL_CSL_SCHEMEUTILIZATION
solution : Correct negative values for 'schlinecount' and 'billedqty'. Validate 'schemeutilizedqty' against 'billedqty'.

SQL Query:
sql
SELECT *
FROM SDL_CSL_SCHEMEUTILIZATION
WHERE schlinecount < 0 OR billedqty < 0 OR schemeutilizedqty < 0;
========================================================================================================================================

table_name : SDL_FPA_PROFIT_CENTER_MAPPING
solution : Ensure numeric data types are used for columns intended for quantitative analysis.

SQL Query:
sql
SELECT COLUMN_NAME, DATA_TYPE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'SDL_FPA_PROFIT_CENTER_MAPPING'
AND DATA_TYPE NOT IN ('NUMBER', 'FLOAT', 'INTEGER');
========================================================================================================================================

table_name : SDL_MDS_PH_NPI_PEG_ITEM  
solution : Correct negative values in 'id', 'salescycle', and 'peg_itemcode_code'.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PH_NPI_PEG_ITEM 
WHERE id < 0 OR salescycle < 0 OR peg_itemcode_code < 0;
========================================================================================================================================

table_name : SDL_MDS_MY_GT_OUTLETATTRIBUTES
solution : The 'cust_year' column has an invalid value of '9999'. Update it to a valid year.

SQL Query:
SELECT * 
FROM SDL_MDS_MY_GT_OUTLETATTRIBUTES
WHERE cust_year = 9999;
========================================================================================================================================

table_name : SDL_JNJ_MER_SHARE_OF_SHELF  
solution : Correct the 'run_id' to a valid integer and update 'file_name' to not be None for the row with store_id 'S003'.

SQL Query:
sql
SELECT *
FROM SDL_JNJ_MER_SHARE_OF_SHELF
WHERE run_id NOT BETWEEN 1 AND 9999999998
   OR file_name IS NULL;
========================================================================================================================================

table_name : SDL_ECOM_CPAS  
solution : Verify shop49's spending of 3100.0 on 2023-03-03 for errors or validation issues in file49.csv.

SQL Query:
sql
SELECT *
FROM SDL_ECOM_CPAS
WHERE date = '2023-03-03' AND shop = 'shop49' AND spending = 3100.0;
========================================================================================================================================

table_name : SDL_LA_GT_ROUTE_HEADER_TEMP
solution : Ensure that numeric columns in the table are properly defined with numeric data types and that data is correctly populated.

SQL Query:
SELECT * 
FROM SDL_LA_GT_ROUTE_HEADER_TEMP 
WHERE TRY_TO_NUMBER(<column_name>) IS NULL AND <column_name> IS NOT NULL;
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_PERENSO_CYCLE_DATES
solution : The anomaly is due to an incorrect cycle_year value of 9999. Update cycle_year to the correct year, 2023.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PACIFIC_PERENSO_CYCLE_DATES
WHERE cycle_year = 9999;
========================================================================================================================================

table_name : SDL_GCGH_GEO_HIER
solution : Add numeric data columns for effective anomaly detection.

SQL Query:
sql
SELECT *
FROM SDL_GCGH_GEO_HIER
WHERE NOT EXISTS (
    SELECT 1
    FROM SDL_GCGH_GEO_HIER
    WHERE <numeric_column> IS NOT NULL
);
========================================================================================================================================

table_name : SDL_ID_MDS_LOG  
solution : Ensure numeric data types are used for fields required for anomaly detection.

SQL Query:  
sql
SELECT *  
FROM SDL_ID_MDS_LOG  
WHERE TRY_TO_NUMBER(column_name) IS NULL;
========================================================================================================================================

table_name : SDL_CSL_SALESINVOICEORDERS
solution : Investigate the negative run_id (-22) and correct it to a valid positive integer. Confirm the uploadflag is accurate and adjust if necessary.

SQL Query:
sql
SELECT *
FROM SDL_CSL_SALESINVOICEORDERS
WHERE run_id < 0;
========================================================================================================================================

table_name : SDL_ID_POS_DAILY_SAT_SELLOUT  
solution : Verify if the 'value' is correct for the 'Return' type; if so, ensure it is accurately recorded, otherwise correct the anomaly.

SQL Query:  
sql
SELECT *  
FROM SDL_ID_POS_DAILY_SAT_SELLOUT  
WHERE type = 'Return'  
AND value < 0 OR value IS NULL;
========================================================================================================================================

table_name : SDL_LA_GT_INVENTORY_FACT  
solution : Correct the negative 'qty' and 'amount' for product P047, confirm batchno and expirydate with distributor D004.  

SQL Query:  
sql  
SELECT *  
FROM SDL_LA_GT_INVENTORY_FACT  
WHERE qty < 0 OR amount < 0;
========================================================================================================================================

table_name : SDL_CUSTOMERPL_STDCOST_2022  
solution : Correct negative quantity for material MAT032; check for data entry errors.

SQL Query:
sql
SELECT *
FROM SDL_CUSTOMERPL_STDCOST_2022
WHERE qty < 0;
========================================================================================================================================

table_name : SDL_LA_GT_SCHEDULE
solution : Ensure numeric data fields are populated for anomaly detection.

SQL Query:
sql
SELECT *
FROM SDL_LA_GT_SCHEDULE
WHERE NOT EXISTS (
    SELECT * FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'SDL_LA_GT_SCHEDULE'
    AND DATA_TYPE IN ('NUMBER', 'FLOAT', 'DECIMAL')
)
========================================================================================================================================

table_name : SDL_ALL_DISTRIBUTOR_SELLIN_SALES_FACT
solution : Correct the negative numerator value and verify source data for accuracy.

SQL Query:
sql
SELECT *
FROM SDL_ALL_DISTRIBUTOR_SELLIN_SALES_FACT
WHERE numerator < 0;
========================================================================================================================================

table_name : SDL_HK_POS_SCORECARD_MANNINGS
solution : Correct negative sales quantity and ensure alignment with sales value.

SQL Query:
sql
SELECT 
    vendorid, 
    vendordesc, 
    brand, 
    productid, 
    productdesc, 
    date, 
    salesqty, 
    salesvalue, 
    filename, 
    run_id, 
    crt_dttm
FROM 
    SDL_HK_POS_SCORECARD_MANNINGS
WHERE 
    salesqty < 0;
========================================================================================================================================

table_name : SDL_POP6_SG_PRODUCT_LISTS_ALLOCATION  
solution : Verify 'product_group_status' and 'product_list_status' to ensure they adhere to defined status codes. Check 'run_id' for validity as negative values may indicate an error.  

SQL Query:  
sql  
SELECT *  
FROM SDL_POP6_SG_PRODUCT_LISTS_ALLOCATION  
WHERE product_group_status NOT IN (SELECT DISTINCT product_group_status FROM valid_status_codes)  
   OR product_list_status NOT IN (SELECT DISTINCT product_list_status FROM valid_status_codes)  
   OR run_id < 0;
========================================================================================================================================

table_name : SDL_KR_COUPANG_CUSTOMER_BRAND_TREND
solution : Validate and correct negative values in user count and sales amount fields. Ensure data integrity by setting minimum thresholds or using absolute values where applicable.

SQL Query:
sql
SELECT *
FROM SDL_KR_COUPANG_CUSTOMER_BRAND_TREND
WHERE new_user_count < 0 
   OR curr_user_count < 0 
   OR tot_user_count < 0 
   OR new_user_sales_amt < 0 
   OR curr_user_sales_amt < 0 
   OR new_user_avg_product_sales_price < 0 
   OR curr_user_avg_product_sales_price < 0 
   OR tot_user_avg_product_sales_price < 0;
========================================================================================================================================

table_name : SDL_MDS_PH_ISE_SOS_TARGETS
solution : Correct the 'versionnumber' to a valid positive integer.

SQL Query:
sql
SELECT *
FROM SDL_MDS_PH_ISE_SOS_TARGETS
WHERE versionnumber < 0;
========================================================================================================================================

table_name : SDL_ID_POS_GUARDIAN_STOCK  
solution : Verify and correct the 'soh_stores' and 'soh_dc' fields for article 'QQ789' to ensure stock levels reflect actual inventory.  

SQL Query:  
sql  
SELECT *  
FROM SDL_ID_POS_GUARDIAN_STOCK  
WHERE soh_stores = soh_dc AND article = 'QQ789' AND yearmonth = '202005';
========================================================================================================================================

table_name : SDL_CCR_PRODUCT_MAPPING  
solution : Ensure numeric columns are correctly typed or populated with numeric data.

SQL Query:
sql
SELECT * 
FROM SDL_CCR_PRODUCT_MAPPING 
WHERE TRY_TO_NUMBER(<numeric_column>) IS NULL
AND <numeric_column> IS NOT NULL;

Replace `<numeric_column>` with the actual column name expected to have numeric data.
========================================================================================================================================

table_name : SDL_MY_AS_WATSONS_INVENTORY
solution : Correct inv_qty_pc to a non-negative value and verify mnth_id for accuracy.

SQL Query:
sql
SELECT *
FROM SDL_MY_AS_WATSONS_INVENTORY
WHERE inv_qty_pc < 0 OR mnth_id NOT BETWEEN 1 AND 12;
========================================================================================================================================

