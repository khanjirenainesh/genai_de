table_name: DAILYSALES  
solution: Update the 'salgrossamt' and other related amount fields with correct values based on the sales transaction details. Ensure 'salnetamt' is correctly calculated as it should not be negative. Correct 'prdqty' and ensure it is non-negative. Verify and correct any data entry discrepancies.  

SQL Query: 
sql
SELECT * 
FROM DAILYSALES 
WHERE salgrossamt < 0 
   OR salnetamt < 0 
   OR prdqty < 0 
   OR salinvno IS NULL 
   OR salinvdate IS NULL 
   OR prdspldiscamt < 0 
   OR prdschdiscamt < 0 
   OR prdcashdiscamt < 0 
   OR prddbdiscamt < 0;
========================================================================================================================================

table_name: SDL_CSL_DAILYSALES  
solution: Validate and correct the calculation of 'salnetamt' to ensure it equals 'salgrossamt' minus all applicable discounts and adjustments ('salspldiscamt', 'salschdiscamt', 'salcashdiscamt', 'saldbdiscamt', 'saltaxamt', 'salwdsamt', 'saldbadjamt', 'salcradjamt', 'salinvleveldiscamt', 'salroundoffamt', 'salotherchargesamt', 'saltotdedn', and add 'saltotaddn').

SQL Query to Identify Anomalies:
sql
SELECT *
FROM SDL_CSL_DAILYSALES
WHERE salnetamt != (salgrossamt - salspldiscamt - salschdiscamt - salcashdiscamt - saldbdiscamt - saltaxamt - salwdsamt - saldbadjamt - salcradjamt - salinvleveldiscamt - salroundoffamt - salotherchargesamt - saltotdedn + saltotaddn);
========================================================================================================================================

table_name: SDL_CSL_DAILYSALES_UNDELIVERED  
solution: Review and rectify the 'salnetamt' calculation which appears incorrect due to a negative 'prdnetamt'. Ensure discounts and tax calculations are accurate and consistent.

sql
SELECT * 
FROM SDL_CSL_DAILYSALES_UNDELIVERED
WHERE salnetamt != (
    salgrossamt 
    - salspldiscamt 
    - salschdiscamt 
    - salcashdiscamt 
    - saldbdiscamt 
    + saltaxamt 
    + salwdsamt 
    - saldbadjamt 
    + salcradjamt 
    - salonaccountamt 
    - salmktretamt 
    - salreplaceamt 
    + salotherchargesamt 
    - salinvleveldiscamt 
    + salroundoffamt
) 
OR prdnetamt < 0;
========================================================================================================================================

table_name : SDL_CSL_RDSSMWEEKLYTARGET_OUTPUT  
solution : Update the anomalous row by replacing 'None' with appropriate values, correct the targetyear to a positive integer, ensure targetvalue is non-negative, and validate week values.

SQL Query to detect anomalies:
sql
SELECT *
FROM SDL_CSL_RDSSMWEEKLYTARGET_OUTPUT
WHERE distcode IS NULL
   OR targetrefno IS NULL
   OR smcode IS NULL
   OR smname IS NULL
   OR rmcode IS NULL
   OR rmname IS NULL
   OR targetyear < 0
   OR targetmonth IS NULL
   OR targetvalue < 0
   OR week1 < 0
   OR week2 < 0
   OR week3 < 0
   OR week4 < 0
   OR week5 < 0
   OR targetstatus IS NULL
   OR targettype IS NULL
   OR downloadstatus IS NULL;
========================================================================================================================================

table_name : SDL_JNJ_CONSUMERREACH_CVS
solution : Ensure 'retailname' is not null. Update 'run_id' with a valid unique identifier.



sql
SELECT * 
FROM SDL_JNJ_CONSUMERREACH_CVS
WHERE retailname IS NULL OR run_id IS NULL OR run_id < 0;
========================================================================================================================================

table_name: SDL_MDS_MY_PRODUCT_MASTER  
solution: Correct negative values in columns such as 'attachments', 'bn-duty', 'dz_price', 'list_price_w_gst', 'product_dimension-l_(mm)', 'product_weight', 'qty-inner_shipper_(pc)', and 'shipper_dimension-h_(mm)' to appropriate positive values. Ensure 'npi' is a valid date if applicable. Validate 'selling_status_id' and 'selling_status_name' for accuracy and consistency.

SQL Query to detect anomalies:
sql
SELECT * 
FROM SDL_MDS_MY_PRODUCT_MASTER
WHERE attachments < 0
   OR "bn-duty" < 0
   OR dz_price < 0
   OR list_price_w_gst < 0
   OR "product_dimension-l_(mm)" < 0
   OR product_weight < 0
   OR "qty-inner_shipper_(pc)" < 0
   OR "shipper_dimension-h_(mm)" < 0
   OR TRY_TO_DATE(npi, 'YYYY-MM-DD') IS NULL
   OR selling_status_id IS NULL
   OR selling_status_name IS NULL;
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_ACCT_NIELSENCODE_MAPPING  
solution : Correct the 'id' value from -2 to a valid positive integer, and ensure 'versionname' and 'versionflag' have appropriate non-null values if applicable.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PACIFIC_ACCT_NIELSENCODE_MAPPING
WHERE id < 0 
   OR versionname IS NULL 
   OR versionflag IS NULL;
========================================================================================================================================

table_name : SDL_MDS_VN_CUSTOMER_SEGMENTATION
solution : Update the 'validationstatus' to 'valid' after verifying the integrity of the customer segmentation levels and version details.


sql
SELECT *
FROM SDL_MDS_VN_CUSTOMER_SEGMENTATION
WHERE validationstatus = 'invalid';
========================================================================================================================================

table_name : SDL_ID_POS_CARREFOUR_STOCK  
solution : Verify and correct the stock_qty and stock_days values for 'Furniture'. Ensure stock_qty is not zero if stock_amt is non-zero, and adjust stock_days accordingly.  

sql
SELECT *
FROM SDL_ID_POS_CARREFOUR_STOCK
WHERE (stock_qty = 0 AND stock_amt > 0) OR (stock_days = 0 AND stock_amt > 0);
========================================================================================================================================

table_name : SDL_MDS_PH_MSL_DTLS  
solution : Correct the 'changetrackingmask' value from -5 to a valid positive integer representing the change tracking mask.

sql
SELECT *
FROM SDL_MDS_PH_MSL_DTLS
WHERE changetrackingmask < 0;
========================================================================================================================================

table_name: SDL_MDS_PH_NON_ISE_WEIGHTS  
solution: Adjust the 'weight' value to a non-negative number since weights should not be negative.

SQL query to get anomalies:
sql
SELECT * 
FROM SDL_MDS_PH_NON_ISE_WEIGHTS 
WHERE weight < 0;
========================================================================================================================================

table_name : SDL_KR_COUPANG_PRODUCT_MASTER
solution : No action needed as no anomalies detected.

-- SQL Query to detect anomalies in Snowflake
-- Assuming 'anomalies' are defined as null values or outliers in certain columns

SELECT *
FROM SDL_KR_COUPANG_PRODUCT_MASTER
WHERE <COLUMN_NAME> IS NULL
   OR <COLUMN_NAME> > <THRESHOLD>
   OR <COLUMN_NAME> < <THRESHOLD>;


Replace `<COLUMN_NAME>` and `<THRESHOLD>` with actual column names and anomaly thresholds as required.
========================================================================================================================================

table_name : PRODBU_PRODUCTBUSINESSUNIT
solution : The anomaly detected is in the 'islisted' field which has a value of 'No'. Ensure 'islisted' field is correctly set to 'Yes' if the product should be listed.

SQL query to get anomalies:
SELECT *
FROM PRODBU_PRODUCTBUSINESSUNIT
WHERE islisted = 'No';
========================================================================================================================================

table_name : SDL_ECOM_GMV_KONVY
solution : Correct the infinite and excessively large values in 'sales_amount', 'total_unit_sold', 'tstock', 'current_price', 'pro_price', 'pro_cost', 'cost_in_vat', 'cost', 'market_value', 'stock_turnover_days', 'view_no', and 'conversion'. Ensure values are within realistic and acceptable ranges. Validate 'productname', 'status', 'platform', and 'discontinue' fields for missing or incorrect data.

SQL Query:
SELECT *
FROM SDL_ECOM_GMV_KONVY
WHERE sales_amount > 1000000
   OR total_unit_sold > 1000000
   OR tstock = 'infinite'
   OR current_price > 10000
   OR pro_price > 10000
   OR pro_cost > 10000
   OR cost_in_vat > 10000
   OR cost > 10000
   OR market_value > 10000
   OR stock_turnover_days = '9999'
   OR view_no = 'infinite'
   OR conversion > 1000000
   OR productname IS NULL
   OR status IS NULL
   OR platform IS NULL
   OR discontinue IS NULL;
========================================================================================================================================

table_name : SDL_CSL_UDCMASTER
solution : Correct negative values for udcmasterid, masterid, columnsize, columnprecision, editable, columnmandatory, and udcstatus. Ensure all ID fields are positive integers. Check columnsize and columnprecision for valid range. Verify editable and columnmandatory have valid values (e.g., 0 or 1). Update createduserid and modifieduserid to valid user identifiers. 

SQL Query:
SELECT *
FROM SDL_CSL_UDCMASTER
WHERE udcmasterid < 0 
   OR masterid < 0 
   OR columnsize < 0 
   OR columnprecision < 0 
   OR editable NOT IN (0, 1) 
   OR columnmandatory NOT IN (0, 1) 
   OR udcstatus < 0 
   OR createduserid < 0 
   OR modifieduserid < 0;
========================================================================================================================================

table_name : SDL_DISTRIBUTOR_IVY_INVOICE  
solution : Ensure numeric data types are used for columns intended to store numeric values, and check for any incorrect data entry or data type definitions.

sql
SELECT *
FROM SDL_DISTRIBUTOR_IVY_INVOICE
WHERE TRY_TO_NUMBER(<numeric_column>) IS NULL
AND <numeric_column> IS NOT NULL;


Replace `<numeric_column>` with the actual column name intended to store numeric data.
========================================================================================================================================

table_name: SDL_HK_IMS_VIVA_SEL_OUT  
solution: Correct negative values for sales_volume, sales_order_quantity, net_trade_sales, and local_curr_exch_rate. Verify transactiontype and return_reason consistency.

SQL Query:
sql
SELECT *
FROM SDL_HK_IMS_VIVA_SEL_OUT
WHERE sales_volume < 0
   OR sales_order_quantity < 0
   OR net_trade_sales < 0
   OR local_curr_exch_rate < 0;
========================================================================================================================================

table_name : SDL_KR_COUPANG_PA_REPORT  
solution : Ensure the table contains numeric data columns for anomaly detection. If missing, add appropriate numeric fields or verify data ingestion process.

SQL Query:
sql
SELECT column_name
FROM information_schema.columns
WHERE table_name = 'SDL_KR_COUPANG_PA_REPORT'
AND data_type NOT IN ('NUMBER', 'FLOAT', 'INTEGER', 'DOUBLE');
========================================================================================================================================

table_name: SDL_LA_GT_SALES_ORDER_FACT
solution: Ensure numeric columns have valid numeric data types and populate them with correct numeric values. Check for incorrect data types or empty columns and correct them.

SQL query to get anomalies:

sql
SELECT *
FROM SDL_LA_GT_SALES_ORDER_FACT
WHERE NOT (COLUMN_NAME1 IS NOT NULL AND COLUMN_NAME2 IS NOT NULL AND ...) -- replace COLUMN_NAME1, COLUMN_NAME2, ... with actual column names that should contain numeric data
OR TRY_TO_NUMERIC(COLUMN_NAME1) IS NULL
OR TRY_TO_NUMERIC(COLUMN_NAME2) IS NULL;


Note: Replace `COLUMN_NAME1`, `COLUMN_NAME2`, etc. with the actual column names expected to contain numeric data, and ensure the columns use appropriate numeric data types.
========================================================================================================================================

table_name: SDL_MDS_PH_POS_CUSTOMERS  
solution: Correct the logical placeholders with real-world data, such as valid geographic data, customer identification numbers, and operational details.

SQL Query:
sql
SELECT *
FROM SDL_MDS_PH_POS_CUSTOMERS
WHERE address1 LIKE '%Logical%' 
   OR area_cd LIKE '%LOG%' 
   OR ash_nm LIKE '%Logical%'
   OR barangaycode_code LIKE '%LOG%' 
   OR city_cd LIKE '%LOG%' 
   OR prov_cd_code LIKE '%LOG%' 
   OR region_cd_code LIKE '%LOG%' 
   OR chnl LIKE '%Logical%' 
   OR store_typ_desc LIKE '%Logical%' 
   OR validationstatus LIKE '%Logical%';
========================================================================================================================================

table_name : SDL_MDS_VN_DISTRIBUTOR_PRODUCTS  
solution : Ensure that numeric data types are assigned to relevant columns and that all numeric columns contain valid data.

sql
SELECT *
FROM SDL_MDS_VN_DISTRIBUTOR_PRODUCTS
WHERE TRY_CAST(column_name AS NUMBER) IS NULL
AND column_name IS NOT NULL;
========================================================================================================================================

table_name : SDL_GCPH_BRAND
solution : Check the 'weight_unit' field for a missing or incorrect value and ensure consistency in 'volume_unit' and 'width' fields.

SQL Query:
sql
SELECT *
FROM SDL_GCPH_BRAND
WHERE weight_unit IS NULL OR weight_unit = 'None'
   OR volume_unit IS NULL OR volume_unit = 'None'
   OR width IS NULL OR width = 0;
========================================================================================================================================

table_name : SDL_MDS_SG_PRODUCT_EXCEPTIONS  
solution : Change 'changetrackingmask' from -500 to a valid positive integer value that aligns with the system's requirement for tracking changes.

SQL Query to detect anomalies:
sql
SELECT * 
FROM SDL_MDS_SG_PRODUCT_EXCEPTIONS 
WHERE changetrackingmask < 0;
========================================================================================================================================

table_name : SDL_CLAVIS_GB_PRODUCTS
solution : Review and correct negative milestone values, ensure consistent URL formats, rectify incorrect status in product availability, verify pricing anomalies and promo discrepancies, and update the delete indicator properly.

-- SQL query to identify anomalies
SELECT *
FROM SDL_CLAVIS_GB_PRODUCTS
WHERE 
    (milestone1_comp < 0 OR milestone2_comp < 0 OR milestone3_comp < 0 OR milestone4_comp < 0 OR milestone5_comp < 0 OR milestone6_comp < 0 OR milestone7_comp < 0 OR milestone8_comp < 0 OR milestone9_comp < 0 OR milestone10_comp < 0)
    OR (avail_status NOT IN ('In Stock', 'Out of Stock', 'Pre-order'))
    OR (observed_price < 0 OR prev_observed_price < 0 OR diff_from_prev_observed_price < 0 OR diff_from_prev_observed_price_percent < 0)
    OR (promo_discounted_price < 0 OR promo_discount_amount < 0 OR promo_discount_percent < 0)
    OR (delete_ind NOT IN ('Y', 'N'));
========================================================================================================================================

table_name : SDL_CHS_DSTR  
solution : Correct the 'last_cost' to a positive value and ensure all monthly values are non-negative.

sql
SELECT * 
FROM SDL_CHS_DSTR
WHERE last_cost < 0
   OR month_01 < 0
   OR month_02 < 0
   OR month_03 < 0
   OR month_04 < 0
   OR month_05 < 0
   OR month_06 < 0
   OR month_07 < 0
   OR month_08 < 0
   OR month_09 < 0
   OR month_10 < 0
   OR month_11 < 0
   OR month_12 < 0;
========================================================================================================================================

table_name : SDL_MY_ACCRUALS  
solution : Ensure the column intended for numeric data is correctly defined with a numeric data type. Review and correct any data entry or ETL processes that may lead to non-numeric data being inserted.

SQL Query:
sql
SELECT *
FROM SDL_MY_ACCRUALS
WHERE TRY_TO_NUMBER(<numeric_column>) IS NULL;

Replace `<numeric_column>` with the actual column name intended for numeric data.
========================================================================================================================================

table_name : SDL_MDS_VN_PS_TARGETS
solution : Check the 'validationstatus' column for entry with id 49, and verify the data integrity or constraints that resulted in 'Invalid' status. Correct any data entry errors or update validation rules accordingly.

SQL Query:
SELECT * 
FROM SDL_MDS_VN_PS_TARGETS 
WHERE validationstatus = 'Invalid';
========================================================================================================================================

table_name: SDL_CSL_UDCDETAILS  
solution: Validate and correct 'masterid' with valid positive integer values, and ensure 'uploadflag' is set to 'Y' for valid entries.

SQL query to detect anomalies in Snowflake:
sql
SELECT *
FROM SDL_CSL_UDCDETAILS
WHERE masterid < 0 OR uploadflag = 'N';
========================================================================================================================================

table_name : SDL_GCPH_CATEGORY  
solution : Verify and correct negative values in columns like suggestedclassificationscore, length, net_weight, volume, and gross_weight. Ensure all IDs have valid formats and check for data entry errors in fields like manualclassificationid and ean_upc.

sql
SELECT * 
FROM SDL_GCPH_CATEGORY
WHERE suggestedclassificationscore < 0
   OR length < 0
   OR net_weight < 0
   OR volume < 0
   OR gross_weight < 0
   OR manualclassificationid IS NOT NULL AND LENGTH(manualclassificationid) != 10
   OR ean_upc IS NOT NULL AND LENGTH(ean_upc) != 12;
========================================================================================================================================

table_name : SDL_MDS_PH_DISTRIBUTOR_SUPERVISORS
solution : Add numeric data columns necessary for anomaly detection, such as sales figures or performance metrics, to enable effective analysis.

SQL query to detect anomalies:
sql
SELECT *
FROM SDL_MDS_PH_DISTRIBUTOR_SUPERVISORS
WHERE <numeric_column> IS NULL OR NOT IS_NUMERIC(<numeric_column>);


Replace `<numeric_column>` with the actual column name(s) that should contain numeric data.
========================================================================================================================================

table_name : SDL_CSL_RETAILERMASTER  
solution : Correct the negative values for 'syncid', 'rtrcrbills', 'rtrcrdays', 'rtrfoodgracedays', 'rtrdruggracedays', 'rtrcosmeticgracedays', ensure 'rtrlicexpirydate', 'rtrdrugexpirydate', 'rtrpestexpirydate' are valid future dates, and rectify the 'relationstatus' to an acceptable status.

SQL Query:
sql
SELECT *
FROM SDL_CSL_RETAILERMASTER
WHERE syncid < 0
   OR rtrcrbills < 0
   OR rtrcrdays < 0
   OR rtrfoodgracedays < 0
   OR rtrdruggracedays < 0
   OR rtrcosmeticgracedays < 0
   OR rtrlicexpirydate < CURRENT_DATE
   OR rtrdrugexpirydate < CURRENT_DATE
   OR rtrpestexpirydate < CURRENT_DATE
   OR relationstatus = 'Suspended';
========================================================================================================================================

table_name : SDL_ECOM_SHOPEE_COMPENSATION  
solution : Correct negative values in 'sum_of_qty', 'sum_of_rspxqty', 'sum_of_total_net_selling_price', 'sum_of_dis_shopee', 'sum_of_ltpxqty', 'sum_of_front_margin', 'sum_of_enabler_margin', and 'sum_of_compensation' as they should not be negative for a delivered order.

SQL Query:
sql
SELECT *
FROM SDL_ECOM_SHOPEE_COMPENSATION
WHERE sum_of_qty < 0
   OR sum_of_rspxqty < 0
   OR sum_of_total_net_selling_price < 0
   OR sum_of_dis_shopee < 0
   OR sum_of_ltpxqty < 0
   OR sum_of_front_margin < 0
   OR sum_of_enabler_margin < 0
   OR sum_of_compensation < 0
   AND status = 'Delivered';
========================================================================================================================================

table_name : SDL_CSL_RETAILERROUTE  
solution : Ensure all fields have valid, non-null values. Set default values for negative or null entries and enforce data integrity constraints.

SQL Query:
sql
SELECT * 
FROM SDL_CSL_RETAILERROUTE
WHERE distcode IS NULL 
   OR rtrid = -1 
   OR rtrcode IS NULL 
   OR rtrname IS NULL 
   OR rmid = -10 
   OR rmcode IS NULL 
   OR rmname IS NULL 
   OR routetype IS NULL 
   OR uploadflag IS NULL 
   OR syncid = -1 
   OR run_id = -100 
   OR crt_dttm = '2023-01-01'
   OR file_name IS NULL;
========================================================================================================================================

table_name : SDL_GCCH_CUST_HIER  
solution : Correct negative values for 'manualclassificationid', 'suggestedclassificationscore', and 'tamr_id' to valid non-negative integers or nulls where applicable.

sql
SELECT * 
FROM SDL_GCCH_CUST_HIER
WHERE tamr_id < 0 
   OR manualclassificationid < 0 
   OR suggestedclassificationscore < 0;
========================================================================================================================================

table_name : SDL_JNJ_MER_COP  
solution : Update the 'emp_address_pc' field to include a valid postal code for the affected row, as the current value is 'None'.  

-- SQL Query to identify anomalies
SELECT *  
FROM SDL_JNJ_MER_COP  
WHERE emp_address_pc IS NULL;
========================================================================================================================================

table_name : SDL_MDS_SG_PRODUCT_MAPPING
solution : Verify 'id' uniqueness as anomalies may arise from duplicate entries. Ensure all 'version' fields align with respective 'version_id' and 'versionflag'. Check 'customer' and 'brand' related fields for consistency and proper linkage. Validate 'enterdatetime' and 'lastchgdatetime' for logical sequence. Regularly update 'validationstatus' to reflect accurate data integrity.

SQL Query:
SELECT *
FROM SDL_MDS_SG_PRODUCT_MAPPING
WHERE 
  id IN (SELECT id FROM SDL_MDS_SG_PRODUCT_MAPPING GROUP BY id HAVING COUNT(*) > 1)
  OR versionnumber != version_id
  OR enterdatetime > lastchgdatetime
  OR validationstatus IS NULL;
========================================================================================================================================

table_name : SDL_POP6_SG_PRODUCT_LISTS_POPS  
solution : Add numeric fields necessary for anomaly detection, such as sales figures, inventory counts, or product ratings.

SQL Query to get anomalies:
sql
SELECT * 
FROM SDL_POP6_SG_PRODUCT_LISTS_POPS 
WHERE <CONDITION_FOR_ANOMALY_DETECTION>;

(Note: Replace `<CONDITION_FOR_ANOMALY_DETECTION>` with the specific condition you deem as an anomaly, like NULL checks or unexpected values in numeric fields once they are added.)
========================================================================================================================================

table_name : SDL_CBD_GT_SALES_REPORT_FACT  
solution : Ensure that numeric columns are populated with valid data. Verify data sources and ETL processes for proper numeric data extraction and loading.  

SQL Query:  
sql  
SELECT *  
FROM SDL_CBD_GT_SALES_REPORT_FACT  
WHERE NOT EXISTS (  
  SELECT 1  
  FROM INFORMATION_SCHEMA.COLUMNS  
  WHERE TABLE_NAME = 'SDL_CBD_GT_SALES_REPORT_FACT'  
  AND DATA_TYPE IN ('NUMBER', 'FLOAT', 'DECIMAL')  
  AND COLUMN_NAME IS NOT NULL  
);
========================================================================================================================================

table_name : SDL_KR_COUPANG_PRODUCT_SUMMARY_MONTHLY  
solution : Change 'run_id' from -49 to a valid positive value and ensure 'category_depth3' is filled appropriately if applicable.

sql
SELECT *
FROM SDL_KR_COUPANG_PRODUCT_SUMMARY_MONTHLY
WHERE run_id < 0
   OR category_depth3 IS NULL
   OR yearmo NOT LIKE '2023%'
========================================================================================================================================

table_name: SDL_LA_GT_SELLOUT_FACT  
solution: Review the cancellation status and ensure it aligns with the associated credit note and reason code. Verify that the applied discounts and promotions are consistent with company policies and correct any discrepancies.

SQL query to get anomalies:
sql
SELECT * 
FROM SDL_LA_GT_SELLOUT_FACT
WHERE iscancel = 1 AND (cndocno IS NULL OR cnreasoncode IS NULL)
   OR discountbtline > totalbeforevat
   OR avgdiscount > 100;
========================================================================================================================================

table_name : SDL_MDS_PH_LAV_CUSTOMER
solution : No solution needed as no anomalies were detected.


SQL Query to check for anomalies in Snowflake:

sql
SELECT *
FROM SDL_MDS_PH_LAV_CUSTOMER
-- Add conditions to identify anomalies if any, e.g., WHERE column IS NULL
-- Since no anomalies were detected, the query remains simple for review.
========================================================================================================================================

table_name: SDL_MDS_PH_LAV_PRODUCT
solution: The anomaly is due to an invalid 'versionnumber' with a value of -1. Ensure 'versionnumber' is a positive integer to maintain data integrity.


SQL Query to detect anomalies:
sql
SELECT *
FROM SDL_MDS_PH_LAV_PRODUCT
WHERE versionnumber < 0;
========================================================================================================================================

table_name : SDL_LA_GT_CUSTOMER  
solution : Update the anomalous row where fields like 'arname', 'araddress', 'telephone', etc., are missing. Replace '-99999' in 'activestatus' with a valid status. Ensure all required fields have valid data.

sql
SELECT * 
FROM SDL_LA_GT_CUSTOMER
WHERE arname IS NULL 
   OR araddress IS NULL 
   OR telephone IS NULL 
   OR activestatus = '-99999';
========================================================================================================================================

table_name : SDL_IG_INVENTORY_DATA  
solution : Ensure numeric columns are populated with appropriate data for anomaly detection.

sql
SELECT *
FROM SDL_IG_INVENTORY_DATA
WHERE NOT TRY_CAST(your_numeric_column AS DECIMAL) IS NOT NULL;
========================================================================================================================================

table_name : SDL_HK_IMS_WINGKEUNG_SEL_OUT  
solution : Correct the 'sales_order_quantity' value to a positive number or ensure that negative values are intended for returns or special conditions, and verify the 'net_trade_sales' calculation to match the sales volume and order quantity.  

SQL Query:  
sql
SELECT *  
FROM SDL_HK_IMS_WINGKEUNG_SEL_OUT  
WHERE sales_order_quantity < 0  
   OR net_trade_sales != sales_volume + sales_order_quantity;
========================================================================================================================================

table_name : SDL_ID_POS_IDM_SELLOUT  
solution : Update the 'values' column to a valid positive number or verify if the negative value is correct and adjust the business logic accordingly.

SQL Query to detect anomalies:
sql
SELECT *
FROM SDL_ID_POS_IDM_SELLOUT
WHERE values < 0;
========================================================================================================================================

table_name : CUST_CUSTOMER
solution : Correct the customer name "M'Baku" to a valid format without special characters if it's incorrect or confirm it's accurate. Verify the customer's phone number has the correct format and update if necessary. Check "county" and "district" fields for consistency with other records from Wakanda.

SQL Query to detect anomalies:
SELECT *
FROM CUST_CUSTOMER
WHERE customername LIKE '%''%' OR
      LENGTH(phonenumber) != 10 OR
      NOT EXISTS (
          SELECT 1
          FROM CUST_CUSTOMER AS cc
          WHERE cc.country = 'Wakanda' AND
                (cc.county = 'Wakanda' OR cc.district = 'District 57')
      );
========================================================================================================================================

table_name : SDL_CHW_ECOMM_DATA  
solution : Ensure numeric columns in the table are correctly populated and not null. Verify data types and data sources.

sql
SELECT *
FROM SDL_CHW_ECOMM_DATA
WHERE TRY_CAST(<numeric_column> AS NUMBER) IS NULL OR <numeric_column> IS NULL;
========================================================================================================================================

table_name: SDL_ID_POS_DAILY_BASEDLINE_SELLOUT  
solution: Correct the negative and out-of-range values for columns, ensure 'month' is within 1-12, 'year' is a valid year, and 'key_account', 'plu', 'run_id', 'crtd_dttm', 'file_name' have valid formats.  

SQL Query:  
sql
SELECT *  
FROM SDL_ID_POS_DAILY_BASEDLINE_SELLOUT  
WHERE plu < 0  
   OR month NOT BETWEEN 1 AND 12  
   OR year < 0 OR year > 9999  
   OR qty_trx < 0  
   OR cum_ytm_qty < 0  
   OR promo_qty < 0  
   OR cum_promo_qty < 0  
   OR basedline_total_qty < 0  
   OR cum_basedline_total_qty < 0  
   OR total_days < 0  
   OR cum_total_days < 0  
   OR promo_days < 0  
   OR cum_promo_days < 0  
   OR baselined_total_days < 0  
   OR cum_baselined_total_days < 0  
   OR total_qty_baselined < 0  
   OR indirect_qty_trx < 0  
   OR indirect_cum_qty < 0  
   OR indirect_promo_qty < 0  
   OR indirect_cum_promo_qty < 0  
   OR indirect_basedline_total_qty < 0  
   OR indirect_cum_basedline_total_qty < 0  
   OR indirect_qty_basedlined < 0  
   OR yearmonth NOT LIKE '____-__'  
   OR run_id < 0  
   OR crtd_dttm IS NULL  
   OR file_name IS NULL;
========================================================================================================================================

table_name: SDL_MDS_MY_SKU_BENCHMARKS  
solution: Correct 'versionflag' from 'Stable' to match version 'Beta' or adjust 'versionname' to align with 'Stable'.

sql
SELECT * FROM SDL_MDS_MY_SKU_BENCHMARKS
WHERE (versionname = 'Beta' AND versionflag = 'Stable')
OR (valid_from > valid_to)
OR (jj_packsize < variance);
========================================================================================================================================

table_name : SDL_CSL_PRODUCTWISESTOCK  
solution : Correct negative values in 'prdid', 'unsalopenstock', 'unsalpurchase', 'offeropenstock', 'offerpurchase', 'unsalsales', 'offerstockin', 'offerstockout', 'offersalesreturn', 'unsalstkjurin', 'offerstkjurin', 'offerbattfrout', 'offerlcntfrout', 'salreplacement' columns, and verify logical consistency for stock calculations.

SQL query to detect anomalies:
sql
SELECT *
FROM SDL_CSL_PRODUCTWISESTOCK
WHERE prdid < 0 
   OR unsalopenstock < 0 
   OR unsalpurchase < 0 
   OR offeropenstock < 0 
   OR offerpurchase < 0 
   OR unsalsales < 0 
   OR offerstockin < 0 
   OR offerstockout < 0 
   OR offersalesreturn < 0 
   OR unsalstkjurin < 0 
   OR offerstkjurin < 0 
   OR offerbattfrout < 0 
   OR offerlcntfrout < 0 
   OR salreplacement < 0;
========================================================================================================================================

table_name : SDL_KR_BO_YOUNG_JONG_HAP_LOGISTICS_GT_SELLOUT  
solution : Ensure that the table has numeric data types in its columns. Convert or cast non-numeric data where necessary to allow for anomaly detection.

sql
SELECT *
FROM SDL_KR_BO_YOUNG_JONG_HAP_LOGISTICS_GT_SELLOUT
WHERE TRY_CAST(column_name AS NUMBER) IS NULL AND column_name IS NOT NULL;
========================================================================================================================================

table_name: SDL_DAILYSALES_DEL
solution: Correct the 'prdqty' field to a positive value as it currently has a negative quantity which is not valid.

-- SQL query to identify anomalies in the SDL_DAILYSALES_DEL table
SELECT *
FROM SDL_DAILYSALES_DEL
WHERE prdqty < 0;
========================================================================================================================================

table_name: SDL_CSL_SALESRETURN  
solution: Correct negative values for srngrossamt, srntaxamt, and prdselrate, and ensure all quantities are non-negative.

SQL Query to detect anomalies:  
sql
SELECT *  
FROM SDL_CSL_SALESRETURN  
WHERE srngrossamt < 0  
   OR srntaxamt < 0  
   OR prdselrate < 0  
   OR prdsalqty < 0  
   OR prdunsalqty < 0  
   OR prdofferqty < 0;
========================================================================================================================================

table_name : SDL_ECOM_SEARCH_ADS_BY_CHANNEL  
solution : Ensure the column intended for numeric data in the table is correctly defined as a numeric data type and populated with valid numeric values. Validate and clean any existing data to rectify incorrect types or missing values.

SQL Query:
sql
SELECT * 
FROM SDL_ECOM_SEARCH_ADS_BY_CHANNEL
WHERE TRY_CAST(<numeric_column_name> AS NUMBER) IS NULL;
========================================================================================================================================

table_name : SDL_MDS_PH_MSL_HDR
solution : Update the 'muid', 'versionname', 'versionflag', 'name', 'code', 'csg_code_code', 'csg_code_name', 'enterusername', 'lastchgusername', and 'validationstatus' fields with valid data where they are currently 'None' for the row with 'id' = 3. Additionally, verify that 'versionnumber', 'version_id', 'enterversionnumber', and 'lastchgversionnumber' are correctly set, as 9999 may be a placeholder or error.

SQL Query to detect anomalies:
SELECT * FROM SDL_MDS_PH_MSL_HDR WHERE muid IS NULL OR versionname IS NULL OR versionnumber = 9999 OR version_id = 9999 OR versionflag IS NULL OR name IS NULL OR code IS NULL OR csg_code_code IS NULL OR csg_code_name IS NULL OR enterusername IS NULL OR lastchgusername IS NULL OR validationstatus IS NULL;
========================================================================================================================================

table_name : SDL_JNJ_CONSUMERREACH_711
solution : No action needed as no anomalies were detected.

SQL Query to detect anomalies:
SELECT * 
FROM SDL_JNJ_CONSUMERREACH_711
WHERE 1=2; -- No anomalies detected, so query returns no results.
========================================================================================================================================

table_name : SDL_CBD_GT_SALES_REPORT_FACT_TEMP  
solution : Adjust the negative sales_qty, foc_qty, net_price, and net_sales to reflect a return or correction accurately, and ensure that any return_reason is documented appropriately.

sql
SELECT * 
FROM SDL_CBD_GT_SALES_REPORT_FACT_TEMP
WHERE sales_qty < 0 OR foc_qty < 0 OR net_price < 0 OR net_sales < 0;
========================================================================================================================================

table_name : SDL_DISTRIBUTOR_CUSTOMER_DIM  
solution : Ensure that numeric columns are properly defined and populated. If no numeric columns exist, consider adding relevant numeric fields for anomaly detection.

SQL Query:
sql
SELECT *
FROM SDL_DISTRIBUTOR_CUSTOMER_DIM
WHERE NOT EXISTS (
    SELECT 1
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'SDL_DISTRIBUTOR_CUSTOMER_DIM'
    AND TABLE_CATALOG = CURRENT_DATABASE()
    AND DATA_TYPE IN ('NUMBER', 'FLOAT', 'INTEGER')
);
========================================================================================================================================

table_name : SDL_DISTRIBUTOR_IVY_OUTLET_MASTER  
solution : Ensure numeric data types are correctly defined for relevant columns and populate missing numeric data.

SQL Query:
sql
SELECT * 
FROM SDL_DISTRIBUTOR_IVY_OUTLET_MASTER 
WHERE TRY_TO_DECIMAL(column_name) IS NULL 
AND column_name IS NOT NULL;


Replace `column_name` with the specific numeric column(s) you want to check for anomalies.
========================================================================================================================================

table_name : SDL_MDS_APAC_DCL_TARGETS
solution : Add numeric data to the table for anomaly detection. Ensure that the columns intended for numerical values are correctly defined with appropriate data types and populated with data.

SQL Query:
SELECT * 
FROM SDL_MDS_APAC_DCL_TARGETS 
WHERE TRY_CAST(<numeric_column> AS NUMBER) IS NULL;
========================================================================================================================================

table_name: SDL_MDS_SG_CUSTOMER_HIERARCHY
solution: Ensure that all fields in row 50 have correct and consistent data types and values, particularly focusing on versioning and customer segmentation codes.

SQL Query to find anomalies:
SELECT * 
FROM SDL_MDS_SG_CUSTOMER_HIERARCHY
WHERE id = 50
  AND (versionnumber IS NULL OR version_id IS NULL OR versionflag IS NULL 
       OR customer_segmentation_code IS NULL OR customer_segmentation_level_2_code IS NULL
       OR enterdatetime IS NULL OR lastchgdatetime IS NULL);
========================================================================================================================================

table_name : SDL_ECOM_BACKMARGIN  
solution : Adjust negative values in 'quantity', 'cogs_per_quantity', 'actual_shipping_fee', and 'backmargin_cfs' to be non-negative, as negative values are illogical for these fields. Verify and correct any discrepancies in 'order_value' and 'nmv' as these values should not be zero or negative.

sql
SELECT * 
FROM SDL_ECOM_BACKMARGIN
WHERE quantity < 0
   OR cogs_per_quantity < 0
   OR actual_shipping_fee < 0
   OR backmargin_cfs < 0
   OR order_value <= 0
   OR nmv <= 0;
========================================================================================================================================

table_name : PROD_PRODUCT
solution : Correct the 'width' field to a positive value and adjust 'maximumorderquantity' to a realistic positive value. Ensure all numeric fields have valid positive values where applicable.

SQL Query:
SELECT *
FROM PROD_PRODUCT
WHERE width < 0 OR maximumorderquantity < 0;
========================================================================================================================================

table_name : SDL_ECOM_COGS
solution : No action needed as no anomalies were detected.

SQL Query to detect anomalies:

-- Assuming anomalies might include null values, duplicates, or out-of-range values
-- This query checks for such potential issues
SELECT *
FROM SDL_ECOM_COGS
WHERE 
  column_name IS NULL
  OR column_name NOT BETWEEN acceptable_value_min AND acceptable_value_max
  OR (SELECT COUNT(*) FROM SDL_ECOM_COGS AS inner_table WHERE inner_table.id = SDL_ECOM_COGS.id) > 1;
========================================================================================================================================

table_name : SDL_CLAVIS_GB_SEARCH_TERMS_RESULTS
solution : Review and correct extremely high values for search_results_rank, search_results_basic_score, search_results_weighted_score, search_results_priority_score, search_results_max_rank, and ext_page_no as they are likely incorrect. Ensure correct data entry and validation processes to prevent these anomalies.


sql
SELECT *
FROM SDL_CLAVIS_GB_SEARCH_TERMS_RESULTS
WHERE search_results_rank > 100000 OR
      search_results_basic_score > 100000 OR
      search_results_weighted_score > 100000 OR
      search_results_priority_score > 100000 OR
      search_results_max_rank > 100000 OR
      ext_page_no > 100000;
========================================================================================================================================

table_name : MRCHR_RESPONSES
solution : Correct negative values in 'pricedetails' and 'categorylength'. Verify logical consistency for 'facings' and 'stockcount' and adjust if necessary.

SELECT * FROM MRCHR_RESPONSES
WHERE pricedetails < 0 OR categorylength < 0 OR facings < 0 OR stockcount < 0;
========================================================================================================================================

table_name: SDL_DISTRIBUTOR_CUSTOMER_DIM_ADFTEMP  
solution: Add numeric columns for anomaly detection.

SQL Query:  
sql
SELECT *
FROM SDL_DISTRIBUTOR_CUSTOMER_DIM_ADFTEMP
WHERE NOT EXISTS (
    SELECT 1
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'SDL_DISTRIBUTOR_CUSTOMER_DIM_ADFTEMP'
    AND DATA_TYPE IN ('NUMBER', 'INTEGER', 'FLOAT', 'DOUBLE', 'DECIMAL')
);
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_CIW_ADJUSTMENT  
solution : Correct the 'id' to a positive integer, update 'versionnumber' to a non-negative value, ensure 'version_id' is a valid reference.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PACIFIC_CIW_ADJUSTMENT
WHERE id < 0 
   OR versionnumber < 0 
   OR version_id IS NULL 
   OR version_id NOT IN (
       SELECT DISTINCT version_id 
       FROM valid_version_table -- Replace with the actual table containing valid version_ids
   );
========================================================================================================================================

table_name : SDL_MDS_PH_ISE_WEIGHTS  
solution : Update the 'weight' field to a non-negative value, as weights should not be negative.

sql
SELECT * 
FROM SDL_MDS_PH_ISE_WEIGHTS 
WHERE weight < 0;
========================================================================================================================================

table_name : SDL_MDS_VN_ECOM_TARGET  
solution : Correct the 'enterdatetime' and 'lastchgdatetime' fields to valid historical dates as '2024-01-07' and '2024-01-08' are future dates.

sql
SELECT * 
FROM SDL_MDS_VN_ECOM_TARGET
WHERE enterdatetime > CURRENT_TIMESTAMP
   OR lastchgdatetime > CURRENT_TIMESTAMP;
========================================================================================================================================

table_name: MRCHR_MERCHANDISINGRESPONSE  
solution: Adjust the fetchedsequence value to a positive integer as it should not be negative. Ensure the enddate and endtime are after the startdate and starttime.

SQL Query:
sql
SELECT *
FROM MRCHR_MERCHANDISINGRESPONSE
WHERE fetchedsequence < 0
   OR (enddate < startdate OR (enddate = startdate AND endtime < starttime));
========================================================================================================================================

table_name : SDL_DNR_CUSTOMER_DIM  
solution : Ensure that columns expected to contain numeric data are correctly formatted as numeric data types. Check the data import process to ensure numeric values are not being misinterpreted or lost.  

SQL Query:  
sql
SELECT *
FROM SDL_DNR_CUSTOMER_DIM
WHERE NOT TRY_TO_NUMBER(<numeric_column>) IS NOT NULL;

Replace `<numeric_column>` with the actual column names that are supposed to have numeric data.
========================================================================================================================================

table_name: SDL_LA_GT_SALES_ORDER_FACT_TEMP  
solution: Correct the negative quantity value in the 'qty' column to a positive value or a contextually accurate value, as negative quantities are not valid for sales orders.

sql
SELECT * 
FROM SDL_LA_GT_SALES_ORDER_FACT_TEMP
WHERE qty < 0;
========================================================================================================================================

table_name : SDL_KR_COUPANG_BPA_REPORT  
solution : Ensure numeric columns have valid data types and values are correctly populated. Validate data input processes.

SQL query:
sql
SELECT *
FROM SDL_KR_COUPANG_BPA_REPORT
WHERE TRY_CAST(numeric_column AS NUMBER) IS NULL;
========================================================================================================================================

table_name : SDL_MDS_PH_NPI_SALES_GROUPINGS  
solution : Update 'versionnumber' to a valid range if '99999' is outside accepted values.

SQL query:

sql
SELECT * 
FROM SDL_MDS_PH_NPI_SALES_GROUPINGS 
WHERE versionnumber = 99999;
========================================================================================================================================

table_name : SDL_MDS_VN_TOPDOOR_STORETYPE_MAPPING
solution : Update the 'changetrackingmask' field from -50 to a valid positive integer as negative values are not acceptable.

SQL Query:
SELECT *
FROM SDL_MDS_VN_TOPDOOR_STORETYPE_MAPPING
WHERE changetrackingmask < 0;
========================================================================================================================================

table_name: SDL_MY_DAILY_SELLOUT_SALES_FACT  
solution: Ensure numeric columns are correctly defined and populated with valid data. Validate data types and check data ingestion process for issues.

sql
SELECT * 
FROM SDL_MY_DAILY_SELLOUT_SALES_FACT 
WHERE TRY_CAST(<numeric_column> AS NUMBER) IS NULL;

Replace `<numeric_column>` with the specific column name you wish to check for numeric anomalies.
========================================================================================================================================

table_name : SDL_MDS_VN_POS_CUSTOMERS
solution : Update the 'id', 'versionnumber', 'version_id', 'customer_code', and 'changetrackingmask' fields to appropriate non-negative values, ensuring they meet the database constraints and business logic.

SQL Query:
SELECT *
FROM SDL_MDS_VN_POS_CUSTOMERS
WHERE id < 0 
   OR versionnumber < 0 
   OR version_id < 0 
   OR changetrackingmask < 0 
   OR customer_code = '-999';
========================================================================================================================================

table_name : SDL_DISTRIBUTOR_IVY_USER_MASTER
solution : Correct the 'run_id' to a positive integer value as negative values are not valid. Verify and update the 'cdl_dttm' to ensure it is not set in the future.

SQL Query to get anomalies:
SELECT *
FROM SDL_DISTRIBUTOR_IVY_USER_MASTER
WHERE run_id < 0 OR cdl_dttm > CURRENT_TIMESTAMP();
========================================================================================================================================

table_name : SDL_DISTRIBUTOR_IVY_OUTLET_MASTER_ADFTEMP  
solution : Correct 'credit_limit', 'invoice_limit', and 'credit_period' to non-negative values. Validate 'latitude' and 'longitude' within valid geographic ranges. Fix 'cdl_dttm' to a valid timestamp format.  

SQL Query:  
sql  
SELECT *  
FROM SDL_DISTRIBUTOR_IVY_OUTLET_MASTER_ADFTEMP  
WHERE credit_limit < 0  
   OR invoice_limit < 0  
   OR credit_period < 0  
   OR latitude NOT BETWEEN -90 AND 90  
   OR longitude NOT BETWEEN -180 AND 180  
   OR TRY_TO_TIMESTAMP(cdl_dttm) IS NULL;
========================================================================================================================================

table_name : SDL_KR_COUPANG_PRODUCT_RANKING_WEEKLY  
solution : Add numeric columns necessary for anomaly detection, such as sales volume or ranking change percentage.

sql
-- Snowflake friendly query to detect anomalies when numeric data is missing
SELECT * 
FROM SDL_KR_COUPANG_PRODUCT_RANKING_WEEKLY
WHERE NOT EXISTS (
    SELECT 1 
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_NAME = 'SDL_KR_COUPANG_PRODUCT_RANKING_WEEKLY'
    AND COLUMN_TYPE LIKE '%NUMBER%'
);
========================================================================================================================================

table_name : SDL_MDS_VN_ALLCHANNEL_SISO_TARGET_SKU  
solution : Ensure numeric data is present in the columns intended for anomaly detection; check data type and transformation processes.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_VN_ALLCHANNEL_SISO_TARGET_SKU 
WHERE NOT EXISTS (
    SELECT 1 
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_NAME = 'SDL_MDS_VN_ALLCHANNEL_SISO_TARGET_SKU' 
    AND DATA_TYPE IN ('NUMBER', 'FLOAT', 'INTEGER')
);
========================================================================================================================================

table_name : SDL_POP6_SG_PRODUCT_LISTS_PRODUCTS  
solution : Check the integrity of the 'product_list_code' and 'productdb_id' for potential mismatches or duplicates; ensure the 'sku' and 'msl_ranking' are consistent with business rules; verify the 'prod_grp_date' aligns with the expected date format and range.

sql
SELECT * 
FROM SDL_POP6_SG_PRODUCT_LISTS_PRODUCTS
WHERE product_list_code IS NULL 
   OR productdb_id IS NULL 
   OR sku IS NULL 
   OR msl_ranking IS NULL 
   OR NOT TRY_TO_DATE(prod_grp_date, 'YYYY-MM-DD')
   OR LENGTH(run_id) != 12;
========================================================================================================================================

table_name : SDL_MDS_SG_STORE_MASTER  
solution : Verify and correct the 'changetrackingmask' value for the anomalous row as it seems incorrect or inconsistent with other data entries.

sql
SELECT * 
FROM SDL_MDS_SG_STORE_MASTER
WHERE changetrackingmask = 3550;
========================================================================================================================================

table_name : SDL_ECOMMERCE_OFFTAKE_AMAZON  
solution : Correct the 'quantity' value from negative to a valid non-negative integer.

sql
SELECT *
FROM SDL_ECOMMERCE_OFFTAKE_AMAZON
WHERE quantity < 0;
========================================================================================================================================

I'm unable to provide specific solutions or SQL queries for detected anomalies since no anomalies were identified in the table you mentioned. If you have details of anomalies in other tables, please provide them for further assistance.
========================================================================================================================================

table_name : SDL_MDS_PH_POS_PRODUCT  
solution : Correct the 'id' field from '-1' to a valid positive integer. Update the 'cust_item_prc' field to a non-negative value.

sql
SELECT *
FROM SDL_MDS_PH_POS_PRODUCT
WHERE id < 0 OR cust_item_prc < 0;
========================================================================================================================================

table_name: SDL_AU_DSTR_SIGMA_HEADER  
solution: Add numeric data columns required for anomaly detection.

SQL query to identify anomalies:
sql
SELECT * 
FROM SDL_AU_DSTR_SIGMA_HEADER 
WHERE <numeric_column> IS NULL OR <numeric_column> = 0;
========================================================================================================================================

table_name : SDL_LA_GT_VISIT  
solution : Ensure numeric data is populated for anomaly detection by checking data types and properly mapping numeric fields.

SQL Query:
sql
SELECT * 
FROM SDL_LA_GT_VISIT 
WHERE NOT TRY_CAST(<numeric_column> AS NUMBER) IS NULL;
========================================================================================================================================

table_name: SDL_MDS_MY_PS_WEIGHTS  
solution: Update the 'weight' value to a positive number as negative weights are not valid.

SQL query to detect anomalies:
sql
SELECT * 
FROM SDL_MDS_MY_PS_WEIGHTS 
WHERE weight < 0;
========================================================================================================================================

table_name: SDL_MDS_PH_GT_CUSTOMER  
solution: Add numeric columns to 'SDL_MDS_PH_GT_CUSTOMER' for anomaly detection.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_PH_GT_CUSTOMER 
WHERE 1=0; -- Placeholder query to modify once numeric columns are added for anomaly detection
========================================================================================================================================

table_name : SDL_MDS_VN_ECOM_NTS  
solution : Check and correct the 'versionnumber' and 'version_id' fields to ensure consistency, as they may cause anomalies.

SQL query:
sql
SELECT * 
FROM SDL_MDS_VN_ECOM_NTS 
WHERE versionnumber != version_id OR changetrackingmask < 0;
========================================================================================================================================

table_name : SDL_MDS_PH_ECOM_PRODUCT
solution : Update the 'changetrackingmask' value to a valid positive integer for the row with id '00000000-0000-0000-0000-000000000000'.

-- Snowflake SQL query to find anomalies
SELECT * 
FROM SDL_MDS_PH_ECOM_PRODUCT 
WHERE id = '00000000-0000-0000-0000-000000000000' 
AND changetrackingmask < 0;
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_ECOM_PRODUCT  
solution : The anomaly in the 'SDL_MDS_PACIFIC_ECOM_PRODUCT' table is due to the mismatch between 'versionnumber' (50) and 'enterversionnumber' (-47). Ensure that 'enterversionnumber' is updated to reflect the correct positive value corresponding to 'versionnumber' for consistency.

SQL Query to detect anomalies:
sql
SELECT * 
FROM SDL_MDS_PACIFIC_ECOM_PRODUCT
WHERE versionnumber <= 0
OR enterversionnumber <= 0
OR versionnumber != ABS(enterversionnumber);
========================================================================================================================================

table_name : SDL_MY_AFGR  
solution : Ensure the table contains numeric data by reviewing the data types and populating the table with appropriate numeric values if missing.

sql
SELECT *
FROM SDL_MY_AFGR
WHERE NOT EXISTS (
  SELECT 1
  FROM INFORMATION_SCHEMA.COLUMNS
  WHERE TABLE_NAME = 'SDL_MY_AFGR'
    AND (DATA_TYPE LIKE '%INT%' OR DATA_TYPE LIKE '%FLOAT%' OR DATA_TYPE LIKE '%DECIMAL%')
);
========================================================================================================================================

table_name : SDL_MY_DAILY_SELLOUT_SALES_FACT_MDS_SYNC  
solution : Ensure that numeric columns are correctly defined and populated. Check ETL processes for missing or incorrect data mapping.

SQL query:
sql
SELECT * 
FROM SDL_MY_DAILY_SELLOUT_SALES_FACT_MDS_SYNC
WHERE <numeric_column> IS NULL OR NOT <numeric_column> ~ '^[0-9]+$'
========================================================================================================================================

table_name : SDL_MDS_APAC_DCL_CUSTOMERS  
solution : Verify 'sales_channel_id' as it should not be zero. Correct 'cust_num' from negative to positive. Validate 'enterusername' and 'lastchgusername' to ensure they are correct users.  
snowflake_query :  
sql  
SELECT *  
FROM SDL_MDS_APAC_DCL_CUSTOMERS  
WHERE sales_channel_id = 0  
   OR cust_num < 0  
   OR validationstatus = 'Invalid';
========================================================================================================================================

table_name : SDL_JNJ_CONSUMERREACH_SFM  
solution : Verify the 'retail' column value 'X' as it seems to be a placeholder or incorrect. Update it to the correct retail identifier.

sql
SELECT *
FROM SDL_JNJ_CONSUMERREACH_SFM
WHERE retail = 'X';
========================================================================================================================================

table_name : SDL_CSL_SCHEME_HEADER  
solution : Ensure the table contains numeric columns for anomaly detection; add or correct numeric fields as needed.

SQL Query:
sql
SELECT * 
FROM SDL_CSL_SCHEME_HEADER
WHERE NOT EXISTS (
    SELECT 1
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'SDL_CSL_SCHEME_HEADER'
    AND DATA_TYPE IN ('NUMBER', 'FLOAT', 'INTEGER', 'DECIMAL')
);
========================================================================================================================================

table_name: SDL_KR_COUPANG_DAILY_BRAND_REVIEWS  
solution: Update 'run_id' to a valid positive integer value to replace the anomalous '-1'.

sql
SELECT * 
FROM SDL_KR_COUPANG_DAILY_BRAND_REVIEWS
WHERE run_id < 0;
========================================================================================================================================

table_name : SDL_MY_DAILY_SELLOUT_STOCK_FACT  
solution : Ensure numeric data types are correctly defined and populated for anomaly detection.

sql
SELECT * 
FROM SDL_MY_DAILY_SELLOUT_STOCK_FACT 
WHERE NOT TRY_CAST(<numeric_column> AS NUMBER) IS NULL;
========================================================================================================================================

table_name : SDL_POP6_SG_DISPLAYS  
solution : Correct the 'start_date' and 'end_date' so 'start_date' is earlier than 'end_date'. Ensure 'display_number' and 'run_id' are positive integers.

sql
SELECT *
FROM SDL_POP6_SG_DISPLAYS
WHERE start_date > end_date
   OR display_number < 0
   OR run_id < 0;
========================================================================================================================================

table_name : SDL_AU_DSTR_CHS_HEADER  
solution : Ensure that the table contains numeric columns for anomaly detection by adding appropriate numeric data types to relevant columns or by correcting data entry processes to include numeric values.  

sql
SELECT *  
FROM SDL_AU_DSTR_CHS_HEADER  
WHERE TRY_CAST(<numeric_column> AS NUMBER) IS NULL
========================================================================================================================================

table_name : SDL_MDS_SG_PS_WEIGHTS  
solution : Correct 'weight' value to be within the valid range according to business rules, as 400.0 might be out of expected bounds.  

sql
SELECT * 
FROM SDL_MDS_SG_PS_WEIGHTS 
WHERE weight > <upper_bound> OR weight < <lower_bound>;
 

Replace `<upper_bound>` and `<lower_bound>` with the appropriate values according to the business requirements.
========================================================================================================================================

table_name : SDL_KR_COUPANG_PRODUCT_RANKING_MONTHLY
solution : No action needed as no anomalies were detected.

-- Snowflake SQL query to check for anomalies
-- This query assumes anomalies are to be detected based on certain criteria which aren't specified in the prompt. 
-- Assuming common anomaly checks like null values, duplicates, or outliers.
SELECT * 
FROM SDL_KR_COUPANG_PRODUCT_RANKING_MONTHLY
WHERE <anomaly_detection_criteria>;
========================================================================================================================================

table_name : SDL_CSL_RETAILERHIERARCHY  
solution : Correct the negative turnover value of -2100.0 to a valid positive number.

SQL query to get anomalies:
sql
SELECT * 
FROM SDL_CSL_RETAILERHIERARCHY 
WHERE turnover < 0;
========================================================================================================================================

table_name : SDL_MATERIAL_PKA_MARA_EXTRACT  
solution : Add numeric columns with relevant data for anomaly detection, ensure data types are correct.  

SQL Query:  
sql
SELECT *  
FROM SDL_MATERIAL_PKA_MARA_EXTRACT  
WHERE TRY_TO_NUMBER(<column_name>) IS NULL;
========================================================================================================================================

table_name : SDL_MDS_PH_POS_PRODUCT_TEMP  
solution : Ensure numeric data is properly ingested into the table, and verify data types for relevant columns to support numeric entries.

SQL Query:
sql
SELECT *
FROM SDL_MDS_PH_POS_PRODUCT_TEMP
WHERE NOT (COLUMN_NAME1 IS NOT NULL AND TRY_CAST(COLUMN_NAME1 AS NUMBER) IS NOT NULL)
   OR NOT (COLUMN_NAME2 IS NOT NULL AND TRY_CAST(COLUMN_NAME2 AS NUMBER) IS NOT NULL);

Replace `COLUMN_NAME1`, `COLUMN_NAME2`, etc., with the actual column names that are expected to hold numeric data.
========================================================================================================================================

table_name: SDL_MDS_SG_PRODUCT_HIERARCHY  
solution: Update negative values for 'id', 'versionnumber', 'brand_mapping_code', 'new_category_code', 'product_type_code', 'product_variant_code', 'lastchgversionnumber' to positive integers. Set 'versionflag', 'name', 'enterusername', 'lastchgusername', and 'validationstatus' to appropriate non-null values.  

SQL Query:  
sql
SELECT * 
FROM SDL_MDS_SG_PRODUCT_HIERARCHY
WHERE id < 0
   OR versionnumber < 0
   OR brand_mapping_code < 0
   OR new_category_code < 0
   OR product_type_code < 0
   OR product_variant_code < 0
   OR lastchgversionnumber < 0
   OR versionflag IS NULL
   OR name IS NULL
   OR enterusername IS NULL
   OR lastchgusername IS NULL
   OR validationstatus IS NULL;
========================================================================================================================================

Certainly! Here's a concise solution and a Snowflake-friendly SQL query for the detected anomaly in the specified table:


table_name : SDL_MDS_VN_GT_MSL_SHOPTYPE_MAPPING
solution : Update the 'active' status to 0 if 'versionflag' is 'inactive' for id 25 to ensure consistency in the status fields.

SQL Query:
SELECT * 
FROM SDL_MDS_VN_GT_MSL_SHOPTYPE_MAPPING
WHERE id = 25 AND versionflag = 'inactive' AND active = 1;
========================================================================================================================================

table_name : PRODTR_PRODUCTTRANSLATION  
solution : Correct the negative 'fetchedsequence' value to a valid positive integer.

SQL Query to detect anomalies:
sql
SELECT *
FROM PRODTR_PRODUCTTRANSLATION
WHERE fetchedsequence < 0;
========================================================================================================================================

table_name : SDL_KR_COUPANG_BRAND_RANKING  
solution : Update 'run_id' from -101 to a positive integer that correctly corresponds to its intended sequence or batch identifier.

sql
SELECT *
FROM SDL_KR_COUPANG_BRAND_RANKING
WHERE run_id < 0;
========================================================================================================================================

table_name : SDL_KR_COUPANG_PRODUCTSALEREPORT  
solution : Correct the negative 'units_sold' value to a positive number, verify the transaction data to ensure that the sales are accurately recorded, and consult with the data source to correct any discrepancies.

SQL Query:
sql
SELECT *
FROM SDL_KR_COUPANG_PRODUCTSALEREPORT
WHERE units_sold < 0;
========================================================================================================================================

table_name : SDL_ECOMMERCE_6PAI  
solution : Investigate the negative sales growth and correct any data entry errors. Verify if the sales data for January 2021 is accurate, as negative growth figures are unusual. Adjust the plan or forecast accordingly if data is correct.

sql
SELECT *
FROM SDL_ECOMMERCE_6PAI
WHERE score_weighted < 0 OR score_non_weighted < 0 OR gap_vs_pm < 0 OR gap_vs_p3m < 0 OR gap_vs_plan < 0;
========================================================================================================================================

table_name : SDL_POP6_SG_POP_LISTS  
solution : The 'run_id' value '-32' seems anomalous and possibly incorrect. Verify and correct the 'run_id' to a valid positive integer.

sql
SELECT * 
FROM SDL_POP6_SG_POP_LISTS
WHERE run_id < 0;
========================================================================================================================================

table_name : KPI2DATA_MAPPING  
solution : Ensure numeric data is available in the required columns by checking data types and input sources. Consider adding default values or converting existing data to numeric where necessary.

SQL Query:
sql
SELECT *
FROM KPI2DATA_MAPPING
WHERE TRY_CAST(column_name AS NUMBER) IS NULL;
========================================================================================================================================

table_name : SDL_CSL_TBL_SCHEMEWISE_APNO  
solution : Update the 'createduserid' to a valid positive integer or assign a default valid ID.

sql
SELECT *
FROM SDL_CSL_TBL_SCHEMEWISE_APNO
WHERE createduserid < 0;
========================================================================================================================================

table_name : SDL_MDS_MY_TARGETS  
solution : Ensure numeric data is present in the required columns for anomaly detection by verifying data types and correcting them if necessary. Populate missing numeric values.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_MY_TARGETS
WHERE NOT (COLUMN_NAME REGEXP '^[0-9]+(\.[0-9]+)?$')
   OR COLUMN_NAME IS NULL;
========================================================================================================================================

table_name : SDL_MY_CUSTOMER_DIM  
solution : Add numeric data columns to enable anomaly detection.

SQL Query:
sql
SELECT * FROM SDL_MY_CUSTOMER_DIM 
WHERE FALSE; -- Modify to include numeric data columns for anomaly detection
========================================================================================================================================

table_name : SDL_POP6_SG_EXECUTED_VISITS  
solution : Correct the invalid longitude and latitude values to valid geographical coordinates.

sql
SELECT * 
FROM SDL_POP6_SG_EXECUTED_VISITS 
WHERE check_in_longitude < -180 OR check_in_longitude > 180 
   OR check_in_latitude < -90 OR check_in_latitude > 90 
   OR check_out_longitude < -180 OR check_out_longitude > 180 
   OR check_out_latitude < -90 OR check_out_latitude > 90;
========================================================================================================================================

table_name : SDL_MDS_PH_DISTRIBUTOR_PRODUCT
solution : Update 'promoendperiod' to be later than 'promostartperiod', and confirm 'validationstatus' based on business rules.


SQL query to detect anomalies:

sql
SELECT *
FROM SDL_MDS_PH_DISTRIBUTOR_PRODUCT
WHERE promoendperiod <= promostartperiod
   OR validationstatus = 'invalid';
========================================================================================================================================

table_name: SDL_CSL_ORDERBOOKING  
solution: Correct the 'orddlvdate' to be after or equal to 'orderdate', update 'ordtotalamt' to be non-negative, and ensure 'prdgrossamt' aligns with 'prdqty' and 'prdbilledqty' values.

sql
SELECT * 
FROM SDL_CSL_ORDERBOOKING 
WHERE orddlvdate < orderdate 
   OR ordtotalamt < 0 
   OR prdgrossamt <> (prdqty * prdselrate) 
   OR prdgrossamt <> (prdbilledqty * prdselrate);
========================================================================================================================================

table_name : SDL_MDS_MY_CUSTOMER_HIERARCHY  
solution : Ensure numeric data types are used where necessary and populate missing numeric values for accurate anomaly detection.  

sql
SELECT *  
FROM SDL_MDS_MY_CUSTOMER_HIERARCHY  
WHERE <numeric_column> IS NULL OR <numeric_column> NOT REGEXP '^[0-9]+$';
========================================================================================================================================

table_name : SDL_LA_GT_ROUTE_HEADER  
solution : Add numeric columns necessary for anomaly detection, such as route duration or distance. Ensure these fields are populated with valid numeric data.  

SQL Query:   
sql
SELECT *
FROM SDL_LA_GT_ROUTE_HEADER
WHERE 1 = 0; -- Placeholder for anomaly detection logic once numeric data is added
========================================================================================================================================

table_name : SDL_MY_CIW_MAP  
solution : Ensure the table contains relevant numeric data for anomaly detection; check data types and data integrity.

sql
SELECT * 
FROM SDL_MY_CIW_MAP 
WHERE TRY_CAST(column_name AS NUMBER) IS NULL;
========================================================================================================================================

table_name : SDL_JNJ_OSA_OOS_REPORT  
solution : Verify and correct the 'yearmo' value to ensure it matches the correct year and month for the 'osa_oos_date' field. Ensure the 'run_id' is a positive integer to avoid invalid data entry.

SQL Query:
sql
SELECT *
FROM SDL_JNJ_OSA_OOS_REPORT
WHERE yearmo::VARCHAR != TO_CHAR(osa_oos_date, 'YYYYMM')
   OR run_id < 0;
========================================================================================================================================

table_name : SDL_MDS_VN_PS_WEIGHTS  
solution : Change the 'versionnumber' value from -2 to a valid positive integer that aligns with expected version tracking in your database.

sql
SELECT * 
FROM SDL_MDS_VN_PS_WEIGHTS
WHERE versionnumber < 0;
========================================================================================================================================

table_name : SDL_DSTR_COLES_INV  
solution : Add numeric data to enable anomaly detection. Ensure columns intended for numeric data are correctly defined and populated.  

sql
SELECT *
FROM SDL_DSTR_COLES_INV
WHERE NOT EXISTS (
    SELECT 1
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = 'SDL_DSTR_COLES_INV'
    AND DATA_TYPE IN ('NUMBER', 'FLOAT', 'INTEGER')
);
========================================================================================================================================

table_name : SDL_AU_DSTR_API_HEADER  
solution : Add numeric columns or ensure existing columns contain numeric data for anomaly detection.  

SQL Query:  
sql
SELECT *  
FROM SDL_AU_DSTR_API_HEADER  
WHERE TRY_CAST(column_name AS NUMBER) IS NULL;  -- Replace 'column_name' with specific column names to check for non-numeric data
========================================================================================================================================

table_name : SDL_MDS_MY_PS_MSL  
solution : Update `enterversionnumber` from `-28` to a positive integer to maintain data consistency.

SQL query to get anomalies:
sql
SELECT * 
FROM SDL_MDS_MY_PS_MSL
WHERE enterversionnumber < 0;
========================================================================================================================================

table_name : SDL_CSL_SALESMANMASTER
solution : The 'createddate' field has a future date (2027-02-01). Correct it to a valid past or present date.

SQL Query to detect anomalies:
SELECT * 
FROM SDL_CSL_SALESMANMASTER 
WHERE createddate > CURRENT_DATE;
========================================================================================================================================

table_name: SDL_DISTRIBUTOR_IVY_ORDER  
solution: The issue is with the negative order_latitude value, which should be within valid geographical coordinate ranges. Verify the data entry process or source system providing this data.

SQL Query to detect anomalies:
sql
SELECT * 
FROM SDL_DISTRIBUTOR_IVY_ORDER
WHERE order_latitude < -90 OR order_latitude > 90;
========================================================================================================================================

table_name : SDL_POP6_SG_DISPLAY_PLANS  
solution : Update the status to a valid value and ensure 'required_number_of_displays' is a positive integer.

SQL query to detect anomalies:
sql
SELECT *
FROM SDL_POP6_SG_DISPLAY_PLANS
WHERE status < 0
   OR required_number_of_displays < 0;
========================================================================================================================================

table_name : SDL_POP6_SG_PRODUCTS
solution : Correct negative values for 'unit_price', 'display_order', 'largest_uom_quantity', 'middle_uom_quantity', 'smallest_uom_quantity', and 'run_id' to appropriate positive values.

SQL Query:
SELECT *
FROM SDL_POP6_SG_PRODUCTS
WHERE unit_price < 0
   OR display_order < 0
   OR largest_uom_quantity < 0
   OR middle_uom_quantity < 0
   OR smallest_uom_quantity < 0
   OR run_id < 0;
========================================================================================================================================

table_name : SDL_POP6_SG_PRODUCT_ATTRIBUTE_AUDITS  
solution : The anomaly in the dataset is due to the 'audit_form_id' being 'None'. Ensure that the 'audit_form_id' is correctly populated for all rows as it is critical for linking audit forms.

SQL Query to detect anomalies:
sql
SELECT *
FROM SDL_POP6_SG_PRODUCT_ATTRIBUTE_AUDITS
WHERE audit_form_id IS NULL;
========================================================================================================================================

table_name : SDL_ID_POS_DIAMOND_SELLOUT  
solution : Correct the negative quantity (-10.0) for 'Diamond Ring' to ensure it reflects actual sales data.

SQL Query:
sql
SELECT *
FROM SDL_ID_POS_DIAMOND_SELLOUT
WHERE qty < 0;
========================================================================================================================================

table_name : SDL_MDS_VN_PRICE_PRODUCTS
solution : Check the data types for 'price' and 'lastchgversionnumber'; ensure they are correctly defined as float and integer respectively, and verify 'price' is not exceeding logical limits for the product category.

SQL Query to get anomalies:

sql
SELECT *
FROM SDL_MDS_VN_PRICE_PRODUCTS
WHERE TRY_CAST(price AS FLOAT) IS NULL
   OR TRY_CAST(lastchgversionnumber AS INTEGER) IS NULL
   OR price > 1000;  -- Assuming 1000 is a logical limit for this context
========================================================================================================================================

table_name : SDL_SPIRAL_MTI_OFFTAKE  
solution : Ensure numeric data is populated in the table by checking the data source and ETL processes for errors. Validate data types and correct inconsistencies.

sql
SELECT * 
FROM SDL_SPIRAL_MTI_OFFTAKE
WHERE TRY_CAST(column_name AS NUMBER) IS NULL;
========================================================================================================================================

table_name : SDL_API_DSTR  
solution : Add numeric columns for anomaly detection or ensure existing data is numeric.

sql
SELECT *
FROM SDL_API_DSTR
WHERE TRY_TO_NUMBER(column_name) IS NULL;
========================================================================================================================================

table_name : SDL_LA_GT_ROUTE_DETAIL_TEMP  
solution : Ensure that numeric columns contain valid numeric data and are not null. Update the data type if necessary.

SQL query: 
sql
SELECT *
FROM SDL_LA_GT_ROUTE_DETAIL_TEMP
WHERE NOT TRY_TO_NUMBER(<numeric_column_name>) IS NOT NULL;
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_ECOM_NTS  
solution : Correct the 'month' value to be within the valid range (1-12) for the row with 'id' 1.  
  
SQL Query:  
sql  
SELECT *  
FROM SDL_MDS_PACIFIC_ECOM_NTS  
WHERE month < 1 OR month > 12;
========================================================================================================================================

table_name : SDL_POP6_SG_POPS  
solution : Correct the 'status' and 'run_id' fields to valid positive values, and ensure the 'longitude' and 'latitude' are within valid geographic ranges.

SQL Query to detect anomalies:
sql
SELECT * 
FROM SDL_POP6_SG_POPS
WHERE status < 0 
   OR run_id < 0 
   OR longitude NOT BETWEEN -180 AND 180 
   OR latitude NOT BETWEEN -90 AND 90;
========================================================================================================================================

table_name : SDL_DSTR_WOOLWORTH_INV  
solution : Ensure numeric data is present in columns intended for numerical analysis by updating the data type or correcting data entries.

SQL Query:
sql
SELECT *
FROM SDL_DSTR_WOOLWORTH_INV
WHERE TRY_CAST(column_name AS NUMBER) IS NULL;

Replace `column_name` with the specific numeric column names you want to check.
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_CUST_ATTRB  
solution : Add numeric columns or ensure existing columns are correctly typed as numeric for anomaly detection.

sql
SELECT COLUMN_NAME, DATA_TYPE 
FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_NAME = 'SDL_MDS_PACIFIC_CUST_ATTRB'
AND DATA_TYPE NOT IN ('NUMBER', 'FLOAT', 'DECIMAL', 'INTEGER');
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_COGS_MASTER  
solution : Correct the negative value in 'nz_cogs_per_unit' for entry with 'id' 49 to a valid positive number as negative cost per unit is illogical.

sql
SELECT * 
FROM SDL_MDS_PACIFIC_COGS_MASTER 
WHERE nz_cogs_per_unit < 0;
========================================================================================================================================

table_name : SDL_MDS_SG_PS_TARGETS  
solution : Check if 'versionnumber' 9999 is valid or a placeholder; update if necessary. Verify 'lastchgdatetime' and 'enterdatetime' for consistency with 'versionnumber'. Confirm 'value' 600.0 aligns with 'kpi' KPI7 expectations.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_SG_PS_TARGETS 
WHERE versionnumber = 9999
   OR lastchgdatetime != enterdatetime
   OR kpi = 'KPI7' AND value != 600.0;
========================================================================================================================================

table_name : SDL_MDS_VN_SKU_BENCHMARKS
solution : Adjust the 'valid_to' date to be after the 'valid_from' date.

SQL query:
sql
SELECT *
FROM SDL_MDS_VN_SKU_BENCHMARKS
WHERE valid_to <= valid_from;
========================================================================================================================================

table_name : SDL_ECOM_SEARCH_ADS_BY_DATE  
solution : Check for consistency in sales_usd to sales_lcy conversion rate and ensure item_conversion_rate is calculated correctly. Verify order and buyer counts are logical.

SQL Query:
sql
SELECT *
FROM SDL_ECOM_SEARCH_ADS_BY_DATE
WHERE 
    ABS(sales_usd * 2 - sales_lcy) > 0.01 OR 
    item_conversion_rate != (orders::FLOAT / visits) * 100 OR
    orders > units_sold OR
    buyers > orders OR
    add_to_cart_units > units_sold;
========================================================================================================================================

table_name : SDL_ECOM_AMS
solution : No action needed as no anomalies detected.


sql
-- SQL query to check for anomalies in a Snowflake table
-- Since no anomalies were detected, this query will not return any results for SDL_ECOM_AMS
SELECT *
FROM SDL_ECOM_AMS
WHERE <condition_for_anomaly_detection>;
-- Replace <condition_for_anomaly_detection> with actual conditions for identifying anomalies
========================================================================================================================================

table_name : SDL_DISTRIBUTOR_IVY_MERCHANDISING  
solution : Ensure the table has numeric columns with data; add numeric fields if missing or populate existing numeric fields.  
  
sql  
SELECT *  
FROM SDL_DISTRIBUTOR_IVY_MERCHANDISING  
WHERE NOT EXISTS (  
    SELECT *  
    FROM INFORMATION_SCHEMA.COLUMNS  
    WHERE TABLE_NAME = 'SDL_DISTRIBUTOR_IVY_MERCHANDISING'  
    AND DATA_TYPE IN ('NUMBER', 'FLOAT', 'DECIMAL', 'INTEGER')  
);
========================================================================================================================================

table_name : SDL_MDS_MY_GT_PRODUCT_MAPPING  
solution : Update the 'id' field to a valid positive integer, as negative IDs are typically invalid.

SQL query to detect anomalies:
sql
SELECT * 
FROM SDL_MDS_MY_GT_PRODUCT_MAPPING 
WHERE id < 0;
========================================================================================================================================

table_name : SDL_HK_WINGKEUNG_DIRECT_SALES_REP_ROUTE_PLAN  
solution : Ensure numeric data is present for anomaly detection by adding or correcting numeric fields.

sql
SELECT * 
FROM SDL_HK_WINGKEUNG_DIRECT_SALES_REP_ROUTE_PLAN
WHERE TRY_TO_NUMBER(<numeric_column>) IS NULL;
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_PRODUCT_MAPPING_COLES  
solution : Correct the negative 'version_id' value to a positive integer to maintain data consistency.

SQL Query to detect anomalies:

sql
SELECT * 
FROM SDL_MDS_PACIFIC_PRODUCT_MAPPING_COLES
WHERE version_id < 0;
========================================================================================================================================

Certainly. Since you mentioned that no anomalies were detected in the table 'SDL_KR_COUPANG_PRODUCT_SUMMARY_WEEKLY', there is no specific solution needed for this table. However, I can provide a Snowflake-friendly SQL query template to check for anomalies, which can be used for other tables as well. Anomalies might include issues like null values, duplicates, or unexpected data ranges, depending on the context.

Here's how you can structure it:

sql
-- Example query template to check for anomalies
SELECT 
    column_name, 
    COUNT(*) AS occurrence_count 
FROM 
    SDL_KR_COUPANG_PRODUCT_SUMMARY_WEEKLY
WHERE 
    column_name IS NULL  -- Check for NULL values
    OR column_name NOT BETWEEN expected_min AND expected_max  -- Check for unexpected data ranges
GROUP BY 
    column_name
HAVING 
    COUNT(*) > 1; -- Modify as necessary to check for duplicates or other specific conditions


This template is a starting point and should be customized based on the specific columns and anomaly definitions applicable to your data.
========================================================================================================================================

table_name : SDL_MDS_SG_SKU_BENCHMARKS
solution : Correct negative values in 'version_id', 'jj_target', and 'comp_packsize'. Update 'validationstatus' to 'valid' after corrections.

SQL Query:
SELECT * 
FROM SDL_MDS_SG_SKU_BENCHMARKS
WHERE version_id < 0 
   OR jj_target < 0 
   OR comp_packsize < 0 
   OR validationstatus = 'invalid';
========================================================================================================================================

table_name : SDL_MDS_VN_STORE_RETAIL_ENVIRONMENT_MAPPING  
solution : Add numeric columns with relevant numerical data for anomaly detection.

SQL query to identify anomalies:  
sql
SELECT *  
FROM SDL_MDS_VN_STORE_RETAIL_ENVIRONMENT_MAPPING  
WHERE <numeric_column> IS NULL OR <numeric_column> = ''  


(Note: Replace `<numeric_column>` with the actual column name intended for numerical data.)
========================================================================================================================================

table_name : SDL_MDS_SG_ECOM_PRODUCT
solution : Review and correct the 'upc' field as it may have an incorrect format or value. Ensure 'versionflag' reflects the correct status if 'inactive' is unintended.

SQL Query:
SELECT *
FROM SDL_MDS_SG_ECOM_PRODUCT
WHERE LENGTH(upc) != 13
   OR versionflag = 'inactive'
   OR id = 50;
========================================================================================================================================

table_name : SDL_MDS_PACIFIC_CUST_CIW_PLAN  
solution : Correct the negative values for 'id', 'version_id', 'goal_qty', 'goal_gts', 'goal_eff_val', 'goal_jgf_si_val', 'goal_pmt_terms_val', 'goal_datains_val', 'goal_exp_adj_val', 'goal_jgf_sd_val', 'goal_ciw_tot', 'goal_cogs', 'goal_gp', and 'enterversionnumber'. Ensure 'time_period' is valid. Confirm 'validationstatus' as 'valid'.

sql
SELECT *
FROM SDL_MDS_PACIFIC_CUST_CIW_PLAN
WHERE id < 0
   OR version_id < 0
   OR goal_qty < 0
   OR goal_gts < 0
   OR goal_eff_val < 0
   OR goal_jgf_si_val < 0
   OR goal_pmt_terms_val < 0
   OR goal_datains_val < 0
   OR goal_exp_adj_val < 0
   OR goal_jgf_sd_val < 0
   OR goal_ciw_tot < 0
   OR goal_cogs < 0
   OR goal_gp < 0
   OR enterversionnumber < 0
   OR NOT REGEXP_LIKE(time_period, '^\d{4}-Q[1-4]$')
   OR validationstatus != 'valid';
========================================================================================================================================

table_name : SDL_MARKET_SHARE_QSD
solution : Correct the negative value for the 'value' column to ensure it reflects a valid profit figure.

SQL Query:

SELECT * 
FROM SDL_MARKET_SHARE_QSD
WHERE value < 0;
========================================================================================================================================

table_name : SDL_MDS_VN_CUSTOMER_SALES_ORGANIZATION
solution : Update the 'mti_code' to a valid positive number for 'id' 45, and ensure 'status' aligns with 'versionflag'.

SQL Query:
SELECT *
FROM SDL_MDS_VN_CUSTOMER_SALES_ORGANIZATION
WHERE mti_code < 0 OR status != versionflag;
========================================================================================================================================

table_name : SDL_POP6_SG_PLANNED_VISITS  
solution : Update the 'run_id' to a valid positive integer that corresponds to the correct report sequence, replacing the anomalous '-49'.

SQL Query to detect anomalies:
sql
SELECT * 
FROM SDL_POP6_SG_PLANNED_VISITS
WHERE run_id < 0;
========================================================================================================================================

table_name : MS_MASTERSURVEY
solution : The anomalous row in the 'MS_MASTERSURVEY' table has an unusually large 'fetchedsequence' value of 9999999999, which should be verified and corrected if it's not intentional or exceeds the expected range.

SQL Query:
SELECT *
FROM MS_MASTERSURVEY
WHERE fetchedsequence = 9999999999;
========================================================================================================================================

table_name : SDL_MDS_PH_CLOBOTICS_SOS_REF
solution : Update the 'version_id' from -1 to a valid positive integer and set 'validationstatus' to 'Valid'.


sql
-- SQL query to get anomalies
SELECT *
FROM SDL_MDS_PH_CLOBOTICS_SOS_REF
WHERE version_id = -1 OR validationstatus = 'Invalid';
========================================================================================================================================

table_name : SDL_MDS_PH_POS_PRICELIST  
solution : Correct the 'yearmo' column to a valid year-month format, ensure 'listpricecase', 'listpricedz', and 'listpriceunit' values are positive, and confirm if 'srp' value is valid.

sql
SELECT *
FROM SDL_MDS_PH_POS_PRICELIST
WHERE TRY_TO_DATE(SUBSTR(yearmo, 1, 4) || '-' || SUBSTR(yearmo, 6, 2) || '-01') IS NULL
   OR listpricecase < 0
   OR listpricedz < 0
   OR listpriceunit < 0
   OR srp < 0;
========================================================================================================================================

table_name : SDL_ALL_DISTRIBUTOR_SELLOUT_SALES_FACT  
solution : Correct the 'grs_val' to be a positive value, likely it should be 460000.0 based on the expected sales calculation.

SQL query to get anomalies:
sql
SELECT * 
FROM SDL_ALL_DISTRIBUTOR_SELLOUT_SALES_FACT
WHERE grs_val < 0;
========================================================================================================================================

table_name : SDL_MDS_VN_POS_PRODUCTS  
solution : Remove or update the duplicate entry with `muid` as 'duplicate-muid-1' to ensure uniqueness of the `muid` field.

SQL Query to detect anomalies:
sql
SELECT 
    muid, COUNT(*) as duplicate_count 
FROM 
    SDL_MDS_VN_POS_PRODUCTS 
GROUP BY 
    muid 
HAVING 
    COUNT(*) > 1;
========================================================================================================================================

table_name : SDL_DISTRIBUTOR_IVY_INVENTORY  
solution : Verify if the quantity (qty) of 2000 PCS is correct for distributor DIST016, warehouse WH016, product PRD016, and batch BATCH017 with expiry 2026-12-31. If incorrect, update the record with the correct quantity.

sql
SELECT * 
FROM SDL_DISTRIBUTOR_IVY_INVENTORY
WHERE distributor_code = 'DIST016'
  AND warehouse_code = 'WH016'
  AND product_code = 'PRD016'
  AND batch_code = 'BATCH017'
  AND batch_expiry_date = '2026-12-31'
  AND uom = 'PCS'
  AND qty = 2000;
========================================================================================================================================

table_name : SDL_ID_POS_DAILY_IDM_SELLOUT  
solution : Check for negative values in the `value` column. Validate data entry process for type 'B'. Ensure data consistency for `account` and `pos_cust`.

sql
SELECT *
FROM SDL_ID_POS_DAILY_IDM_SELLOUT
WHERE value < 0;
========================================================================================================================================

table_name : SDL_MDS_MY_ECOM_PRODUCT  
solution : Update the 'id' from -1 to a valid unique identifier, ensure 'version_id' matches 'versionnumber', correct 'changetrackingmask' from -99 to a valid value, and review the 'validationstatus' to ensure data integrity.  

sql
SELECT * 
FROM SDL_MDS_MY_ECOM_PRODUCT 
WHERE id = -1 
   OR version_id != versionnumber 
   OR changetrackingmask = -99 
   OR validationstatus = 'Invalid';
========================================================================================================================================

table_name : ITG_SFA_PM  
solution : Ensure the table has numeric data by adding numeric columns or verifying the data types of existing columns.

SQL Query:
sql
SELECT * 
FROM ITG_SFA_PM
WHERE TRY_CAST(column_name AS NUMBER) IS NULL;
========================================================================================================================================

table_name : SDL_ECOM_GMV_SHOPEE
solution : Correct the negative values for 'gross_sales', 'gross_units_sold', and 'product_views'. Ensure all growth rates are consistent with the actual values. Verify 'gross_avg_selling_price' calculation as it appears unusually low.


sql
SELECT *
FROM SDL_ECOM_GMV_SHOPEE
WHERE gross_sales < 0
   OR gross_units_sold < 0
   OR product_views < 0
   OR gross_orders_growth < 0
   OR gross_units_sold_growth < 0
   OR gross_avg_basket_size_growth < 0
   OR gross_avg_selling_price_growth < 0
   OR product_views_growth < 0
   OR product_visitors_growth < 0
   OR gross_order_conversion_rate_growth < 0
   OR gross_item_conversion_rate_growth < 0;
========================================================================================================================================

table_name : SDL_HK_WINGKEUNG_INDIRECT_SALES_REP_ROUTE_PLAN  
solution : Correct the 'visit_freq' to a positive integer and ensure 'week' value is within valid range.

sql
SELECT *
FROM SDL_HK_WINGKEUNG_INDIRECT_SALES_REP_ROUTE_PLAN
WHERE visit_freq < 0 OR week NOT BETWEEN 1 AND 52;
========================================================================================================================================

table_name : SDL_MDS_MY_PS_TARGETS  
solution : Add numeric columns or ensure existing numeric columns have data for anomaly detection.  

SQL Query:  
sql
SELECT *  
FROM SDL_MDS_MY_PS_TARGETS  
WHERE NOT EXISTS (  
  SELECT 1  
  FROM INFORMATION_SCHEMA.COLUMNS  
  WHERE TABLE_NAME = 'SDL_MDS_MY_PS_TARGETS'  
  AND DATA_TYPE IN ('NUMBER', 'FLOAT', 'INTEGER')  
);
========================================================================================================================================

table_name: SDL_CSL_CLASSMASTER  
solution: Check the 'classcode' for potential errors or inconsistencies that might not align with expected codes and validate the 'createduserid' to ensure it exists in the users' table.  

sql
SELECT * 
FROM SDL_CSL_CLASSMASTER 
WHERE classcode NOT IN (SELECT expected_classcode FROM expected_classcodes_table)
   OR createduserid NOT IN (SELECT userid FROM users_table);
========================================================================================================================================

table_name : SDL_MDS_PH_ISE_PARENT  
solution : Update the 'versionname' to a valid string, ensure 'versionnumber' is a positive number, and validate the 'changetrackingmask' and 'validationstatus' fields to match expected values.

SQL Query to detect anomalies:
sql
SELECT *
FROM SDL_MDS_PH_ISE_PARENT
WHERE versionname IS NULL
   OR versionnumber < 0
   OR changetrackingmask < 0
   OR validationstatus = 'Invalid';
========================================================================================================================================

table_name : SDL_HK_IMS_WINGKEUNG_INV  
solution : The anomaly is likely caused by a negative 'amount' which suggests a data entry error. Verify and correct the 'amount' field to ensure it reflects the correct positive stock level or transaction value.

SQL Query to detect anomalies:
sql
SELECT *
FROM SDL_HK_IMS_WINGKEUNG_INV
WHERE amount < 0;
========================================================================================================================================

table_name: SDL_MDS_VN_DISTRIBUTOR_CUSTOMERS  
solution: Correct the negative and NaN values in 'id', 'version_id', 'sub_channel_id', 'group_account_id', 'account_id', 'region_id', 'province_id'. Ensure 'versionname', 'group_account_code', 'group_account_name' are not None.

SQL query:
sql
SELECT * 
FROM SDL_MDS_VN_DISTRIBUTOR_CUSTOMERS
WHERE id < 0
   OR versionnumber < 0
   OR version_id < 0
   OR sub_channel_id IS NULL
   OR group_account_id IS NULL
   OR account_id < 0
   OR region_id IS NULL
   OR province_id < 0
   OR versionname IS NULL
   OR group_account_code IS NULL
   OR group_account_name IS NULL;
========================================================================================================================================

table_name : SDL_MDS_VN_GT_GTS_RATIO  
solution : The issue is with the 'percentage' column having an unusually high value of 500.0. Verify if this is a data entry mistake or if there is a legitimate reason for this value. If it is an error, correct it to a more reasonable range based on the business rules.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_VN_GT_GTS_RATIO 
WHERE percentage > 100;
========================================================================================================================================

table_name : SDL_IRI_SCAN_SALES
solution : Correct negative and overly high values in 'scan_sales', 'scan_units', 'numeric_distribution', 'weighted_distribution', and 'store_count_where_scanned'. Validate 'iri_ean' for correct format and ensure 'wk_end_dt' is within expected range.

SQL query to get anomalies:
SELECT *
FROM SDL_IRI_SCAN_SALES
WHERE scan_sales < 0
   OR scan_units < 0
   OR numeric_distribution < 0 OR numeric_distribution > 100
   OR weighted_distribution < 0 OR weighted_distribution > 100
   OR store_count_where_scanned < 0
   OR NOT REGEXP_LIKE(iri_ean, '^\d{12}$')
   OR wk_end_dt > CURRENT_DATE + INTERVAL '6 MONTH';
========================================================================================================================================

table_name : SDL_KR_COUPANG_PRODUCT_RANKING_DAILY
solution : Correct the 'run_id' value from '-100.0' to a valid positive integer that represents a legitimate run identifier.


sql
SELECT * 
FROM SDL_KR_COUPANG_PRODUCT_RANKING_DAILY
WHERE run_id < 0;
========================================================================================================================================

table_name : SDL_COMPETITIVE_BANNER_GROUP  
solution : Ensure numeric data types are assigned to relevant columns. Add missing numeric data or correct data type mismatches.  

SQL Query:  
sql  
SELECT column_name, data_type  
FROM information_schema.columns  
WHERE table_name = 'SDL_COMPETITIVE_BANNER_GROUP'  
AND data_type NOT IN ('NUMBER', 'INTEGER', 'FLOAT', 'DECIMAL');
========================================================================================================================================

table_name : SDL_MDS_LOG  
solution : Ensure numeric data types are present for columns where anomaly detection is required and populate them as needed.

SQL Query:
sql
SELECT * 
FROM SDL_MDS_LOG 
WHERE NOT EXISTS (
    SELECT 1 
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_NAME = 'SDL_MDS_LOG' 
    AND DATA_TYPE IN ('INTEGER', 'FLOAT', 'NUMBER', 'DECIMAL')
);
========================================================================================================================================

table_name : SDL_MDS_APAC_DCL_PRODUCTS  
solution : Correct the negative values for 'id', 'changetrackingmask', 'sales channel_id', and 'srp usd'. Ensure 'id' is positive, 'changetrackingmask' is non-negative, 'sales channel_id' is valid, and 'srp usd' is non-negative.

SQL Query:  
sql
SELECT *  
FROM SDL_MDS_APAC_DCL_PRODUCTS  
WHERE id < 0  
   OR changetrackingmask < 0  
   OR sales_channel_id < 0  
   OR srp_usd < 0;
========================================================================================================================================

table_name : SDL_HK_WINGKEUNG_SALES_REP_SO_TGT_FACT  
solution : Ensure that numeric data is populated in relevant columns, possibly by reviewing data loading processes or correcting data input errors.

sql
SELECT * 
FROM SDL_HK_WINGKEUNG_SALES_REP_SO_TGT_FACT 
WHERE CAST(COLUMN_NAME AS VARCHAR) NOT RLIKE '^[0-9]+(\.[0-9]+)?$';
========================================================================================================================================

table_name : SDL_ID_POS_CARREFOUR_SELLOUT  
solution : Ensure the table contains numeric data for anomaly detection, possibly by adding or correcting numeric columns.  

sql
SELECT * 
FROM SDL_ID_POS_CARREFOUR_SELLOUT 
WHERE NOT EXISTS (
    SELECT 1 
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_NAME = 'SDL_ID_POS_CARREFOUR_SELLOUT' 
    AND TABLE_SCHEMA = '<your_schema>'
    AND DATA_TYPE IN ('NUMBER', 'FLOAT', 'INTEGER')
);
========================================================================================================================================

table_name: SDL_MDS_VN_ECOM_PRODUCT  
solution: Update the 'validationstatus' to 'Validated' if the record has been reviewed and confirmed as correct, or correct any discrepancies if present.

SQL Query: 
sql
SELECT * 
FROM SDL_MDS_VN_ECOM_PRODUCT 
WHERE versionnumber = 99999 
  AND versionflag = 'Inactive' 
  AND validationstatus = 'Not Validated';
========================================================================================================================================

table_name : SDL_LA_GT_ROUTE_DETAIL  
solution : Ensure numeric columns are populated with valid data; check data types and source data integrity.

sql
SELECT * 
FROM SDL_LA_GT_ROUTE_DETAIL
WHERE CAST(numeric_column AS STRING) IS NULL OR numeric_column = '';
========================================================================================================================================

table_name : SDL_MDS_PH_NPI_PEG_ITEM  
solution : Update 'id' to a valid positive integer, correct 'salescycle' to a non-negative value, and ensure 'peg_itemcode_code' is a non-negative integer.

SQL Query to detect anomalies:
sql
SELECT * 
FROM SDL_MDS_PH_NPI_PEG_ITEM
WHERE id < 0 
   OR salescycle < 0 
   OR peg_itemcode_code < 0;
========================================================================================================================================

table_name : SDL_MDS_MY_GT_OUTLETATTRIBUTES  
solution : Anomalous row detected due to 'cust_year' being set to 9999, which is likely incorrect. Validate and correct the 'cust_year' to a realistic value.

sql
SELECT * 
FROM SDL_MDS_MY_GT_OUTLETATTRIBUTES 
WHERE cust_year = 9999;
========================================================================================================================================

table_name : SDL_MDS_VN_PS_STORE_TAGGING  
solution : Change 'changetrackingmask' value from -1 to a valid positive integer or null based on business logic. Ensure 'validationstatus' is updated to a valid status.

SQL Query: 
sql
SELECT * 
FROM SDL_MDS_VN_PS_STORE_TAGGING
WHERE changetrackingmask < 0;
========================================================================================================================================

