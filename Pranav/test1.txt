table_name : SALES_DATA  
solution : Review currency conversion rates for discrepancies, ensure exchange rates are correct and consistent; investigate negative invoice values and quantities for potential data entry errors; identify and remove duplicate entries.

-- SQL Query to detect anomalies in the SALES_DATA table
SELECT *
FROM SALES_DATA
WHERE 
    (tot_invc_val < 0 OR tot_invc_qty < 0) -- Detect negative values
    OR (from_crncy != to_crncy AND ex_rt != 1.000000) -- Currency conversion issues
    OR (cust_no, mat, store_cd, cal_day) IN (
        SELECT cust_no, mat, store_cd, cal_day
        FROM SALES_DATA
        GROUP BY cust_no, mat, store_cd, cal_day
        HAVING COUNT(*) > 1
    ); -- Detect duplicates
========================================================================================================================================

table_name: SALES_DATA  
solution: The anomalies in the 'SALES_DATA' table primarily arise from duplicate entries with different currency conversions. To resolve this, ensure that currency conversion is consistent and correct for each record. Consolidate duplicate records by removing duplicates and keeping only the necessary currency conversion. Implement data validation checks to prevent such duplications.

SQL Query (Snowflake-friendly) to get anomalies:

sql
SELECT *
FROM SALES_DATA
WHERE (cust_no, cal_day, store_cd, mat, to_crncy) IN (
    SELECT cust_no, cal_day, store_cd, mat, to_crncy
    FROM SALES_DATA
    GROUP BY cust_no, cal_day, store_cd, mat, to_crncy
    HAVING COUNT(*) > 1
)
ORDER BY cust_no, cal_day, store_cd, mat, to_crncy;


This query identifies duplicate entries based on customer number, calendar day, store code, material, and target currency, which are the primary factors contributing to the anomalies.
========================================================================================================================================

table_name : SALES_DATA
solution : Correct the currency exchange rates and ensure consistency for each transaction. Verify the currency conversion and remove duplicate records for the same transaction with different currencies.

SQL query to get anomalies:
SELECT *
FROM SALES_DATA
WHERE (cust_no, fisc_yr, fisc_mo, cal_day, ean_num) IN (
    SELECT cust_no, fisc_yr, fisc_mo, cal_day, ean_num
    FROM SALES_DATA
    GROUP BY cust_no, fisc_yr, fisc_mo, cal_day, ean_num
    HAVING COUNT(DISTINCT to_crncy) > 1
)
ORDER BY cust_no, fisc_yr, fisc_mo, cal_day, ean_num;
========================================================================================================================================

Certainly! Below is the solution based on the anomalies detected in the `SALES_DATA` table and a Snowflake-friendly SQL query to identify these anomalies.


table_name : SALES_DATA
solution : Check and correct the currency conversion rates for rows with discrepancies in `from_crncy` and `to_crncy`. Ensure that these rates are consistent with the official exchange rates. Investigate rows with identical fields except for `to_crncy` and ensure they are not duplicate records. Verify the `tot_invc_val` and `tot_invc_qty` for accuracy based on product specifications and sales agreements.

-- Snowflake SQL Query to Identify Anomalies
SELECT *
FROM SALES_DATA
WHERE (from_crncy = 'KRW' AND to_crncy IN ('USD', 'SGD') AND ex_rt NOT IN (0.000755, 0.001023))
   OR (from_crncy = to_crncy AND from_crncy = 'KRW' AND ex_rt <> 1.000000)
   OR (EXISTS (
        SELECT 1
        FROM SALES_DATA AS sub
        WHERE sub.sls_doc_typ = SALES_DATA.sls_doc_typ
          AND sub.billing_type = SALES_DATA.billing_type
          AND sub.cust_no = SALES_DATA.cust_no
          AND sub.fisc_yr = SALES_DATA.fisc_yr
          AND sub.fisc_mo = SALES_DATA.fisc_mo
          AND sub.cal_day = SALES_DATA.cal_day
          AND sub.fisc_wk_num = SALES_DATA.fisc_wk_num
          AND sub.sls_ofc_cv_cd = SALES_DATA.sls_ofc_cv_cd
          AND sub.sls_ofc_cv = SALES_DATA.sls_ofc_cv
          AND sub.sls_grp_cv_cd = SALES_DATA.sls_grp_cv_cd
          AND sub.sls_grp_cv = SALES_DATA.sls_grp_cv
          AND sub.sls_ofc_cy = SALES_DATA.sls_ofc_cy
          AND sub.mega_brnd_cd = SALES_DATA.mega_brnd_cd
          AND sub.brnd_desc = SALES_DATA.brnd_desc
          AND sub.mother_sku = SALES_DATA.mother_sku
          AND sub.prod_hier_l2 = SALES_DATA.prod_hier_l2
          AND sub.prod_hier_l3 = SALES_DATA.prod_hier_l3
          AND sub.category_1 = SALES_DATA.category_1
          AND sub.platform_ca = SALES_DATA.platform_ca
          AND sub.core_plat = SALES_DATA.core_plat
          AND sub.prod_hier_l9 = SALES_DATA.prod_hier_l9
          AND sub.key_acct_nm = SALES_DATA.key_acct_nm
          AND sub.channel = SALES_DATA.channel
          AND sub.store_cd = SALES_DATA.store_cd
          AND sub.store_nm = SALES_DATA.store_nm
          AND sub.store_typ = SALES_DATA.store_typ
          AND sub.mat = SALES_DATA.mat
          AND sub.matl_desc = SALES_DATA.matl_desc
          AND sub.ean_num = SALES_DATA.ean_num
          AND sub.tot_invc_val = SALES_DATA.tot_invc_val
          AND sub.tot_invc_qty = SALES_DATA.tot_invc_qty
          AND sub.country = SALES_DATA.country
          AND sub.edw_cust_nm = SALES_DATA.edw_cust_nm
          AND sub.currency = SALES_DATA.currency
          AND sub.company_nm = SALES_DATA.company_nm
          AND sub.current_fisc_per = SALES_DATA.current_fisc_per
          AND sub.from_crncy = SALES_DATA.from_crncy
          AND sub.to_crncy = SALES_DATA.to_crncy
          AND sub.ex_rt_typ = SALES_DATA.ex_rt_typ
          AND sub.ex_rt = SALES_DATA.ex_rt
          AND sub.country_cd = SALES_DATA.country_cd
          AND sub.rowid <> SALES_DATA.rowid
     ))


This query identifies anomalies based on currency conversion rates, duplicate records with minor differences, and ensures consistency in the `ex_rt` field. Adjust the query as necessary to fit specific table structures or additional anomaly detection criteria.
========================================================================================================================================

table_name : SALES_DATA  
solution : The anomalies are due to currency conversion discrepancies. Ensure all currency conversions are accurate and consistent for the same transactions, and remove duplicate records with differing `to_crncy` values.  

Snowflake SQL Query to detect anomalies:  
sql  
SELECT * 
FROM SALES_DATA 
WHERE (cust_no, cal_day, mat) IN (
    SELECT cust_no, cal_day, mat 
    FROM SALES_DATA 
    GROUP BY cust_no, cal_day, mat 
    HAVING COUNT(DISTINCT to_crncy) > 1
) 
ORDER BY cust_no, cal_day, mat, to_crncy;
========================================================================================================================================

table_name : SALES_DATA
solution : The anomalies are primarily related to currency conversion inconsistency for the same transaction. Ensure consistent currency conversion rates for each transaction to avoid duplicate entries in different currencies. Validate the exchange rates used and apply a consistent rate across the board.

SQL Query to get anomalies:
SELECT *
FROM SALES_DATA
WHERE (cust_no, cal_day, mat, tot_invc_val, tot_invc_qty) IN (
  SELECT cust_no, cal_day, mat, tot_invc_val, tot_invc_qty
  FROM SALES_DATA
  GROUP BY cust_no, cal_day, mat, tot_invc_val, tot_invc_qty
  HAVING COUNT(DISTINCT to_crncy, ex_rt) > 1
);
========================================================================================================================================

table_name: SALES_DATA  
solution: The anomalies are related to currency conversion inconsistencies. For rows with multiple currencies, ensure that the `from_crncy` and `to_crncy` fields are consistent for each transaction. Review and correct exchange rates (`ex_rt`) to ensure accuracy.

SQL Query to Identify Anomalies:
sql
SELECT *
FROM SALES_DATA
WHERE 
    (from_crncy = 'KRW' AND to_crncy IN ('USD', 'SGD') AND ex_rt NOT IN (0.000755, 0.001023))
    OR 
    (from_crncy = 'KRW' AND to_crncy = 'KRW' AND ex_rt != 1.000000);
========================================================================================================================================

table_name: SALES_DATA
solution: Review and correct the 'to_crncy' and 'ex_rt' fields for currency discrepancies. Ensure consistent currency conversion rates are applied. Review duplicate entries and ensure each transaction is unique and accurately recorded.

SQL Query:
SELECT *
FROM SALES_DATA
WHERE (to_crncy IN ('USD', 'SGD') AND ex_rt = 1.000000)
   OR (to_crncy = 'KRW' AND ex_rt <> 1.000000)
   OR (sls_doc_typ, billing_type, cust_no, fisc_yr, fisc_mo, cal_day, sls_ofc_cv_cd, sls_grp_cv_cd, store_cd, mat, currency) IN (
       SELECT sls_doc_typ, billing_type, cust_no, fisc_yr, fisc_mo, cal_day, sls_ofc_cv_cd, sls_grp_cv_cd, store_cd, mat, currency
       FROM SALES_DATA
       GROUP BY sls_doc_typ, billing_type, cust_no, fisc_yr, fisc_mo, cal_day, sls_ofc_cv_cd, sls_grp_cv_cd, store_cd, mat, currency
       HAVING COUNT(*) > 1
   );
========================================================================================================================================

table_name: SALES_DATA  
solution: The anomalies detected primarily involve currency conversion discrepancies (from_crncy and to_crncy fields). For each set of duplicate entries, ensure to maintain only the row with the correct or intended currency conversion rate and remove the others. Additionally, verify and correct any negative values in tot_invc_val and tot_invc_qty, as these might indicate incorrect data entry or need validation for returns.

SQL Query to detect anomalies:
sql
SELECT *
FROM SALES_DATA
WHERE 
   (tot_invc_val < 0 OR tot_invc_qty < 0)
   OR (cust_no, fisc_yr, fisc_mo, cal_day, mat, store_cd) IN (
       SELECT cust_no, fisc_yr, fisc_mo, cal_day, mat, store_cd
       FROM SALES_DATA
       GROUP BY cust_no, fisc_yr, fisc_mo, cal_day, mat, store_cd
       HAVING COUNT(*) > 1
   )
ORDER BY cust_no, fisc_yr, fisc_mo, cal_day, mat, store_cd;
========================================================================================================================================

table_name : SALES_DATA  
solution : The anomalies in the SALES_DATA table primarily involve currency exchange discrepancies with multiple currencies (HKD, SGD, USD) showing incorrect exchange rates. Ensure that the exchange rate (ex_rt) is consistent with the from_crncy and to_crncy columns and corresponds to the correct BWAR rate for conversions. Additionally, remove duplicate entries where all attributes are identical except for the currency conversion.

SQL Query to detect anomalies:
sql
SELECT 
    sls_doc_typ, billing_type, cust_no, fisc_yr, fisc_mo, cal_day, fisc_wk_num, 
    sls_ofc_cv_cd, sls_ofc_cv, sls_grp_cv_cd, sls_grp_cv, sls_ofc_cy, mega_brnd_cd, 
    brnd_desc, mother_sku, prod_hier_l2, prod_hier_l3, category_1, categroy_2, 
    platform_ca, core_plat, prod_hier_l9, key_acct_nm, channel, store_cd, store_nm, 
    store_typ, mat, matl_desc, ean_num, tot_invc_val, tot_invc_qty, country, 
    edw_cust_nm, currency, from_crncy, to_crncy, ex_rt_typ, ex_rt, country_cd, 
    company_nm, current_fisc_per,
    COUNT(*) OVER(PARTITION BY sls_doc_typ, billing_type, cust_no, cal_day, ean_num, tot_invc_val, tot_invc_qty, from_crncy, to_crncy) AS duplicate_count
FROM SALES_DATA
WHERE 
    (from_crncy = 'HKD' AND to_crncy IN ('USD', 'SGD') AND ex_rt NOT IN (0.12749, 0.17289))
    OR (duplicate_count > 1);
========================================================================================================================================

table_name : SALES_DATA
solution : 
1. Ensure consistent currency conversion: Rows with inconsistent conversion rates (e.g., from HKD to USD, SGD) should be reviewed and corrected to use a consistent conversion rate.
2. Remove duplicate rows: Several rows are exact duplicates except for the currency conversion rate. Identify and remove these duplicates, keeping only the unique rows.
3. Address "Not Available" entries: Replace "Not Available" entries with actual data or use a placeholder value if data is unavailable.
4. Validate 'category_1' and 'categroy_2' fields for spelling consistency: Correct the spelling of 'categroy_2' to 'category_2' for consistency across the dataset.

-- SQL query to identify anomalies
SELECT *
FROM SALES_DATA
WHERE (from_crncy != to_crncy AND ex_rt_typ = 'BWAR' AND ex_rt != 1.00000)
   OR (prod_hier_l2 = 'Not Available' OR prod_hier_l3 = 'Not Available' OR category_1 = 'Not Available')
   OR (categroy_2 != 'category_2')
   OR ROW_NUMBER() OVER (PARTITION BY sls_doc_typ, billing_type, cust_no, fisc_yr, fisc_mo, cal_day, sls_ofc_cv_cd, sls_ofc_cv, sls_grp_cv_cd, sls_grp_cv, sls_ofc_cy, mega_brnd_cd, brnd_desc, mother_sku, prod_hier_l2, prod_hier_l3, category_1, categroy_2, platform_ca, core_plat, prod_hier_l9, key_acct_nm, channel, store_cd, store_nm, store_typ, mat, matl_desc, ean_num, tot_invc_val, tot_invc_qty, country, edw_cust_nm, currency, from_crncy, to_crncy, ex_rt_typ, ex_rt, country_cd, company_nm, current_fisc_per ORDER BY ex_rt) > 1;
========================================================================================================================================

Certainly! Here's the solution and SQL query for the 'SALES_DATA' table anomalies:


table_name : SALES_DATA
solution : Review currency conversion as multiple entries exist for the same transaction in different currencies. Ensure consistent exchange rates and remove duplicate records with inconsistent currency conversion.


**SQL Query to Identify Anomalies:**

sql
SELECT 
    sls_doc_typ, billing_type, cust_no, fisc_yr, fisc_mo, cal_day, 
    fisc_wk_num, sls_ofc_cv_cd, sls_ofc_cv, sls_grp_cv_cd, sls_grp_cv,
    sls_ofc_cy, mega_brnd_cd, brnd_desc, mother_sku, prod_hier_l2,
    prod_hier_l3, category_1, categroy_2, platform_ca, core_plat, 
    prod_hier_l9, key_acct_nm, channel, store_cd, store_nm, store_typ, 
    mat, matl_desc, ean_num, tot_invc_val, tot_invc_qty, country, 
    edw_cust_nm, currency, from_crncy, to_crncy, ex_rt_typ, ex_rt, 
    country_cd, company_nm, current_fisc_per
FROM SALES_DATA
WHERE (cust_no, cal_day, matl_desc) IN (
    SELECT cust_no, cal_day, matl_desc
    FROM SALES_DATA
    GROUP BY cust_no, cal_day, matl_desc
    HAVING COUNT(DISTINCT to_crncy) > 1
)
ORDER BY cust_no, cal_day, matl_desc, to_crncy;


This query identifies rows where the same customer number (`cust_no`), calendar day (`cal_day`), and material description (`matl_desc`) have multiple entries with different `to_crncy` values, indicating potential anomalies in currency conversion or duplicate records.
========================================================================================================================================

Certainly, here is the solution for the anomalies detected in the `SALES_DATA` table:


table_name : SALES_DATA
solution : Review and correct currency conversion rates and ensure consistency in the 'to_crncy' column.


To identify these anomalies in a Snowflake-friendly SQL query, you can use the following script:

sql
SELECT 
    sls_doc_typ, 
    billing_type, 
    cust_no, 
    fisc_yr, 
    fisc_mo, 
    cal_day, 
    fisc_wk_num, 
    sls_ofc_cv_cd, 
    sls_ofc_cv, 
    sls_grp_cv_cd, 
    sls_grp_cv, 
    sls_ofc_cy, 
    mega_brnd_cd, 
    brnd_desc, 
    mother_sku, 
    prod_hier_l2, 
    prod_hier_l3, 
    category_1, 
    categroy_2, 
    platform_ca, 
    core_plat, 
    prod_hier_l9, 
    key_acct_nm, 
    channel, 
    store_cd, 
    store_nm, 
    store_typ, 
    mat, 
    matl_desc, 
    ean_num, 
    tot_invc_val, 
    tot_invc_qty, 
    country, 
    edw_cust_nm, 
    currency, 
    from_crncy, 
    to_crncy, 
    ex_rt_typ, 
    ex_rt, 
    country_cd, 
    company_nm, 
    current_fisc_per
FROM 
    SALES_DATA
WHERE 
    to_crncy IN ('SGD', 'USD') 
    AND ex_rt = 1.00000
OR
    to_crncy = 'TWD' 
    AND ex_rt <> 1.00000;


This query identifies anomalies where the exchange rate does not align with the expected values based on the `to_crncy` field.
========================================================================================================================================

Here is the solution for the anomalies detected in the 'SALES_DATA' table along with a Snowflake-friendly SQL query to identify these anomalies:


table_name : SALES_DATA
solution : 
1. Verify and correct currency conversion rates where multiple currencies are listed for the same transaction (e.g., HKD to USD, HKD to SGD).
2. Investigate and rectify entries with negative invoice values and quantities, as these should not occur under normal circumstances.
3. Confirm the accuracy of repeated entries with identical details and ensure they are not duplicates.

-- Snowflake-friendly SQL query to identify anomalies
SELECT 
  sls_doc_typ, billing_type, cust_no, fisc_yr, fisc_mo, cal_day, 
  fisc_wk_num, sls_ofc_cv_cd, sls_ofc_cv, sls_grp_cv_cd, sls_grp_cv, 
  sls_ofc_cy, mega_brnd_cd, brnd_desc, mother_sku, prod_hier_l2, 
  prod_hier_l3, category_1, categroy_2, platform_ca, core_plat, 
  prod_hier_l9, key_acct_nm, channel, store_cd, store_nm, store_typ, 
  mat, matl_desc, ean_num, tot_invc_val, tot_invc_qty, country, 
  edw_cust_nm, currency, from_crncy, to_crncy, ex_rt_typ, ex_rt, 
  country_cd, company_nm, current_fisc_per
FROM 
  SALES_DATA
WHERE 
  (tot_invc_val < 0 OR tot_invc_qty < 0) 
  OR (from_crncy <> to_crncy AND ex_rt <> 1.00000)
  OR EXISTS (
    SELECT 1
    FROM SALES_DATA AS inner_tbl
    WHERE 
      inner_tbl.cust_no = SALES_DATA.cust_no 
      AND inner_tbl.cal_day = SALES_DATA.cal_day
      AND inner_tbl.mat = SALES_DATA.mat
      AND inner_tbl.tot_invc_val = SALES_DATA.tot_invc_val
      AND inner_tbl.tot_invc_qty = SALES_DATA.tot_invc_qty
      AND inner_tbl.rowid <> SALES_DATA.rowid
  );
========================================================================================================================================

Certainly! Below is the solution and Snowflake query provided in the specified format for detecting anomalies in the `SDL_MDS_PH_LAV_CUSTOMER` table:

**Table: SDL_MDS_PH_LAV_CUSTOMER**

**Solution:**
1. **Negative Values**: Identify and correct fields that are not supposed to have negative values (e.g., IDs, ZIP codes, etc.).
2. **Duplicate Codes**: Identify and resolve duplicate codes, ensuring uniqueness where necessary.
3. **Invalid Values**: Detect and correct invalid entries (e.g., invalid geographical coordinates).
4. **Null or None Values**: Address and populate missing or null values with appropriate data or defaults.

**Snowflake Query:**

sql
SELECT 
    * 
FROM 
    SDL_MDS_PH_LAV_CUSTOMER
WHERE 
    PROVINCECODE_CODE LIKE '%DUP%' 
    OR REPORTGROUP7DESC_CODE LIKE '%DUP%' 
    OR DISTCODE_NAME LIKE '%DUP%' 
    OR REPORTGROUP5DESC_NAME LIKE '%DUP%' 
    OR REGIONCODE_NAME LIKE '%DUP%' 
    OR REPORTGROUP4DESC_NAME LIKE '%DUP%' 
    OR REPORTGROUP6DESC_NAME LIKE '%DUP%' 
    OR REPORTGROUP9DESC_NAME LIKE '%DUP%' 
    OR ZIPCODE_NAME LIKE '%DUP%' 
    OR ID < 0 
    OR REPORTGROUP5DESC_ID < 0 
    OR REPORTGROUP6DESC_ID < 0 
    OR REPORTGROUP7DESC_ID < 0 
    OR REPORTGROUP9DESC_ID < 0 
    OR REGIONCODE_ID < 0 
    OR LATITUDE < 0 
    OR LONGITUDE < 0 
    OR ZIPCODE_ID < 0 
    OR MUNCODE_ID < 0 
    OR DISTCODE_ID < 0 
    OR CHANNELCODE_ID < 0 
    OR CHANNELSUBGROUPCODE_ID < 0 
    OR PARENTCUSTOMER_ID < 0 
    OR PROVINCECODE_ID < 0 
    OR BARANGAYCODE_ID < 0
    OR REGIONCODE_CODE IS NULL 
    OR PROVINCECODE_NAME IS NULL 
    OR BARANGAYCODE_NAME IS NULL 
    OR MUNCODE_NAME IS NULL 
    OR CHANNELCODE_NAME IS NULL 
    OR CHANNELSUBGROUPCODE_NAME IS NULL;


This query efficiently identifies anomalies by searching for negative values, duplicate identifiers, and null or invalid entries. Addressing these issues will improve data integrity and consistency.
========================================================================================================================================

table_name: SDL_MDS_PH_NPI_SALES_GROUPINGS
solution: Identify and address anomalies in version numbers, IDs, and account names. Implement validation rules to prevent negative or unexpected values.
snowflake query: 
SELECT * FROM SDL_MDS_PH_NPI_SALES_GROUPINGS
WHERE ID < 0
   OR VERSIONNUMBER < 0 OR VERSIONNUMBER > 9999
   OR VERSION_ID < 0
   OR ACCOUNT_NAME_ID < 0
   OR ACCOUNT_NAME_CODE IS NULL
   OR (CODE IS NULL OR CODE IN ('None', '-'))
   OR (ACCOUNT_NAME_NAME IS NULL OR ACCOUNT_NAME_NAME IN ('None', '-'));



**Recommendations for Specific Anomalies:**

1. **Negative or Unexpected Version Numbers and IDs:**
   - **Solution:** Implement validation checks to ensure version numbers and IDs fall within expected ranges. Use constraints or application logic to prevent entry of invalid data.
   
2. **Missing or Incorrect Account Names:**
   - **Solution:** Ensure account names are not null or set to 'None'. Implement default values or mandatory fields to prevent missing data.
   
3. **Unexpected Codes:**
   - **Solution:** Validate that codes are populated and do not contain placeholder text like 'None'. Use constraints to ensure valid entries.
   
4. **General Validation Status Issues:**
   - **Solution:** Ensure that validation status is consistent with business rules, possibly by implementing a status check or audit process.

By following these solutions and using the provided query, you can effectively detect and address anomalies in your Snowflake table.
========================================================================================================================================

